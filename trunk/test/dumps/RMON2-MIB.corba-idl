/*
 * This CORBA IDL file has been generated by smidump 0.2.5. Do not edit.
 */

#ifndef _RMON2_MIB_IDL_
#define _RMON2_MIB_IDL_

#include <ASN1Types.idl>
#include <SNMPMgmt.idl>
#include <RMON_MIB.idl>
#include <SNMPv2_SMI.idl>
#include <SNMPv2_TC.idl>

module RMON2_MIB {

    typedef RMON_MIB::OwnerStringType OwnerStringType;
    typedef SNMPv2_SMI::Counter32Type Counter32Type;
    typedef SNMPv2_SMI::Gauge32Type Gauge32Type;
    typedef SNMPv2_SMI::Integer32Type Integer32Type;
    typedef SNMPv2_SMI::IpAddressType IpAddressType;
    typedef SNMPv2_TC::RowStatusType RowStatusType;
    typedef SNMPv2_TC::TimeStampType TimeStampType;

    const string moduleIdentity = "rmon";
    const ASN1_ObjectIdentifier rmon = "::RMON2_MIB::rmon";

    /*
             The MIB module for managing remote monitoring
             device implementations. This MIB module
             augments the original RMON MIB as specified in
             RFC 1757.

    LAST-UPDATED:   199605270000Z

    ORGANIZATION:
            "IETF RMON MIB Working Group"

    CONTACT-INFO:
            "Steve Waldbusser   (WG Editor)
             Postal: International Network Services
             650 Castro Street, Suite 260
             Mountain View, CA 94041
             Phone:  +1 415 254 4251
             Email:  waldbusser@ins.com
             
             
             Andy Bierman   (WG Chair)
             Phone:  +1 805 648 2028
             Email:  abierman@west.net"

    */

    /*
             This TC describes an object which counts events with the
             following semantics: objects of this type will be set to
             zero(0) on creation and will thereafter count appropriate
             events, wrapping back to zero(0) when the value 2^32 is
             reached.
             
             Provided that an application discovers the new object within
             the minimum time to wrap it can use the initial value as a
             delta since it last polled the table of which this object is
             part.  It is important for a management station to be aware of
             this minimum time and the actual time between polls, and to
             discard data if the actual time is too long or there is no
             defined minimum time.
             
             Typically this TC is used in tables where the INDEX space is
             constantly changing and/or the TimeFilter mechanism is in use.
    */
    typedef ASN1_Unsigned ZeroBasedCounter32Type; 

    /*
             This TC describes an object that stores the last time its
             entry was created.
             
             This can be used for polling applications to determine that an
             entry has been deleted and re-created between polls, causing
             an otherwise undetectable discontinuity in the data.
    */
    typedef ASN1_Unsigned LastCreateTimeType; 

    /*
             To be used for the index to a table.  Allows an application
             to download only those rows changed since a particular time.
             A row is considered changed if the value of any object in the
             row changes or if the row is created or deleted.
             
             When sysUpTime is equal to zero, this table shall be empty.
             
             One entry exists for each past value of sysUpTime, except that
             the whole table is purged should sysUpTime wrap.
             
             As this basic row is updated new conceptual rows are created
             (which still share the now updated object values with all
             other instances).  The number of instances which are created
             is determined by the value of sysUpTime at which the basic row
             was last updated.  One instance will exist for each value of
             sysUpTime at the last update time for the row.  A new
             timeMark instance is created for each new sysUpTime value.
             Each new conceptual row will be associated with the timeMark
             instance which was created at the value of sysUpTime with
             which the conceptual row is to be associated.
             
             By definition all conceptual rows were updated at or after
             time zero and so at least one conceptual row (associated with
             timeMark.0) must exist for each underlying (basic) row.
             
             See the appendix for further discussion of this variable.
             
             Consider the following fooTable:
             
             fooTable ...
             INDEX { fooTimeMark, fooIndex }
             
             FooEntry {
                fooTimeMark  TimeFilter
                fooIndex     INTEGER,
                fooCounts    Counter
             }
             
             Should there be two basic rows in this table (fooIndex == 1,
             fooIndex == 2) and row 1 was updated most recently at time 6,
             while row 2 was updated most recently at time 8, and both rows
             had been updated on several earlier occasions such that the
             current values were 5 and 9 respectively then the following
             fooCounts instances would exist.
             
             fooCounts.0.1  5
             fooCounts.0.2  9
             fooCounts.1.1  5
             fooCounts.1.2  9
             fooCounts.2.1  5
             fooCounts.2.2  9
             fooCounts.3.1  5
             fooCounts.3.2  9
             fooCounts.4.1  5
             fooCounts.4.2  9
             fooCounts.5.1  5
             fooCounts.5.2  9
             fooCounts.6.1  5
             fooCounts.6.2  9
             fooCounts.7.2  9    -- note that row 1 doesn't exist for
             fooCounts.8.2  9    -- times 7 and 8
    */
    typedef ASN1_Unsigned TimeFilterType; 

    /*
             Identifies the source of the data that the associated
             function is configured to analyze. This source can be any
             interface on this device.
             
             In order to identify a particular interface, this
             object shall identify the instance of the ifIndex
             object, defined in [3,5], for the desired interface.
             
             For example, if an entry were to receive data from
             interface #1, this object would be set to ifIndex.1.
    */
    typedef ASN1_ObjectIdentifier DataSourceType; 

    /*
             This data type is used to communicate with a modem or a
             serial data switch.  A ControlString contains embedded
             commands to control how the device will interact with the
             remote device through the serial interface.  Commands are
             represented as two character sequences beginning with
             the `^' character.
             
             The following commands are recognized by the device (note
             that command characters are case sensitive):
             
                ^s  Send string that follows which is terminated by the
                    next command or the end of string.
                ^c  Delay for the number of seconds that follows.  Toss
                    out any data received rather than storing it in a
                    buffer for parsing.
                ^t  Set timeout to the value represented by the decimal
                    digits that follow.  The default timeout is 20
                    seconds. Note that this timeout may be overridden
                    by a smaller serialTimeout configured for the
                    associated serial interface (see serialConfigTable).
                ^w  Wait for the reply string that follows which is
                    terminated by the next command or the end of string.
                    Partial and case insensitive matching is applied, ie.
                    if the reply string (any case combination) is found
                    anywhere in the received string, then the a match is
                    found.  If the current timeout elapses without a match,
                    then the remaining control string is ignored.
                ^!  The ^ character.
                ^d  Delay the number of seconds specified by the decimal
                    digits that follow.
                ^b  Send break for the number of milliseconds specified by
                    the decimal digits that follow.  If no digits follow,
                    break will be enforced for 250 milliseconds by default.
             
             The following ASCII control characters may be inserted into
             the `^s' send string or the `^w' reply string:
             
                ^@    0x00
                ^A    0x01
                 ..
                ^M    0x0D
                 ..
                ^Z    0x1A
                ^[    0x1B
                ^    0x1C
                ^]    0x1D
                ^^    0x1E
                ^_    0x1F
             
             Binary data may also be inserted into the data stream.  The
             control sequence for each byte of binary data is ^0x##, where
             ## is the hexadecimal representation of the data byte.  Two
             ASCII characters (0-9, a-f, A-F) must follow the `^0x'
             control prefix.  For example, `^0x0D^0x0A' is interpreted as a
             carriage return followed by a line feed.
    */
    typedef ASN1_OctetString ControlStringType; 

    typedef ASN1_Integer FilterProtocolDirDataLocalIndexType; 

    typedef ASN1_Integer FilterProtocolDirLocalIndexType; 

    typedef ASN1_Integer ProtocolDirLocalIndexType; 

    typedef ASN1_OctetString ProtocolDirDescrType; 

    typedef ASN1_OctetString ProtocolDirTypeType; 

    typedef ASN1_Integer ProtocolDirAddressMapConfigType; 
    const ProtocolDirAddressMapConfigType ProtocolDirAddressMapConfigType_notSupported = 1;
    const ProtocolDirAddressMapConfigType ProtocolDirAddressMapConfigType_supportedOff = 2;
    const ProtocolDirAddressMapConfigType ProtocolDirAddressMapConfigType_supportedOn = 3;
    const string ProtocolDirAddressMapConfigType_NameNumberList = "notSupported (1) , supportedOff (2) , supportedOn (3)";

    typedef ASN1_Integer ProtocolDirHostConfigType; 
    const ProtocolDirHostConfigType ProtocolDirHostConfigType_notSupported = 1;
    const ProtocolDirHostConfigType ProtocolDirHostConfigType_supportedOff = 2;
    const ProtocolDirHostConfigType ProtocolDirHostConfigType_supportedOn = 3;
    const string ProtocolDirHostConfigType_NameNumberList = "notSupported (1) , supportedOff (2) , supportedOn (3)";

    typedef ASN1_Integer ProtocolDirMatrixConfigType; 
    const ProtocolDirMatrixConfigType ProtocolDirMatrixConfigType_notSupported = 1;
    const ProtocolDirMatrixConfigType ProtocolDirMatrixConfigType_supportedOff = 2;
    const ProtocolDirMatrixConfigType ProtocolDirMatrixConfigType_supportedOn = 3;
    const string ProtocolDirMatrixConfigType_NameNumberList = "notSupported (1) , supportedOff (2) , supportedOn (3)";

    typedef ASN1_Integer ProtocolDistControlIndexType; 

    typedef ASN1_Integer AddressMapMaxDesiredEntriesType; 

    typedef ASN1_Integer AddressMapControlIndexType; 

    typedef ASN1_Integer HlHostControlIndexType; 

    typedef ASN1_Integer HlHostControlNlMaxDesiredEntriesType; 

    typedef ASN1_Integer HlHostControlAlMaxDesiredEntriesType; 

    typedef ASN1_Integer HlMatrixControlIndexType; 

    typedef ASN1_Integer HlMatrixControlNlMaxDesiredEntriesType; 

    typedef ASN1_Integer HlMatrixControlAlMaxDesiredEntriesType; 

    typedef ASN1_Integer NlMatrixTopNControlIndexType; 

    typedef ASN1_Integer NlMatrixTopNControlMatrixIndexType; 

    typedef ASN1_Integer NlMatrixTopNControlRateBaseType; 
    const NlMatrixTopNControlRateBaseType NlMatrixTopNControlRateBaseType_nlMatrixTopNPkts = 1;
    const NlMatrixTopNControlRateBaseType NlMatrixTopNControlRateBaseType_nlMatrixTopNOctets = 2;
    const string NlMatrixTopNControlRateBaseType_NameNumberList = "nlMatrixTopNPkts (1) , nlMatrixTopNOctets (2)";

    typedef ASN1_Integer NlMatrixTopNControlTimeRemainingType; 

    typedef ASN1_Integer NlMatrixTopNControlRequestedSizeType; 

    typedef ASN1_Integer NlMatrixTopNControlGrantedSizeType; 

    typedef ASN1_Integer NlMatrixTopNIndexType; 

    typedef ASN1_Integer NlMatrixTopNProtocolDirLocalIndexType; 

    typedef ASN1_Integer AlMatrixTopNControlIndexType; 

    typedef ASN1_Integer AlMatrixTopNControlMatrixIndexType; 

    typedef ASN1_Integer AlMatrixTopNControlRateBaseType; 
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNTerminalsPkts = 1;
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNTerminalsOctets = 2;
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNAllPkts = 3;
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNAllOctets = 4;
    const string AlMatrixTopNControlRateBaseType_NameNumberList = "alMatrixTopNTerminalsPkts (1) , alMatrixTopNTerminalsOctets (2) , alMatrixTopNAllPkts (3) , alMatrixTopNAllOctets (4)";

    typedef ASN1_Integer AlMatrixTopNControlTimeRemainingType; 

    typedef ASN1_Integer AlMatrixTopNControlRequestedSizeType; 

    typedef ASN1_Integer AlMatrixTopNControlGrantedSizeType; 

    typedef ASN1_Integer AlMatrixTopNIndexType; 

    typedef ASN1_Integer AlMatrixTopNProtocolDirLocalIndexType; 

    typedef ASN1_Integer AlMatrixTopNAppProtocolDirLocalIndexType; 

    typedef ASN1_Integer UsrHistoryControlIndexType; 

    typedef ASN1_Integer UsrHistoryControlObjectsType; 

    typedef ASN1_Integer UsrHistoryControlBucketsRequestedType; 

    typedef ASN1_Integer UsrHistoryControlBucketsGrantedType; 

    typedef ASN1_Integer UsrHistoryControlIntervalType; 

    typedef ASN1_Integer UsrHistoryObjectIndexType; 

    typedef ASN1_Integer UsrHistoryObjectSampleTypeType; 
    const UsrHistoryObjectSampleTypeType UsrHistoryObjectSampleTypeType_absoluteValue = 1;
    const UsrHistoryObjectSampleTypeType UsrHistoryObjectSampleTypeType_deltaValue = 2;
    const string UsrHistoryObjectSampleTypeType_NameNumberList = "absoluteValue (1) , deltaValue (2)";

    typedef ASN1_Integer UsrHistorySampleIndexType; 

    typedef ASN1_Integer UsrHistoryValStatusType; 
    const UsrHistoryValStatusType UsrHistoryValStatusType_valueNotAvailable = 1;
    const UsrHistoryValStatusType UsrHistoryValStatusType_valuePositive = 2;
    const UsrHistoryValStatusType UsrHistoryValStatusType_valueNegative = 3;
    const string UsrHistoryValStatusType_NameNumberList = "valueNotAvailable (1) , valuePositive (2) , valueNegative (3)";

    typedef ASN1_OctetString ProbeCapabilitiesType; 

    typedef ASN1_OctetString ProbeSoftwareRevType; 

    typedef ASN1_OctetString ProbeHardwareRevType; 

    typedef ASN1_OctetString ProbeDateTimeType; 

    typedef ASN1_Integer ProbeResetControlType; 
    const ProbeResetControlType ProbeResetControlType_running = 1;
    const ProbeResetControlType ProbeResetControlType_warmBoot = 2;
    const ProbeResetControlType ProbeResetControlType_coldBoot = 3;
    const string ProbeResetControlType_NameNumberList = "running (1) , warmBoot (2) , coldBoot (3)";

    typedef ASN1_OctetString ProbeDownloadFileType; 

    typedef ASN1_Integer ProbeDownloadActionType; 
    const ProbeDownloadActionType ProbeDownloadActionType_notDownloading = 1;
    const ProbeDownloadActionType ProbeDownloadActionType_downloadToPROM = 2;
    const ProbeDownloadActionType ProbeDownloadActionType_downloadToRAM = 3;
    const string ProbeDownloadActionType_NameNumberList = "notDownloading (1) , downloadToPROM (2) , downloadToRAM (3)";

    typedef ASN1_Integer ProbeDownloadStatusType; 
    const ProbeDownloadStatusType ProbeDownloadStatusType_downloadSuccess = 1;
    const ProbeDownloadStatusType ProbeDownloadStatusType_downloadStatusUnknown = 2;
    const ProbeDownloadStatusType ProbeDownloadStatusType_downloadGeneralError = 3;
    const ProbeDownloadStatusType ProbeDownloadStatusType_downloadNoResponseFromServer = 4;
    const ProbeDownloadStatusType ProbeDownloadStatusType_downloadChecksumError = 5;
    const ProbeDownloadStatusType ProbeDownloadStatusType_downloadIncompatibleImage = 6;
    const ProbeDownloadStatusType ProbeDownloadStatusType_downloadTftpFileNotFound = 7;
    const ProbeDownloadStatusType ProbeDownloadStatusType_downloadTftpAccessViolation = 8;
    const string ProbeDownloadStatusType_NameNumberList = "downloadSuccess (1) , downloadStatusUnknown (2) , downloadGeneralError (3) , downloadNoResponseFromServer (4) , downloadChecksumError (5) , downloadIncompatibleImage (6) , downloadTftpFileNotFound (7) , downloadTftpAccessViolation (8)";

    typedef ASN1_Integer SerialModeType; 
    const SerialModeType SerialModeType_direct = 1;
    const SerialModeType SerialModeType_modem = 2;
    const string SerialModeType_NameNumberList = "direct (1) , modem (2)";

    typedef ASN1_Integer SerialProtocolType; 
    const SerialProtocolType SerialProtocolType_other = 1;
    const SerialProtocolType SerialProtocolType_slip = 2;
    const SerialProtocolType SerialProtocolType_ppp = 3;
    const string SerialProtocolType_NameNumberList = "other (1) , slip (2) , ppp (3)";

    typedef ASN1_Integer SerialTimeoutType; 

    typedef ASN1_OctetString SerialModemInitStringType; 

    typedef ASN1_OctetString SerialModemHangUpStringType; 

    typedef ASN1_OctetString SerialModemConnectRespType; 

    typedef ASN1_OctetString SerialModemNoConnectRespType; 

    typedef ASN1_Integer SerialDialoutTimeoutType; 

    typedef ASN1_Integer TrapDestIndexType; 

    typedef ASN1_OctetString TrapDestCommunityType; 

    typedef ASN1_Integer TrapDestProtocolType; 
    const TrapDestProtocolType TrapDestProtocolType_ip = 1;
    const TrapDestProtocolType TrapDestProtocolType_ipx = 2;
    const string TrapDestProtocolType_NameNumberList = "ip (1) , ipx (2)";

    typedef ASN1_Integer SerialConnectIndexType; 

    typedef ASN1_Integer SerialConnectTypeType; 
    const SerialConnectTypeType SerialConnectTypeType_direct = 1;
    const SerialConnectTypeType SerialConnectTypeType_modem = 2;
    const SerialConnectTypeType SerialConnectTypeType_switch = 3;
    const SerialConnectTypeType SerialConnectTypeType_modemSwitch = 4;
    const string SerialConnectTypeType_NameNumberList = "direct (1) , modem (2) , switch (3) , modemSwitch (4)";

    typedef ASN1_OctetString SerialConnectDialStringType; 

    typedef ASN1_OctetString SerialConnectSwitchConnectSeqType; 

    typedef ASN1_OctetString SerialConnectSwitchDisconnectSeqType; 

    typedef ASN1_OctetString SerialConnectSwitchResetSeqType; 


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface etherStats2Entry : RMON_MIB::etherStatsEntry {

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type etherStatsDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last
             activated. This can be used by the management station to
             ensure that the table has not been deleted and recreated
             between polls.
        */
        readonly attribute LastCreateTimeType etherStatsCreateTime;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface tokenRingMLStats2Entry : TOKEN_RING_RMON_MIB::tokenRingMLStatsEntry {

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type tokenRingMLStatsDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last activated.
             This can be used by the management station to ensure that the
             table has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType tokenRingMLStatsCreateTime;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface tokenRingPStats2Entry : TOKEN_RING_RMON_MIB::tokenRingPStatsEntry {

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type tokenRingPStatsDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last activated.
             This can be used by the management station to ensure that the
             table has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType tokenRingPStatsCreateTime;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface historyControl2Entry : RMON_MIB::historyControlEntry {

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type historyControlDroppedFrames;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface hostControl2Entry : RMON_MIB::hostControlEntry {

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type hostControlDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last
             activated. This can be used by the management station to
             ensure that the table has not been deleted and recreated
             between polls.
        */
        readonly attribute LastCreateTimeType hostControlCreateTime;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface matrixControl2Entry : RMON_MIB::matrixControlEntry {

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type matrixControlDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last
             activated. This can be used by the management station to
             ensure that the table has not been deleted and recreated
             between polls.
        */
        readonly attribute LastCreateTimeType matrixControlCreateTime;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface channel2Entry : RMON_MIB::channelEntry {

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type channelDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last
             activated. This can be used by the management station to
             ensure that the table has not been deleted and recreated
             between polls.
        */
        readonly attribute LastCreateTimeType channelCreateTime;
    };


    /*
             Provides a variable-length packet filter feature to the
             RMON-1 filter table.
    */
    interface filter2Entry : RMON_MIB::filterEntry {

        /*
             When this object is set to a non-zero value, the filter that
             it is associated with performs the following operations on
             every packet:
             
             1) - If the packet doesn't match the protocol directory entry
                  identified by this object, discard the packet and exit
                  (i.e., discard the packet if it is not of the identified
                  protocol).
             2) - If the associated filterProtocolDirLocalIndex is non-zero
                  and the packet doesn't match the protocol directory
                  entry identified by that object, discard the packet and
                  exit
             3) - If the packet matches, perform the regular filter
                  algorithm as if the beginning of this named protocol is
                  the beginning of the packet, potentially applying the
                  filterOffset value to move further into the packet.
        */
        attribute FilterProtocolDirDataLocalIndexType filterProtocolDirDataLocalIndex;

        /*
             When this object is set to a non-zero value, the filter that
             it is associated with will discard the packet if the packet
             doesn't match this protocol directory entry.
        */
        attribute FilterProtocolDirLocalIndexType filterProtocolDirLocalIndex;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface ringStationControl2Entry : TOKEN_RING_RMON_MIB::ringStationControlEntry {

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type ringStationControlDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last activated.
             This can be used by the management station to ensure that the
             table has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType ringStationControlCreateTime;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface sourceRoutingStats2Entry : TOKEN_RING_RMON_MIB::sourceRoutingStatsEntry {

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type sourceRoutingStatsDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last activated.
             This can be used by the management station to ensure that the
             table has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType sourceRoutingStatsCreateTime;
    };

    interface protocolDir : SNMPMgmt::SmiEntry {

        /*
             The value of sysUpTime at the time the protocol directory
             was last modified, either through insertions or deletions,
             or through modifications of either the
             protocolDirAddressMapConfig, protocolDirHostConfig, or
             protocolDirMatrixConfig.
        */
        readonly attribute TimeStampType protocolDirLastChange;

        /*
             This table lists the protocols that this agent has the
             capability to decode and count.  There is one entry in this
             table for each such protocol.  These protocols represent
             different network layer, transport layer, and higher-layer
             protocols.  The agent should boot up with this table
             preconfigured with those protocols that it knows about and
             wishes to monitor.  Implementations are strongly encouraged to
             support protocols higher than the network layer (at least for
             the protocol distribution group), even for implementations
             that don't support the application layer groups.
        */
        SNMPMgmt::SmiTableIterator get_protocolDirTable();
    };


    /*
             A conceptual row in the protocolDirTable.
             
             An example of the indexing of this entry is
             protocolDirLocalIndex.8.0.0.0.1.0.0.8.0.2.0.0, which is the
             encoding of a length of 8, followed by 8 subids encoding the
             protocolDirID of 1.2048, followed by a length of 2 and the
             2 subids encoding zero-valued parameters.
    */
    interface protocolDirEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "protocolDirID protocolDirParameters";

        /*
             The locally arbitrary, but unique identifier associated
             with this protocolDir entry.
             
             The value for each supported protocol must remain constant at
             least from one re-initialization of the entity's network
             management system to the next re-initialization, except that
             if a protocol is deleted and re-created, it must be re-created
             with a new value that has not been used since the last
             re-initialization.
             
             The specific value is meaningful only within a given SNMP
             entity. A protocolDirLocalIndex must not be re-used until the
             next agent-restart in the event the protocol directory entry
             is deleted.
        */
        readonly attribute ProtocolDirLocalIndexType protocolDirLocalIndex;

        /*
             A textual description of the protocol encapsulation.
             A probe may choose to describe only a subset of the
             entire encapsulation (e.g. only the highest layer).
             
             This object is intended for human consumption only.
             
             This object may not be modified if the associated
             protocolDirStatus object is equal to active(1).
        */
        attribute ProtocolDirDescrType protocolDirDescr;

        /*
             This object describes 2 attributes of this protocol
             directory entry.
             
             The presence or absence of the `extensible' bit describes
             whether or not this protocol directory entry can be extended
             by the user by creating protocol directory entries which are
             children of this protocol.
             
             An example of an entry that will often allow extensibility is
             `ip.udp'.  The probe may automatically populate some children
             of this node such as `ip.udp.snmp' and `ip.udp.dns'.
             A probe administrator or user may also populate additional
             children via remote SNMP requests that create entries in this
             table.  When a child node is added for a protocol for which the
             probe has no built in support, extending a parent node (for
             which the probe does have built in support),
             that child node is not extendible.  This is termed `limited
             extensibility'.
             
             When a child node is added through this extensibility
             mechanism, the values of protocolDirLocalIndex and
             protocolDirType shall be assigned by the agent.
             
             The other objects in the entry will be assigned by the
             manager who is creating the new entry.
             
             This object also describes whether or not this agent can
             recognize addresses for this protocol, should it be a network
             level protocol.  That is, while a probe may be able to
             recognize packets of a particular network layer protocol and
             count them, it takes additional logic to be able to recognize
             the addresses in this protocol and to populate network layer
             or application layer tables with the addresses in this
             protocol.  If this bit is set, the agent will recognize
             network layer addresses for this protoocl and populate the
             network and application layer host and matrix tables with
             these protocols.
             
             Note that when an entry is created, the agent will supply
             values for the bits that match the capabilities of the agent
             with respect to this protocol.  Note that since row creations
             usually exercise the limited extensibility feature, these
             bits will usually be set to zero.
        */
        readonly attribute ProtocolDirTypeType protocolDirType;

        /*
             This object describes and configures the probe's support for
             address mapping for this protocol.  When the probe creates
             entries in this table for all protocols that it understands,
             it will set the entry to notSupported(1) if it doesn't have
             the capability to perform address mapping for the protocol or
             if this protocol is not a network-layer protocol.  When
             an entry is created in this table by a management operation as
             part of the limited extensibility feature, the probe must set
             this value to notSupported(1), because limited extensibility
             of the protocolDirTable does not extend to interpreting
             addresses of the extended protocols.
             
             If the value of this object is notSupported(1), the probe
             will not perform address mapping for this protocol and
             shall not allow this object to be changed to any other value.
             If the value of this object is supportedOn(3), the probe
             supports address mapping for this protocol and is configured
             to perform address mapping for this protocol for all
             addressMappingControlEntries and all interfaces.
             If the value of this object is supportedOff(2), the probe
             supports address mapping for this protocol but is configured
             to not perform address mapping for this protocol for any
             addressMappingControlEntries and all interfaces.
             Whenever this value changes from supportedOn(3) to
             supportedOff(2), the probe shall delete all related entries in
             the addressMappingTable.
        */
        attribute ProtocolDirAddressMapConfigType protocolDirAddressMapConfig;

        /*
             This object describes and configures the probe's support for
             the network layer and application layer host tables for this
             protocol.  When the probe creates entries in this table for
             all protocols that it understands, it will set the entry to
             notSupported(1) if it doesn't have the capability to track the
             nlHostTable for this protocol or if the alHostTable is
             implemented but doesn't have the capability to track this
             protocol.  Note that if the alHostTable is implemented, the
             probe may only support a protocol if it is supported in both
             the nlHostTable and the alHostTable.
             If the associated protocolDirType object has the
             addressRecognitionCapable bit set, then this is a network
             layer protocol for which the probe recognizes addresses, and
             thus the probe will populate the nlHostTable and alHostTable
             with addresses it discovers for this protocol.
             
             If the value of this object is notSupported(1), the probe
             will not track the nlHostTable or alHostTable for this
             protocol and shall not allow this object to be changed to any
             other value. If the value of this object is supportedOn(3),
             the probe supports tracking of the nlHostTable and alHostTable
             for this protocol and is configured to track both tables
             for this protocol for all control entries and all interfaces.
             If the value of this object is supportedOff(2), the probe
             supports tracking of the nlHostTable and alHostTable for this
             protocol but is configured to not track these tables
             for any control entries or interfaces.
             Whenever this value changes from supportedOn(3) to
             supportedOff(2), the probe shall delete all related entries in
             the nlHostTable and alHostTable.
             
             Note that since each alHostEntry references 2 protocol
             directory entries, one for the network address and one for the
             type of the highest protocol recognized, that an entry will
             only be created in that table if this value is supportedOn(3)
             for both protocols.
        */
        attribute ProtocolDirHostConfigType protocolDirHostConfig;

        /*
             This object describes and configures the probe's support for
             the network layer and application layer matrix tables for this
             protocol.  When the probe creates entries in this table for
             all protocols that it understands, it will set the entry to
             notSupported(1) if it doesn't have the capability to track the
             nlMatrixTables for this protocol or if the alMatrixTables are
             implemented but don't have the capability to track this
             protocol.  Note that if the alMatrix tables are implemented,
             the probe may only support a protocol if it is supported in
             the the both of the nlMatrixTables and both of the
             alMatrixTables.
             If the associated protocolDirType object has the
             addressRecognitionCapable bit set, then this is a network
             layer protocol for which the probe recognizes addresses, and
             thus the probe will populate both of the nlMatrixTables and
             both of the alMatrixTables with addresses it discovers for
             this protocol.
             
             If the value of this object is notSupported(1), the probe
             will not track either of the nlMatrixTables or the
             alMatrixTables for this protocol and shall not allow this
             object to be changed to any other value. If the value of this
             object is supportedOn(3), the probe supports tracking of both
             of the nlMatrixTables and (if implemented) both of the
             alMatrixTables for this protocol and is configured to track
             these tables for this protocol for all control entries and all
             interfaces. If the value of this object is supportedOff(2),
             the probe supports tracking of both of the nlMatrixTables and
             (if implemented) both of the alMatrixTables for this protocol
             but is configured to not track these tables for this
             protocol for any control entries or interfaces.
             Whenever this value changes from supportedOn(3) to
             supportedOff(2), the probe shall delete all related entries in
             the nlMatrixTables and the alMatrixTables.
             
             Note that since each alMatrixEntry references 2 protocol
             directory entries, one for the network address and one for the
             type of the highest protocol recognized, that an entry will
             only be created in that table if this value is supportedOn(3)
             for both protocols.
        */
        attribute ProtocolDirMatrixConfigType protocolDirMatrixConfig;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType protocolDirOwner;

        /*
             The status of this protocol directory entry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all associated
             entries in the nlHostTable, nlMatrixSDTable, nlMatrixDSTable,
             alHostTable, alMatrixSDTable, and alMatrixDSTable shall be
             deleted.
        */
        attribute RowStatusType protocolDirStatus;
    };

    interface protocolDist : SNMPMgmt::SmiEntry {

        /*
             Controls the setup of protocol type distribution statistics
             tables.
             
             Implementations are encouraged to add an entry per monitored
             interface upon initialization so that a default collection
             of protocol statistics is available.
             
             Rationale:
             This table controls collection of very basic statistics
             for any or all of the protocols detected on a given interface.
             An NMS can use this table to quickly determine bandwidth
             allocation utilized by different protocols.
             
             A media-specific statistics collection could also
             be configured (e.g. etherStats, trPStats) to easily obtain
             total frame, octet, and droppedEvents for the same
             interface.
        */
        SNMPMgmt::SmiTableIterator get_protocolDistControlTable();

        /*
             An entry is made in this table for every protocol in the
             protocolDirTable which has been seen in at least one packet.
             Counters are updated in this table for every protocol type
             that is encountered when parsing a packet, but no counters are
             updated for packets with MAC-layer errors.
             
             Note that if a protocolDirEntry is deleted, all associated
             entries in this table are removed.
        */
        SNMPMgmt::SmiTableIterator get_protocolDistStatsTable();
    };


    /*
             A conceptual row in the protocolDistControlTable.
             
             An example of the indexing of this entry is
             protocolDistControlDroppedFrames.7
    */
    interface protocolDistControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "protocolDistControlIndex";

        /*
             The source of data for the this protocol distribution.
             
             The statistics in this group reflect all packets
             on the local network segment attached to the
             identified interface.
             
             This object may not be modified if the associated
             protocolDistControlStatus object is equal to active(1).
        */
        attribute DataSourceType protocolDistControlDataSource;

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type protocolDistControlDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last
             activated. This can be used by the management station to
             ensure that the table has not been deleted and recreated
             between polls.
        */
        readonly attribute LastCreateTimeType protocolDistControlCreateTime;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType protocolDistControlOwner;

        /*
             The status of this row.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all associated
             entries in the protocolDistStatsTable shall be deleted.
        */
        attribute RowStatusType protocolDistControlStatus;
    };


    /*
             A conceptual row in the protocolDistStatsTable.
             
             The index is composed of the protocolDistControlIndex of the
             associated protocolDistControlEntry followed by the
             protocolDirLocalIndex of the associated protocol that this
             entry represents.  In other words, the index identifies the
             protocol distribution an entry is a part of as well as the
             particular protocol that it represents.
             
             An example of the indexing of this entry is
             protocolDistStatsPkts.1.18
    */
    interface protocolDistStatsEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "protocolDistControlIndex protocolDirLocalIndex";

        /*
             The number of packets without errors received of this
             protocol type.  Note that this is the number of link-layer
             packets, so if a single network-layer packet is fragmented
             into several link-layer frames, this counter is incremented
             several times.
        */
        readonly attribute ZeroBasedCounter32Type protocolDistStatsPkts;

        /*
             The number of octets in packets received of this protocol
             type since it was added to the protocolDistStatsTable
             (excluding framing bits but including FCS octets), except for
             those octets in packets that contained errors.
             
             Note this doesn't count just those octets in the particular
             protocol frames, but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type protocolDistStatsOctets;
    };

    interface addressMap : SNMPMgmt::SmiEntry {

        /*
             The number of times an address mapping entry has been
             inserted into the addressMapTable.  If an entry is inserted,
             then deleted, and then inserted, this counter will be
             incremented by 2.
             
             Note that the table size can be determined by subtracting
             addressMapDeletes from addressMapInserts.
        */
        readonly attribute Counter32Type addressMapInserts;

        /*
             The number of times an address mapping entry has been
             deleted from the addressMapTable (for any reason).  If
             an entry is deleted, then inserted, and then deleted, this
             counter will be incremented by 2.
             
             Note that the table size can be determined by subtracting
             addressMapDeletes from addressMapInserts.
        */
        readonly attribute Counter32Type addressMapDeletes;

        /*
             The maximum number of entries that are desired in the
             addressMapTable. The probe will not create more than
             this number of entries in the table, but may choose to create
             fewer entries in this table for any reason including the lack
             of resources.
             
             If this object is set to a value less than the current number
             of entries, enough entries are chosen in an
             implementation-dependent manner and deleted so that the number
             of entries in the table equals the value of this object.
             
             If this value is set to -1, the probe may create any number
             of entries in this table.
             
             This object may be used to control how resources are allocated
             on the probe for the various RMON functions.
        */
        attribute AddressMapMaxDesiredEntriesType addressMapMaxDesiredEntries;

        /*
             A table to control the collection of network layer address to
             physical address to interface mappings.
             
             Note that this is not like the typical RMON
             controlTable and dataTable in which each entry creates
             its own data table.  Each entry in this table enables the
             discovery of addresses on a new interface and the placement
             of address mappings into the central addressMapTable.
             
             Implementations are encouraged to add an entry per monitored
             interface upon initialization so that a default collection
             of address mappings is available.
        */
        SNMPMgmt::SmiTableIterator get_addressMapControlTable();

        /*
             A table of network layer address to physical address to
             interface mappings.
             
             The probe will add entries to this table based on the source
             MAC and network addresses seen in packets without MAC-level
             errors. The probe will populate this table for all protocols
             in the protocol directory table whose value of
             protocolDirAddressMapConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirAddressMapConfig value of supportedOff(2).
        */
        SNMPMgmt::SmiTableIterator get_addressMapTable();
    };


    /*
             A conceptual row in the addressMapControlTable.
             An example of the indexing of this entry is
             addressMapControlDroppedFrames.1
    */
    interface addressMapControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "addressMapControlIndex";

        /*
             The source of data for this addressMapControlEntry.
        */
        attribute DataSourceType addressMapControlDataSource;

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type addressMapControlDroppedFrames;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType addressMapControlOwner;

        /*
             The status of this addressMap control entry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all associated
             entries in the addressMapTable shall be deleted.
        */
        attribute RowStatusType addressMapControlStatus;
    };


    /*
             A conceptual row in the addressMapTable.
             The protocolDirLocalIndex in the index identifies the network
             layer protocol of the addressMapNetworkAddress.
             An example of the indexing of this entry is
             addressMapSource.783495.18.4.128.2.6.6.11.1.3.6.1.2.1.2.2.1.1.1
    */
    interface addressMapEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "addressMapTimeMark protocolDirLocalIndex addressMapNetworkAddress addressMapSource";

        /*
             The last source physical address on which the associated
             network address was seen.  If the protocol of the associated
             network address was encapsulated inside of a network-level or
             higher protocol, this will be the address of the next-lower
             protocol with the addressRecognitionCapable bit enabled and
             will be formatted as specified for that protocol.
        */
        readonly attribute ASN1_OctetString addressMapPhysicalAddress;

        /*
             The value of sysUpTime at the time this entry was last
             created or the values of the physical address changed.
             
             This can be used to help detect duplicate address problems, in
             which case this object will be updated frequently.
        */
        readonly attribute TimeStampType addressMapLastChange;
    };

    interface nlHost : SNMPMgmt::SmiEntry {

        /*
             A list of higher layer (i.e. non-MAC) host table control entries.
             
             These entries will enable the collection of the network and
             application level host tables indexed by network addresses.
             Both the network and application level host tables are
             controlled by this table is so that they will both be created
             and deleted at the same time, further increasing the ease with
             which they can be implemented as a single datastore (note that
             if an implementation stores application layer host records in
             memory, it can derive network layer host records from them).
             
             Entries in the nlHostTable will be created on behalf of each
             entry in this table. Additionally, if this probe implements
             the alHostTable, entries in the alHostTable will be created on
             behalf of each entry in this table.
             
             Implementations are encouraged to add an entry per monitored
             interface upon initialization so that a default collection
             of host statistics is available.
        */
        SNMPMgmt::SmiTableIterator get_hlHostControlTable();

        /*
             A collection of statistics for a particular network layer
             address that has been discovered on an interface of this
             device.
             
             The probe will populate this table for all network layer
             protocols in the protocol directory table whose value of
             protocolDirHostConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirHostConfig value of supportedOff(2).
             
             The probe will add to this table all addresses seen
             as the source or destination address in all packets with no
             MAC errors, and will increment octet and packet counts in the
             table for all packets with no MAC errors.
        */
        SNMPMgmt::SmiTableIterator get_nlHostTable();
    };


    /*
             A conceptual row in the hlHostControlTable.
             
             An example of the indexing of this entry is
             hlHostControlNlDroppedFrames.1
    */
    interface hlHostControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlHostControlIndex";

        /*
             The source of data for the associated host tables.
             
             The statistics in this group reflect all packets
             on the local network segment attached to the
             identified interface.
             
             This object may not be modified if the associated
             hlHostControlStatus object is equal to active(1).
        */
        attribute DataSourceType hlHostControlDataSource;

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for the associated
             nlHost entries for whatever reason.  Most often, this event
             occurs when the probe is out of some resources and decides to
             shed load from this collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that if the nlHostTable is inactive because no protocols
             are enabled in the protocol directory, this value should be 0.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type hlHostControlNlDroppedFrames;

        /*
             The number of times an nlHost entry has been
             inserted into the nlHost table.  If an entry is inserted, then
             deleted, and then inserted, this counter will be incremented
             by 2.
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlHostControlNlDeletes from hlHostControlNlInserts.
        */
        readonly attribute Counter32Type hlHostControlNlInserts;

        /*
             The number of times an nlHost entry has been
             deleted from the nlHost table (for any reason).  If an entry
             is deleted, then inserted, and then deleted, this counter will
             be incremented by 2.
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlHostControlNlDeletes from hlHostControlNlInserts.
        */
        readonly attribute Counter32Type hlHostControlNlDeletes;

        /*
             The maximum number of entries that are desired in the
             nlHostTable on behalf of this control entry. The probe will
             not create more than this number of associated entries in the
             table, but may choose to create fewer entries in this table
             for any reason including the lack of resources.
             
             If this object is set to a value less than the current number
             of entries, enough entries are chosen in an
             implementation-dependent manner and deleted so that the number
             of entries in the table equals the value of this object.
             
             If this value is set to -1, the probe may create any number
             of entries in this table.  If the associated
             hlHostControlStatus object is equal to `active', this
             object may not be modified.
             
             This object may be used to control how resources are allocated
             on the probe for the various RMON functions.
        */
        attribute HlHostControlNlMaxDesiredEntriesType hlHostControlNlMaxDesiredEntries;

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for the associated
             alHost entries for whatever reason.  Most often, this event
             occurs when the probe is out of some resources and decides to
             shed load from this collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             Note that if the alHostTable is not implemented or is inactive
             because no protocols are enabled in the protocol directory,
             this value should be 0.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type hlHostControlAlDroppedFrames;

        /*
             The number of times an alHost entry has been
             inserted into the alHost table.  If an entry is inserted, then
             deleted, and then inserted, this counter will be incremented
             by 2.
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlHostControlAlDeletes from hlHostControlAlInserts.
        */
        readonly attribute Counter32Type hlHostControlAlInserts;

        /*
             The number of times an alHost entry has been
             deleted from the alHost table (for any reason).  If an entry
             is deleted, then inserted, and then deleted, this counter will
             be incremented by 2.
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlHostControlAlDeletes from hlHostControlAlInserts.
        */
        readonly attribute Counter32Type hlHostControlAlDeletes;

        /*
             The maximum number of entries that are desired in the alHost
             table on behalf of this control entry. The probe will not
             create more than this number of associated entries in the
             table, but may choose to create fewer entries in this table
             for any reason including the lack of resources.
             
             If this object is set to a value less than the current number
             of entries, enough entries are chosen in an
             implementation-dependent manner and deleted so that the number
             of entries in the table equals the value of this object.
             
             If this value is set to -1, the probe may create any number
             of entries in this table.  If the associated
             hlHostControlStatus object is equal to `active', this
             object may not be modified.
             
             This object may be used to control how resources are allocated
             on the probe for the various RMON functions.
        */
        attribute HlHostControlAlMaxDesiredEntriesType hlHostControlAlMaxDesiredEntries;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType hlHostControlOwner;

        /*
             The status of this hlHostControlEntry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all associated
             entries in the nlHostTable and alHostTable shall be deleted.
        */
        attribute RowStatusType hlHostControlStatus;
    };


    /*
             A conceptual row in the nlHostTable.
             
             The hlHostControlIndex value in the index identifies the
             hlHostControlEntry on whose behalf this entry was created.
             The protocolDirLocalIndex value in the index identifies the
             network layer protocol of the nlHostAddress.
             
             An example of the indexing of this entry is
             nlHostOutPkts.1.783495.18.4.128.2.6.6.
    */
    interface nlHostEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlHostControlIndex nlHostTimeMark protocolDirLocalIndex nlHostAddress";

        /*
             The number of packets without errors transmitted to
             this address since it was added to the nlHostTable.  Note that
             this is the number of link-layer packets, so if a single
             network-layer packet is fragmented into several link-layer
             frames, this counter is incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type nlHostInPkts;

        /*
             The number of packets without errors transmitted by
             this address since it was added to the nlHostTable.  Note that
             this is the number of link-layer packets, so if a single
             network-layer packet is fragmented into several link-layer
             frames, this counter is incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type nlHostOutPkts;

        /*
             The number of octets transmitted to this address
             since it was added to the nlHostTable (excluding
             framing bits but including FCS octets), excluding
             those octets in packets that contained errors.
             
             Note this doesn't count just those octets in the particular
             protocol frames, but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type nlHostInOctets;

        /*
             The number of octets transmitted by this address
             since it was added to the nlHostTable (excluding
             framing bits but including FCS octets), excluding
             those octets in packets that contained errors.
             
             Note this doesn't count just those octets in the particular
             protocol frames, but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type nlHostOutOctets;

        /*
             The number of packets without errors transmitted by this
             address that were directed to any MAC broadcast addresses
             or to any MAC multicast addresses since this host was
             added to the nlHostTable. Note that this is the number of
             link-layer packets, so if a single network-layer packet is
             fragmented into several link-layer frames, this counter is
             incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type nlHostOutMacNonUnicastPkts;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType nlHostCreateTime;
    };

    interface nlMatrix : SNMPMgmt::SmiEntry {

        /*
             A list of higher layer (i.e. non-MAC) matrix control entries.
             
             These entries will enable the collection of the network and
             application level matrix tables containing conversation
             statistics indexed by pairs of network addresses.
             Both the network and application level matrix tables are
             controlled by this table is so that they will both be created
             and deleted at the same time, further increasing the ease with
             which they can be implemented as a single datastore (note that
             if an implementation stores application layer matrix records
             in memory, it can derive network layer matrix records from
             them).
             
             Entries in the nlMatrixSDTable and nlMatrixDSTable will be
             created on behalf of each entry in this table.  Additionally,
             if this probe implements the alMatrix tables, entries in the
             alMatrix tables will be created on behalf of each entry in
             this table.
        */
        SNMPMgmt::SmiTableIterator get_hlMatrixControlTable();

        /*
             A list of traffic matrix entries which collect statistics for
             conversations between two network-level addresses.  This table
             is indexed first by the source address and then by the
             destination address to make it convenient to collect all
             conversations from a particular address.
             
             The probe will populate this table for all network layer
             protocols in the protocol directory table whose value of
             protocolDirMatrixConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirMatrixConfig value of supportedOff(2).
             The probe will add to this table all pairs of addresses
             seen in all packets with no MAC errors, and will increment
             octet and packet counts in the table for all packets with no
             MAC errors.
             
             Further, this table will only contain entries that have a
             corresponding entry in the nlMatrixDSTable with the same
             source address and destination address.
        */
        SNMPMgmt::SmiTableIterator get_nlMatrixSDTable();

        /*
             A list of traffic matrix entries which collect statistics for
             conversations between two network-level addresses.  This table
             is indexed first by the destination address and then by the
             source address to make it convenient to collect all
             conversations to a particular address.
             
             The probe will populate this table for all network layer
             protocols in the protocol directory table whose value of
             protocolDirMatrixConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirMatrixConfig value of supportedOff(2).
             
             The probe will add to this table all pairs of addresses
             seen in all packets with no MAC errors, and will increment
             octet and packet counts in the table for all packets with no
             MAC errors.
             
             Further, this table will only contain entries that have a
             corresponding entry in the nlMatrixSDTable with the same
             source address and destination address.
        */
        SNMPMgmt::SmiTableIterator get_nlMatrixDSTable();

        /*
             A set of parameters that control the creation of a
             report of the top N matrix entries according to
             a selected metric.
        */
        SNMPMgmt::SmiTableIterator get_nlMatrixTopNControlTable();

        /*
             A set of statistics for those network layer matrix entries
             that have counted the highest number of octets or packets.
        */
        SNMPMgmt::SmiTableIterator get_nlMatrixTopNTable();
    };


    /*
             A conceptual row in the hlMatrixControlTable.
             
             An example of indexing of this entry is
             hlMatrixControlNlDroppedFrames.1
    */
    interface hlMatrixControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlMatrixControlIndex";

        /*
             The source of the data for the associated matrix tables.
             
             The statistics in this group reflect all packets
             on the local network segment attached to the
             identified interface.
             
             This object may not be modified if the associated
             hlMatrixControlStatus object is equal to active(1).
        */
        attribute DataSourceType hlMatrixControlDataSource;

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that if the nlMatrixTables are inactive because no
             protocols are enabled in the protocol directory, this value
             should be 0.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type hlMatrixControlNlDroppedFrames;

        /*
             The number of times an nlMatrix entry has been
             inserted into the nlMatrix tables.  If an entry is inserted,
             then deleted, and then inserted, this counter will be
             incremented by 2.  The addition of a conversation into both
             the nlMatrixSDTable and nlMatrixDSTable shall be counted as
             two insertions (even though every addition into one table must
             be accompanied by an insertion into the other).
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             Note that the sum of then nlMatrixSDTable and nlMatrixDSTable
             sizes can be determined by subtracting
             hlMatrixControlNlDeletes from hlMatrixControlNlInserts.
        */
        readonly attribute Counter32Type hlMatrixControlNlInserts;

        /*
             The number of times an nlMatrix entry has been
             deleted from the nlMatrix tables (for any reason).  If an
             entry is deleted, then inserted, and then deleted, this
             counter will be incremented by 2.  The deletion of a
             conversation from both the nlMatrixSDTable and nlMatrixDSTable
             shall be counted as two deletions (even though every deletion
             from one table must be accompanied by a deletion from the
             other).
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlMatrixControlNlDeletes from hlMatrixControlNlInserts.
        */
        readonly attribute Counter32Type hlMatrixControlNlDeletes;

        /*
             The maximum number of entries that are desired in the
             nlMatrix tables on behalf of this control entry. The probe
             will not create more than this number of associated entries in
             the table, but may choose to create fewer entries in this
             table for any reason including the lack of resources.
             
             If this object is set to a value less than the current number
             of entries, enough entries are chosen in an
             implementation-dependent manner and deleted so that the number
             of entries in the table equals the value of this object.
             
             If this value is set to -1, the probe may create any number
             of entries in this table.  If the associated
             hlMatrixControlStatus object is equal to `active', this
             object may not be modified.
             
             This object may be used to control how resources are allocated
             on the probe for the various RMON functions.
        */
        attribute HlMatrixControlNlMaxDesiredEntriesType hlMatrixControlNlMaxDesiredEntries;

        /*
             The total number of frames which were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             for which the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that if the alMatrixTables are not implemented or are
             inactive because no protocols are enabled in the protocol
             directory, this value should be 0.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type hlMatrixControlAlDroppedFrames;

        /*
             The number of times an alMatrix entry has been
             inserted into the alMatrix tables.  If an entry is inserted,
             then deleted, and then inserted, this counter will be
             incremented by 2.  The addition of a conversation into both
             the alMatrixSDTable and alMatrixDSTable shall be counted as
             two insertions (even though every addition into one table must
             be accompanied by an insertion into the other).
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlMatrixControlAlDeletes from hlMatrixControlAlInserts.
        */
        readonly attribute Counter32Type hlMatrixControlAlInserts;

        /*
             The number of times an alMatrix entry has been
             deleted from the alMatrix tables.  If an entry is deleted,
             then inserted, and then deleted, this counter will be
             incremented by 2.  The deletion of a conversation from both
             the alMatrixSDTable and alMatrixDSTable shall be counted as
             two deletions (even though every deletion from one table must
             be accompanied by a deletion from the other).
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlMatrixControlAlDeletes from hlMatrixControlAlInserts.
        */
        readonly attribute Counter32Type hlMatrixControlAlDeletes;

        /*
             The maximum number of entries that are desired in the
             alMatrix tables on behalf of this control entry. The probe
             will not create more than this number of associated entries in
             the table, but may choose to create fewer entries in this
             table for any reason including the lack of resources.
             
             If this object is set to a value less than the current number
             of entries, enough entries are chosen in an
             implementation-dependent manner and deleted so that the number
             of entries in the table equals the value of this object.
             
             If this value is set to -1, the probe may create any number
             of entries in this table.  If the associated
             hlMatrixControlStatus object is equal to `active', this
             object may not be modified.
             
             This object may be used to control how resources are allocated
             on the probe for the various RMON functions.
        */
        attribute HlMatrixControlAlMaxDesiredEntriesType hlMatrixControlAlMaxDesiredEntries;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType hlMatrixControlOwner;

        /*
             The status of this hlMatrixControlEntry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all
             associated entries in the nlMatrixSDTable,
             nlMatrixDSTable, alMatrixSDTable, and the alMatrixDSTable
             shall be deleted by the agent.
        */
        attribute RowStatusType hlMatrixControlStatus;
    };


    /*
             A conceptual row in the nlMatrixSDTable.
             
             The hlMatrixControlIndex value in the index identifies the
             hlMatrixControlEntry on whose behalf this entry was created.
             The protocolDirLocalIndex value in the index identifies the
             network layer protocol of the nlMatrixSDSourceAddress and
             nlMatrixSDDestAddress.
             
             An example of the indexing of this table is
             nlMatrixSDPkts.1.783495.18.4.128.2.6.6.4.128.2.6.7
    */
    interface nlMatrixSDEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlMatrixControlIndex nlMatrixSDTimeMark protocolDirLocalIndex nlMatrixSDSourceAddress nlMatrixSDDestAddress";

        /*
             The number of packets without errors transmitted from the
             source address to the destination address since this entry was
             added to the nlMatrixSDTable.  Note that this is the number of
             link-layer packets, so if a single network-layer packet is
             fragmented into several link-layer frames, this counter is
             incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type nlMatrixSDPkts;

        /*
             The number of octets transmitted from the source address to
             the destination address since this entry was added to the
             nlMatrixSDTable (excluding framing bits but
             including FCS octets), excluding those octets in packets that
             contained errors.
             
             Note this doesn't count just those octets in the particular
             protocol frames, but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type nlMatrixSDOctets;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType nlMatrixSDCreateTime;
    };


    /*
             A conceptual row in the nlMatrixDSTable.
             
             The hlMatrixControlIndex value in the index identifies the
             hlMatrixControlEntry on whose behalf this entry was created.
             The protocolDirLocalIndex value in the index identifies the
             network layer protocol of the nlMatrixDSSourceAddress and
             nlMatrixDSDestAddress.
             
             An example of the indexing of this table is
             nlMatrixDSPkts.1.783495.18.4.128.2.6.7.4.128.2.6.6
    */
    interface nlMatrixDSEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlMatrixControlIndex nlMatrixDSTimeMark protocolDirLocalIndex nlMatrixDSDestAddress nlMatrixDSSourceAddress";

        /*
             The number of packets without errors transmitted from the
             source address to the destination address since this entry was
             added to the nlMatrixDSTable.  Note that this is the number of
             link-layer packets, so if a single network-layer packet is
             fragmented into several link-layer frames, this counter is
             incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type nlMatrixDSPkts;

        /*
             The number of octets transmitted from the source address
             to the destination address since this entry was added to the
             nlMatrixDSTable (excluding framing bits but
             including FCS octets), excluding those octets in packets that
             contained errors.
             
             Note this doesn't count just those octets in the particular
             protocol frames, but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type nlMatrixDSOctets;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType nlMatrixDSCreateTime;
    };


    /*
             A conceptual row in the nlMatrixTopNControlTable.
             
             An example of the indexing of this table is
             nlMatrixTopNControlDuration.3
    */
    interface nlMatrixTopNControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "nlMatrixTopNControlIndex";

        /*
             The nlMatrix[SD/DS] table for which a top N report will be
             prepared on behalf of this entry.  The nlMatrix[SD/DS] table
             is identified by the value of the hlMatrixControlIndex
             for that table - that value is used here to identify the
             particular table.
             
             This object may not be modified if the associated
             nlMatrixTopNControlStatus object is equal to active(1).
        */
        attribute NlMatrixTopNControlMatrixIndexType nlMatrixTopNControlMatrixIndex;

        /*
             The variable for each nlMatrix[SD/DS] entry that the
             nlMatrixTopNEntries are sorted by.
             This object may not be modified if the associated
             nlMatrixTopNControlStatus object is equal to active(1).
        */
        attribute NlMatrixTopNControlRateBaseType nlMatrixTopNControlRateBase;

        /*
             The number of seconds left in the report currently
             being collected.  When this object is modified by
             the management station, a new collection is started,
             possibly aborting a currently running report.  The
             new value is used as the requested duration of this
             report, and is immediately loaded into the associated
             nlMatrixTopNControlDuration object.
             When the report finishes, the probe will automatically
             start another collection with the same initial value
             of nlMatrixTopNControlTimeRemaining.  Thus the management
             station may simply read the resulting reports repeatedly,
             checking the startTime and duration each time to ensure that a
             report was not missed or that the report parameters were not
             changed.
             
             While the value of this object is non-zero, it decrements
             by one per second until it reaches zero.  At the time
             that this object decrements to zero, the report is made
             accessible in the nlMatrixTopNTable, overwriting any report
             that may be there.
             
             When this object is modified by the management station, any
             associated entries in the nlMatrixTopNTable shall be deleted.
             
             (Note that this is a different algorithm than the one used in
             the hostTopNTable).
        */
        attribute NlMatrixTopNControlTimeRemainingType nlMatrixTopNControlTimeRemaining;

        /*
             The number of reports that have been generated by this entry.
        */
        readonly attribute Counter32Type nlMatrixTopNControlGeneratedReports;

        /*
             The number of seconds that this report has collected
             during the last sampling interval.
             
             When the associated nlMatrixTopNControlTimeRemaining object is
             set, this object shall be set by the probe to the
             same value and shall not be modified until the next
             time the nlMatrixTopNControlTimeRemaining is set.
             This value shall be zero if no reports have been
             requested for this nlMatrixTopNControlEntry.
        */
        readonly attribute ASN1_Integer nlMatrixTopNControlDuration;

        /*
             The maximum number of matrix entries requested for this report.
             
             When this object is created or modified, the probe
             should set nlMatrixTopNControlGrantedSize as closely to this
             object as is possible for the particular probe
             implementation and available resources.
        */
        attribute NlMatrixTopNControlRequestedSizeType nlMatrixTopNControlRequestedSize;

        /*
             The maximum number of matrix entries in this report.
             
             When the associated nlMatrixTopNControlRequestedSize object is
             created or modified, the probe should set this
             object as closely to the requested value as is
             possible for the particular implementation and
             available resources. The probe must not lower this
             value except as a result of a set to the associated
             nlMatrixTopNControlRequestedSize object.
             
             If the value of nlMatrixTopNControlRateBase is equal to
             nlMatrixTopNPkts, when the next topN report is generated,
             matrix entries with the highest value of nlMatrixTopNPktRate
             shall be placed in this table in decreasing order of this rate
             until there is no more room or until there are no more
             matrix entries.
             
             If the value of nlMatrixTopNControlRateBase is equal to
             nlMatrixTopNOctets, when the next topN report is generated,
             matrix entries with the highest value of nlMatrixTopNOctetRate
             shall be placed in this table in decreasing order of this rate
             until there is no more room or until there are no more
             matrix entries.
             
             It is an implementation-specific matter how entries with the
             same value of nlMatrixTopNPktRate or nlMatrixTopNOctetRate are
             sorted.  It is also an implementation-specific matter as to
             whether or not zero-valued entries are available.
        */
        readonly attribute NlMatrixTopNControlGrantedSizeType nlMatrixTopNControlGrantedSize;

        /*
             The value of sysUpTime when this top N report was
             last started.  In other words, this is the time that
             the associated nlMatrixTopNControlTimeRemaining object was
             modified to start the requested report or the time
             the report was last automatically (re)started.
             
             This object may be used by the management station to
             determine if a report was missed or not.
        */
        readonly attribute TimeStampType nlMatrixTopNControlStartTime;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType nlMatrixTopNControlOwner;

        /*
             The status of this nlMatrixTopNControlEntry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             If this object is not equal to active(1), all
             associated entries in the nlMatrixTopNTable shall be deleted
             by the agent.
        */
        attribute RowStatusType nlMatrixTopNControlStatus;
    };


    /*
             A conceptual row in the nlMatrixTopNTable.
             
             The nlMatrixTopNControlIndex value in the index identifies the
             nlMatrixTopNControlEntry on whose behalf this entry was
             created.
             
             An example of the indexing of this table is
             nlMatrixTopNPktRate.3.10
    */
    interface nlMatrixTopNEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "nlMatrixTopNControlIndex nlMatrixTopNIndex";

        /*
             The protocolDirLocalIndex of the network layer protocol of
             this entry's network address.
        */
        readonly attribute NlMatrixTopNProtocolDirLocalIndexType nlMatrixTopNProtocolDirLocalIndex;

        /*
             The network layer address of the source host in this
             conversation.
             
             This is represented as an octet string with
             specific semantics and length as identified
             by the associated nlMatrixTopNProtocolDirLocalIndex.
             
             For example, if the protocolDirLocalIndex indicates an
             encapsulation of ip, this object is encoded as a length
             octet of 4, followed by the 4 octets of the ip address,
             in network byte order.
        */
        readonly attribute ASN1_OctetString nlMatrixTopNSourceAddress;

        /*
             The network layer address of the destination host in this
             conversation.
             
             This is represented as an octet string with
             specific semantics and length as identified
             by the associated nlMatrixTopNProtocolDirLocalIndex.
             
             For example, if the nlMatrixTopNProtocolDirLocalIndex
             indicates an encapsulation of ip, this object is encoded as a
             length octet of 4, followed by the 4 octets of the ip address,
             in network byte order.
        */
        readonly attribute ASN1_OctetString nlMatrixTopNDestAddress;

        /*
             The number of packets seen from the source host
             to the destination host during this sampling interval, counted
             using the rules for counting the nlMatrixSDPkts object.
             If the value of nlMatrixTopNControlRateBase is
             nlMatrixTopNPkts, this variable will be used to sort this
             report.
        */
        readonly attribute Gauge32Type nlMatrixTopNPktRate;

        /*
             The number of packets seen from the destination host to the
             source host during this sampling interval, counted
             using the rules for counting the nlMatrixSDPkts object (note
             that the corresponding nlMatrixSDPkts object selected is the
             one whose source address is equal to nlMatrixTopNDestAddress
             and whose destination address is equal to
             nlMatrixTopNSourceAddress.)
             
             Note that if the value of nlMatrixTopNControlRateBase is equal
             to nlMatrixTopNPkts, the sort of topN entries is based
             entirely on nlMatrixTopNPktRate, and not on the value of this
             object.
        */
        readonly attribute Gauge32Type nlMatrixTopNReversePktRate;

        /*
             The number of octets seen from the source host
             to the destination host during this sampling interval, counted
             using the rules for counting the nlMatrixSDOctets object.  If
             the value of nlMatrixTopNControlRateBase is
             nlMatrixTopNOctets, this variable will be used to sort this
             report.
        */
        readonly attribute Gauge32Type nlMatrixTopNOctetRate;

        /*
             The number of octets seen from the destination host to the
             source host during this sampling interval, counted
             using the rules for counting the nlMatrixDSOctets object (note
             that the corresponding nlMatrixSDOctets object selected is the
             one whose source address is equal to nlMatrixTopNDestAddress
             and whose destination address is equal to
             nlMatrixTopNSourceAddress.)
             
             Note that if the value of nlMatrixTopNControlRateBase is equal
             to nlMatrixTopNOctets, the sort of topN entries is based
             entirely on nlMatrixTopNOctetRate, and not on the value of
             this object.
        */
        readonly attribute Gauge32Type nlMatrixTopNReverseOctetRate;
    };

    interface alHost : SNMPMgmt::SmiEntry {

        /*
             A collection of statistics for a particular protocol from a
             particular network address that has been discovered on an
             interface of this device.
             
             The probe will populate this table for all protocols in the
             protocol directory table whose value of
             protocolDirHostConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirHostConfig value of supportedOff(2).
             
             The probe will add to this table all addresses
             seen as the source or destination address in all packets with
             no MAC errors, and will increment octet and packet counts in
             the table for all packets with no MAC errors.  Further,
             entries will only be added to this table if their address
             exists in the nlHostTable and will be deleted from this table
             if their address is deleted from the nlHostTable.
        */
        SNMPMgmt::SmiTableIterator get_alHostTable();
    };


    /*
             A conceptual row in the alHostTable.
             
             The hlHostControlIndex value in the index identifies the
             hlHostControlEntry on whose behalf this entry was created.
             The first protocolDirLocalIndex value in the index identifies
             the network layer protocol of the address.
             The nlHostAddress value in the index identifies the network
             layer address of this entry.
             The second protocolDirLocalIndex value in the index identifies
             the protocol that is counted by this entry.
             
             An example of the indexing in this entry is
             alHostOutPkts.1.783495.18.4.128.2.6.6.34
    */
    interface alHostEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlHostControlIndex alHostTimeMark protocolDirLocalIndex nlHostAddress protocolDirLocalIndex";

        /*
             The number of packets of this protocol type without errors
             transmitted to this address since it was added to the
             alHostTable.  Note that this is the number of link-layer
             packets, so if a single network-layer packet is fragmented
             into several link-layer frames, this counter is incremented
             several times.
        */
        readonly attribute ZeroBasedCounter32Type alHostInPkts;

        /*
             The number of packets of this protocol type without errors
             transmitted by this address since it was added to the
             alHostTable.  Note that this is the number of link-layer
             packets, so if a single network-layer packet is fragmented
             into several link-layer frames, this counter is incremented
             several times.
        */
        readonly attribute ZeroBasedCounter32Type alHostOutPkts;

        /*
             The number of octets transmitted to this address
             of this protocol type since it was added to the
             alHostTable (excluding framing bits but including
             FCS octets), excluding those octets in packets that
             contained errors.
             
             Note this doesn't count just those octets in the particular
             protocol frames, but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type alHostInOctets;

        /*
             The number of octets transmitted by this address
             of this protocol type since it was added to the
             alHostTable (excluding framing bits but including
             FCS octets), excluding those octets in packets that
             contained errors.
             
             Note this doesn't count just those octets in the particular
             protocol frames, but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type alHostOutOctets;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType alHostCreateTime;
    };

    interface alMatrix : SNMPMgmt::SmiEntry {

        /*
             A list of application traffic matrix entries which collect
             statistics for conversations of a particular protocol between
             two network-level addresses.  This table is indexed first by
             the source address and then by the destination address to make
             it convenient to collect all statistics from a particular
             address.
             
             The probe will populate this table for all protocols in the
             protocol directory table whose value of
             protocolDirMatrixConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirMatrixConfig value of supportedOff(2).
             
             The probe will add to this table all pairs of addresses for
             all protocols seen in all packets with no MAC errors, and will
             increment octet and packet counts in the table for all packets
             with no MAC errors.  Further, entries will only be added to
             this table if their address pair exists in the nlMatrixSDTable
             and will be deleted from this table if the address pair is
             deleted from the nlMatrixSDTable.
        */
        SNMPMgmt::SmiTableIterator get_alMatrixSDTable();

        /*
             A list of application traffic matrix entries which collect
             statistics for conversations of a particular protocol between
             two network-level addresses.  This table is indexed first by
             the destination address and then by the source address to make
             it convenient to collect all statistics to a particular
             address.
             
             The probe will populate this table for all protocols in the
             protocol directory table whose value of
             protocolDirMatrixConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirMatrixConfig value of supportedOff(2).
             
             The probe will add to this table all pairs of addresses for
             all protocols seen in all packets with no MAC errors, and will
             increment octet and packet counts in the table for all packets
             with no MAC errors.  Further, entries will only be added to
             this table if their address pair exists in the nlMatrixDSTable
             and will be deleted from this table if the address pair is
             deleted from the nlMatrixDSTable.
        */
        SNMPMgmt::SmiTableIterator get_alMatrixDSTable();

        /*
             A set of parameters that control the creation of a
             report of the top N matrix entries according to
             a selected metric.
        */
        SNMPMgmt::SmiTableIterator get_alMatrixTopNControlTable();

        /*
             A set of statistics for those application layer matrix
             entries that have counted the highest number of octets or
             packets.
        */
        SNMPMgmt::SmiTableIterator get_alMatrixTopNTable();
    };


    /*
             A conceptual row in the alMatrixSDTable.
             
             The hlMatrixControlIndex value in the index identifies the
             hlMatrixControlEntry on whose behalf this entry was created.
             The first protocolDirLocalIndex value in the index identifies
             the network layer protocol of the nlMatrixSDSourceAddress and
             nlMatrixSDDestAddress.
             The nlMatrixSDSourceAddress value in the index identifies the
             network layer address of the source host in this conversation.
             The nlMatrixSDDestAddress value in the index identifies the
             network layer address of the destination host in this
             conversation.
             The second protocolDirLocalIndex value in the index identifies
             the protocol that is counted by this entry.
             
             An example of the indexing of this entry is
             alMatrixSDPkts.1.783495.18.4.128.2.6.6.4.128.2.6.7.34
    */
    interface alMatrixSDEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlMatrixControlIndex alMatrixSDTimeMark protocolDirLocalIndex nlMatrixSDSourceAddress nlMatrixSDDestAddress protocolDirLocalIndex";

        /*
             The number of packets of this protocol type without errors
             transmitted from the source address to the destination address
             since this entry was added to the alMatrixSDTable.  Note that
             this is the number of link-layer packets, so if a single
             network-layer packet is fragmented into several link-layer
             frames, this counter is incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type alMatrixSDPkts;

        /*
             The number of octets in packets of this protocol type
             transmitted from the source address to the destination address
             since this entry was added to the alMatrixSDTable (excluding
             framing bits but including FCS octets), excluding those octets
             in packets that contained errors.
             
             Note this doesn't count just those octets in the particular
             protocol frames, but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type alMatrixSDOctets;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType alMatrixSDCreateTime;
    };


    /*
             A conceptual row in the alMatrixDSTable.
             
             The hlMatrixControlIndex value in the index identifies the
             hlMatrixControlEntry on whose behalf this entry was created.
             The first protocolDirLocalIndex value in the index identifies
             the network layer protocol of the alMatrixDSSourceAddress and
             alMatrixDSDestAddress.
             The nlMatrixDSDestAddress value in the index identifies the
             network layer address of the destination host in this
             conversation.
             The nlMatrixDSSourceAddress value in the index identifies the
             network layer address of the source host in this conversation.
             The second protocolDirLocalIndex value in the index identifies
             the protocol that is counted by this entry.
             
             An example of the indexing of this entry is
             alMatrixDSPkts.1.783495.18.4.128.2.6.7.4.128.2.6.6.34
    */
    interface alMatrixDSEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlMatrixControlIndex alMatrixDSTimeMark protocolDirLocalIndex nlMatrixDSDestAddress nlMatrixDSSourceAddress protocolDirLocalIndex";

        /*
             The number of packets of this protocol type without errors
             transmitted from the source address to the destination address
             since this entry was added to the alMatrixDSTable.  Note that
             this is the number of link-layer packets, so if a single
             network-layer packet is fragmented into several link-layer
             frames, this counter is incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type alMatrixDSPkts;

        /*
             The number of octets in packets of this protocol type
             transmitted from the source address to the destination address
             since this entry was added to the alMatrixDSTable (excluding
             framing bits but including FCS octets), excluding those octets
             in packets that contained errors.
             
             Note this doesn't count just those octets in the particular
             protocol frames, but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type alMatrixDSOctets;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType alMatrixDSCreateTime;
    };


    /*
             A conceptual row in the alMatrixTopNControlTable.
             
             An example of the indexing of this table is
             alMatrixTopNControlDuration.3
    */
    interface alMatrixTopNControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "alMatrixTopNControlIndex";

        /*
             The alMatrix[SD/DS] table for which a top N report will be
             prepared on behalf of this entry.  The alMatrix[SD/DS] table
             is identified by the value of the hlMatrixControlIndex
             for that table - that value is used here to identify the
             particular table.
             
             This object may not be modified if the associated
             alMatrixTopNControlStatus object is equal to active(1).
        */
        attribute AlMatrixTopNControlMatrixIndexType alMatrixTopNControlMatrixIndex;

        /*
             The variable for each alMatrix[SD/DS] entry that the
             alMatrixTopNEntries are sorted by, as well as the
             selector of the view of the matrix table that will be
             used.
             
             The values alMatrixTopNTerminalsPkts and
             alMatrixTopNTerminalsOctets cause collection only from
             protocols that have no child protocols that are counted.  The
             values alMatrixTopNAllPkts and alMatrixTopNAllOctets cause
             collection from all alMatrix entries.
             
             This object may not be modified if the associated
             alMatrixTopNControlStatus object is equal to active(1).
        */
        attribute AlMatrixTopNControlRateBaseType alMatrixTopNControlRateBase;

        /*
             The number of seconds left in the report currently
             being collected.  When this object is modified by
             the management station, a new collection is started,
             possibly aborting a currently running report.  The
             new value is used as the requested duration of this
             report, and is immediately loaded into the associated
             alMatrixTopNControlDuration object.
             When the report finishes, the probe will automatically
             start another collection with the same initial value
             of alMatrixTopNControlTimeRemaining.  Thus the management
             station may simply read the resulting reports repeatedly,
             checking the startTime and duration each time to ensure that a
             report was not missed or that the report parameters were not
             changed.
             
             While the value of this object is non-zero, it decrements
             by one per second until it reaches zero.  At the time
             that this object decrements to zero, the report is made
             accessible in the alMatrixTopNTable, overwriting any report
             that may be there.
             
             When this object is modified by the management station, any
             associated entries in the alMatrixTopNTable shall be deleted.
             
             (Note that this is a different algorithm than the one used in
             the hostTopNTable).
        */
        attribute AlMatrixTopNControlTimeRemainingType alMatrixTopNControlTimeRemaining;

        /*
             The number of reports that have been generated by this entry.
        */
        readonly attribute Counter32Type alMatrixTopNControlGeneratedReports;

        /*
             The number of seconds that this report has collected
             during the last sampling interval.
             
             When the associated alMatrixTopNControlTimeRemaining object
             is set, this object shall be set by the probe to the
             same value and shall not be modified until the next
             time the alMatrixTopNControlTimeRemaining is set.
             
             This value shall be zero if no reports have been
             requested for this alMatrixTopNControlEntry.
        */
        readonly attribute ASN1_Integer alMatrixTopNControlDuration;

        /*
             The maximum number of matrix entries requested for this report.
             
             When this object is created or modified, the probe
             should set alMatrixTopNControlGrantedSize as closely to this
             object as is possible for the particular probe
             implementation and available resources.
        */
        attribute AlMatrixTopNControlRequestedSizeType alMatrixTopNControlRequestedSize;

        /*
             The maximum number of matrix entries in this report.
             
             When the associated alMatrixTopNControlRequestedSize object
             is created or modified, the probe should set this
             object as closely to the requested value as is
             possible for the particular implementation and
             available resources. The probe must not lower this
             value except as a result of a set to the associated
             alMatrixTopNControlRequestedSize object.
             
             If the value of alMatrixTopNControlRateBase is equal to
             alMatrixTopNTerminalsPkts or alMatrixTopNAllPkts, when the
             next topN report is generated, matrix entries with the highest
             value of alMatrixTopNPktRate shall be placed in this table in
             decreasing order of this rate until there is no more room or
             until there are no more matrix entries.
             
             If the value of alMatrixTopNControlRateBase is equal to
             alMatrixTopNTerminalsOctets or alMatrixTopNAllOctets, when the
             next topN report is generated, matrix entries with the highest
             value of alMatrixTopNOctetRate shall be placed in this table
             in decreasing order of this rate until there is no more room
             or until there are no more matrix entries.
             
             It is an implementation-specific matter how entries with the
             same value of alMatrixTopNPktRate or alMatrixTopNOctetRate are
             sorted.  It is also an implementation-specific matter as to
             whether or not zero-valued entries are available.
        */
        readonly attribute AlMatrixTopNControlGrantedSizeType alMatrixTopNControlGrantedSize;

        /*
             The value of sysUpTime when this top N report was
             last started.  In other words, this is the time that
             the associated alMatrixTopNControlTimeRemaining object
             was modified to start the requested report or the time
             the report was last automatically (re)started.
             
             This object may be used by the management station to
             determine if a report was missed or not.
        */
        readonly attribute TimeStampType alMatrixTopNControlStartTime;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType alMatrixTopNControlOwner;

        /*
             The status of this alMatrixTopNControlEntry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all
             associated entries in the alMatrixTopNTable shall be
             deleted by the agent.
        */
        attribute RowStatusType alMatrixTopNControlStatus;
    };


    /*
             A conceptual row in the alMatrixTopNTable.
             
             The alMatrixTopNControlIndex value in the index identifies
             the alMatrixTopNControlEntry on whose behalf this entry was
             created.
             
             An example of the indexing of this table is
             alMatrixTopNPktRate.3.10
    */
    interface alMatrixTopNEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "alMatrixTopNControlIndex alMatrixTopNIndex";

        /*
             The protocolDirLocalIndex of the network layer protocol of
             this entry's network address.
        */
        readonly attribute AlMatrixTopNProtocolDirLocalIndexType alMatrixTopNProtocolDirLocalIndex;

        /*
             The network layer address of the source host in this
             conversation.
             This is represented as an octet string with
             specific semantics and length as identified
             by the associated alMatrixTopNProtocolDirLocalIndex.
             
             For example, if the alMatrixTopNProtocolDirLocalIndex
             indicates an encapsulation of ip, this object is encoded as a
             length octet of 4, followed by the 4 octets of the ip address,
             in network byte order.
        */
        readonly attribute ASN1_OctetString alMatrixTopNSourceAddress;

        /*
             The network layer address of the destination host in this
             conversation.
             
             This is represented as an octet string with
             specific semantics and length as identified
             by the associated alMatrixTopNProtocolDirLocalIndex.
             
             For example, if the alMatrixTopNProtocolDirLocalIndex
             indicates an encapsulation of ip, this object is encoded as a
             length octet of 4, followed by the 4 octets of the ip address,
             in network byte order.
        */
        readonly attribute ASN1_OctetString alMatrixTopNDestAddress;

        /*
             The type of the protocol counted by this matrix entry.
        */
        readonly attribute AlMatrixTopNAppProtocolDirLocalIndexType alMatrixTopNAppProtocolDirLocalIndex;

        /*
             The number of packets seen of this protocol from the source
             host to the destination host during this sampling interval,
             counted using the rules for counting the alMatrixSDPkts
             object.
             
             If the value of alMatrixTopNControlRateBase is
             alMatrixTopNTerminalsPkts or alMatrixTopNAllPkts, this
             variable will be used to sort this report.
        */
        readonly attribute Gauge32Type alMatrixTopNPktRate;

        /*
             The number of packets seen of this protocol from the
             destination host to the source host during this sampling
             interval, counted using the rules for counting the
             alMatrixDSPkts object  (note that the corresponding
             alMatrixSDPkts object selected is the one whose source address
             is equal to alMatrixTopNDestAddress and whose destination
             address is equal to alMatrixTopNSourceAddress.)
             
             Note that if the value of alMatrixTopNControlRateBase is equal
             to alMatrixTopNTerminalsPkts or alMatrixTopNAllPkts, the sort
             of topN entries is based entirely on alMatrixTopNPktRate, and
             not on the value of this object.
        */
        readonly attribute Gauge32Type alMatrixTopNReversePktRate;

        /*
             The number of octets seen of this protocol from the source
             host to the destination host during this sampling interval,
             counted using the rules for counting the alMatrixSDOctets
             object.
             
             If the value of alMatrixTopNControlRateBase is
             alMatrixTopNTerminalsOctets or alMatrixTopNAllOctets, this
             variable will be used to sort this report.
        */
        readonly attribute Gauge32Type alMatrixTopNOctetRate;

        /*
             The number of octets seen of this protocol from the
             destination host to the source host during this sampling
             interval, counted using the rules for counting the
             alMatrixDSOctets object  (note that the corresponding
             alMatrixSDOctets object selected is the one whose source
             address is equal to alMatrixTopNDestAddress and whose
             destination address is equal to alMatrixTopNSourceAddress.)
             
             Note that if the value of alMatrixTopNControlRateBase is equal
             to alMatrixTopNTerminalsOctets or alMatrixTopNAllOctets, the
             sort of topN entries is based entirely on
             alMatrixTopNOctetRate, and not on the value of this object.
        */
        readonly attribute Gauge32Type alMatrixTopNReverseOctetRate;
    };

    interface usrHistory : SNMPMgmt::SmiEntry {

        /*
             A list of data-collection configuration entries.
        */
        SNMPMgmt::SmiTableIterator get_usrHistoryControlTable();

        /*
             A list of data-collection configuration entries.
        */
        SNMPMgmt::SmiTableIterator get_usrHistoryObjectTable();

        /*
             A list of user defined history entries.
        */
        SNMPMgmt::SmiTableIterator get_usrHistoryTable();
    };


    /*
             A list of parameters that set up a group of user-defined
             MIB objects to be sampled periodically (called a
             bucket-group).
             
             For example, an instance of usrHistoryControlInterval
             might be named usrHistoryControlInterval.1
    */
    interface usrHistoryControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "usrHistoryControlIndex";

        /*
             The number of MIB objects to be collected
             in the portion of usrHistoryTable associated with this
             usrHistoryControlEntry.
             
             This object may not be modified if the associated instance
             of usrHistoryControlStatus is equal to active(1).
        */
        attribute UsrHistoryControlObjectsType usrHistoryControlObjects;

        /*
             The requested number of discrete time intervals
             over which data is to be saved in the part of the
             usrHistoryTable associated with this usrHistoryControlEntry.
             
             When this object is created or modified, the probe
             should set usrHistoryControlBucketsGranted as closely to
             this object as is possible for the particular probe
             implementation and available resources.
        */
        attribute UsrHistoryControlBucketsRequestedType usrHistoryControlBucketsRequested;

        /*
             The number of discrete sampling intervals
             over which data shall be saved in the part of
             the usrHistoryTable associated with this
             usrHistoryControlEntry.
             
             When the associated usrHistoryControlBucketsRequested
             object is created or modified, the probe should set
             this object as closely to the requested value as is
             possible for the particular  probe implementation and
             available resources.  The probe must not lower this
             value except as a result of a modification to the associated
             usrHistoryControlBucketsRequested object.
             
             The associated usrHistoryControlBucketsRequested object
             should be set before or at the same time as this object
             to allow the probe to accurately estimate the resources
             required for this usrHistoryControlEntry.
             
             There will be times when the actual number of buckets
             associated with this entry is less than the value of
             this object.  In this case, at the end of each sampling
             interval, a new bucket will be added to the usrHistoryTable.
             
             When the number of buckets reaches the value of this object
             and a new bucket is to be added to the usrHistoryTable,
             the oldest bucket associated with this usrHistoryControlEntry
             shall be deleted by the agent so that the new bucket can be
             added.
             
             When the value of this object changes to a value less than
             the current value, entries are deleted from the
             usrHistoryTable associated with this usrHistoryControlEntry.
             Enough of the oldest of these entries shall be deleted by the
             agent so that their number remains less than or equal to the
             new value of this object.
             
             When the value of this object changes to a value greater
             than the current value, the number of associated usrHistory
             entries may be allowed to grow.
        */
        readonly attribute UsrHistoryControlBucketsGrantedType usrHistoryControlBucketsGranted;

        /*
             The interval in seconds over which the data is
             sampled for each bucket in the part of the usrHistory
             table associated with this usrHistoryControlEntry.
             
             Because the counters in a bucket may overflow at their
             maximum value with no indication, a prudent manager will
             take into account the possibility of overflow in any of
             the associated counters. It is important to consider the
             minimum time in which any counter could overflow on a
             particular media type and set the usrHistoryControlInterval
             object to a value less than this interval.
             
             This object may not be modified if the associated
             usrHistoryControlStatus object is equal to active(1).
        */
        attribute UsrHistoryControlIntervalType usrHistoryControlInterval;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType usrHistoryControlOwner;

        /*
             The status of this variable history control entry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all associated
             entries in the usrHistoryTable shall be deleted.
        */
        attribute RowStatusType usrHistoryControlStatus;
    };


    /*
             A list of MIB instances to be sampled periodically.
             
             Entries in this table are created when an associated
             usrHistoryControlObjects object is created.
             
             The usrHistoryControlIndex value in the index is
             that of the associated usrHistoryControlEntry.
             
             For example, an instance of usrHistoryObjectVariable might be
             usrHistoryObjectVariable.1.3
    */
    interface usrHistoryObjectEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "usrHistoryControlIndex usrHistoryObjectIndex";

        /*
             The object identifier of the particular variable to be
             sampled.
             
             Only variables that resolve to an ASN.1 primitive type of
             Integer32 (Integer32, Counter, Gauge, or TimeTicks) may be
             sampled.
             
             Because SNMP access control is articulated entirely in terms
             of the contents of MIB views, no access control mechanism
             exists that can restrict the value of this object to identify
             only those objects that exist in a particular MIB view.
             Because there is thus no acceptable means of restricting the
             read access that could be obtained through the user history
             mechanism, the probe must only grant write access to this
             object in those views that have read access to all objects on
             the probe.
             
             During a set operation, if the supplied variable name is not
             available in the selected MIB view, a badValue error must be
             returned.
             
             This object may not be modified if the associated
             usrHistoryControlStatus object is equal to active(1).
        */
        attribute ASN1_ObjectIdentifier usrHistoryObjectVariable;

        /*
             The method of sampling the selected variable for storage in
             the usrHistoryTable.
             
             If the value of this object is absoluteValue(1), the value of
             the selected variable will be copied directly into the history
             bucket.
             
             If the value of this object is deltaValue(2), the value of the
             selected variable at the last sample will be subtracted from
             the current value, and the difference will be stored in the
             history bucket. If the associated usrHistoryObjectVariable
             instance could not be obtained at the previous sample
             interval, then a delta sample is not possible, and the value
             of the associated usrHistoryValStatus object for this interval
             will be valueNotAvailable(1).
             
             This object may not be modified if the associated
             usrHistoryControlStatus object is equal to active(1).
        */
        attribute UsrHistoryObjectSampleTypeType usrHistoryObjectSampleType;
    };


    /*
             A historical sample of user-defined variables.  This sample
             is associated with the usrHistoryControlEntry which set up the
             parameters for a regular collection of these samples.
             
             The usrHistoryControlIndex value in the index identifies the
             usrHistoryControlEntry on whose behalf this entry was created.
             
             The usrHistoryObjectIndex value in the index identifies the
             usrHistoryObjectEntry on whose behalf this entry was created.
             
             For example, an instance of usrHistoryAbsValue, which represents
             the 14th sample of a variable collected as specified by
             usrHistoryControlEntry.1 and usrHistoryObjectEntry.1.5,
             would be named usrHistoryAbsValue.1.14.5
    */
    interface usrHistoryEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "usrHistoryControlIndex usrHistorySampleIndex usrHistoryObjectIndex";

        /*
             The value of sysUpTime at the start of the interval over
             which this sample was measured.  If the probe keeps track of
             the time of day, it should start the first sample of the
             history at a time such that when the next hour of the day
             begins, a sample is started at that instant.
             
             Note that following this rule may require the probe to delay
             collecting the first sample of the history, as each sample
             must be of the same interval. Also note that the sample which
             is currently being collected is not accessible in this table
             until the end of its interval.
        */
        readonly attribute TimeStampType usrHistoryIntervalStart;

        /*
             The value of sysUpTime at the end of the interval over which
             this sample was measured.
        */
        readonly attribute TimeStampType usrHistoryIntervalEnd;

        /*
             The absolute value (i.e. unsigned value) of the
             user-specified statistic during the last sampling period. The
             value during the current sampling period is not made available
             until the period is completed.
             
             To obtain the true value for this sampling interval, the
             associated instance of usrHistoryValStatus must be checked,
             and usrHistoryAbsValue adjusted as necessary.
             
             If the MIB instance could not be accessed during the sampling
             interval, then this object will have a value of zero and the
             associated instance of usrHistoryValStatus will be set to
             'valueNotAvailable(1)'.
        */
        readonly attribute Gauge32Type usrHistoryAbsValue;

        /*
             This object indicates the validity and sign of the data in
             the associated instance of usrHistoryAbsValue.
             
             If the MIB instance could not be accessed during the sampling
             interval, then 'valueNotAvailable(1)' will be returned.
             
             If the sample is valid and actual value of the sample is
             greater than or equal to zero then 'valuePositive(2)' is
             returned.
             
             If the sample is valid and the actual value of the sample is
             less than zero, 'valueNegative(3)' will be returned. The
             associated instance of usrHistoryAbsValue should be multiplied
             by -1 to obtain the true sample value.
        */
        readonly attribute UsrHistoryValStatusType usrHistoryValStatus;
    };

    interface probeConfig : SNMPMgmt::SmiEntry {

        /*
             An indication of the RMON MIB groups supported
             on at least one interface by this probe.
        */
        readonly attribute ProbeCapabilitiesType probeCapabilities;

        /*
             The software revision of this device.  This string will have
             a zero length if the revision is unknown.
        */
        readonly attribute ProbeSoftwareRevType probeSoftwareRev;

        /*
             The hardware revision of this device.  This string will have
             a zero length if the revision is unknown.
        */
        readonly attribute ProbeHardwareRevType probeHardwareRev;

        /*
             Probe's current date and time.
             
             field  octets  contents                  range
             -----  ------  --------                  -----
               1      1-2   year                      0..65536
               2       3    month                     1..12
               3       4    day                       1..31
               4       5    hour                      0..23
               5       6    minutes                   0..59
               6       7    seconds                   0..60
                             (use 60 for leap-second)
               7       8    deci-seconds              0..9
               8       9    direction from UTC        '+' / '-'
               9      10    hours from UTC            0..11
              10      11    minutes from UTC          0..59
             
             For example, Tuesday May 26, 1992 at 1:30:15 PM
             EDT would be displayed as:
             
                         1992-5-26,13:30:15.0,-4:0
             
             Note that if only local time is known, then
             timezone information (fields 8-10) is not
             present, and if no time information is known, the null
             string is returned.
        */
        attribute ProbeDateTimeType probeDateTime;

        /*
             Setting this object to warmBoot(2) causes the device to
             restart the application software with current configuration
             parameters saved in non-volatile memory.  Setting this
             object to coldBoot(3) causes the device to reinitialize
             configuration parameters in non-volatile memory to default
             values and restart the application software.  When the device
             is running normally, this variable has a value of
             running(1).
        */
        attribute ProbeResetControlType probeResetControl;

        /*
             The file name to be downloaded from the TFTP server when a
             download is next requested via this MIB.  This value is set to
             the zero length string when no file name has been specified.
        */
        attribute ProbeDownloadFileType probeDownloadFile;

        /*
             The IP address of the TFTP server that contains the boot
             image to load when a download is next requested via this MIB.
             This value is set to `0.0.0.0' when no IP address has been
             specified.
        */
        attribute IpAddressType probeDownloadTFTPServer;

        /*
             When this object is set to downloadToRAM(2) or
             downloadToPROM(3), the device will discontinue its
             normal operation and begin download of the image specified
             by probeDownloadFile from the server specified by
             probeDownloadTFTPServer using the TFTP protocol.  If
             downloadToRAM(2) is specified, the new image is copied
             to RAM only (the old image remains unaltered in the flash
             EPROM).  If downloadToPROM(3) is specified
             the new image is written to the flash EPROM
             memory after its checksum has been verified to be correct.
             When the download process is completed, the device will
             warm boot to restart the newly loaded application.
             When the device is not downloading, this object will have
             a value of notDownloading(1).
        */
        attribute ProbeDownloadActionType probeDownloadAction;

        /*
             The status of the last download procedure, if any.  This
             object will have a value of downloadStatusUnknown(2) if no
             download process has been performed.
        */
        readonly attribute ProbeDownloadStatusType probeDownloadStatus;

        /*
             A table of serial interface configuration entries.  This data
             will be stored in non-volatile memory and preserved across
             probe resets or power loss.
        */
        SNMPMgmt::SmiTableIterator get_serialConfigTable();

        /*
             A table of netConfigEntries.
        */
        SNMPMgmt::SmiTableIterator get_netConfigTable();

        /*
             The IP Address of the default gateway.  If this value is
             undefined or unknown, it shall have the value 0.0.0.0.
        */
        attribute IpAddressType netDefaultGateway;

        /*
             A list of trap destination entries.
        */
        SNMPMgmt::SmiTableIterator get_trapDestTable();

        /*
             A list of serialConnectionEntries.
        */
        SNMPMgmt::SmiTableIterator get_serialConnectionTable();
    };


    /*
             A set of configuration parameters for a particular
             serial interface on this device. If the device has no serial
             interfaces, this table is empty.
             
             The index is composed of the ifIndex assigned to this serial
             line interface.
    */
    interface serialConfigEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "ifIndex";

        /*
             The type of incoming connection to expect on this serial
             interface.
        */
        attribute SerialModeType serialMode;

        /*
             The type of data link encapsulation to be used on this
             serial interface.
        */
        attribute SerialProtocolType serialProtocol;

        /*
             This timeout value is used when the Management Station has
             initiated the conversation over the serial link. This variable
             represents the number of seconds of inactivity allowed before
             terminating the connection on this serial interface. Use the
             serialDialoutTimeout in the case where the probe has initiated
             the connection for the purpose of sending a trap.
        */
        attribute SerialTimeoutType serialTimeout;

        /*
             A control string which controls how a modem attached to this
             serial interface should be initialized.  The initialization
             is performed once during startup and again after each
             connection is terminated if the associated serialMode has the
             value of modem(2).
             
             A control string that is appropriate for a wide variety of
             modems is: '^s^MATE0Q0V1X4 S0=1 S2=43^M'.
        */
        attribute SerialModemInitStringType serialModemInitString;

        /*
             A control string which specifies how to disconnect a modem
             connection on this serial interface.  This object is only
             meaningful if the associated serialMode has the value
             of modem(2).
             A control string that is appropriate for a wide variety of
             modems is: '^d2^s+++^d2^sATH0^M^d2'.
        */
        attribute SerialModemHangUpStringType serialModemHangUpString;

        /*
             An ASCII string containing substrings that describe the
             expected modem connection response code and associated bps
             rate.  The substrings are delimited by the first character
             in the string, for example:
                /CONNECT/300/CONNECT 1200/1200/CONNECT 2400/2400/
                CONNECT 4800/4800/CONNECT 9600/9600
             will be interpreted as:
                 response code    bps rate
                 CONNECT            300
                 CONNECT 1200      1200
                 CONNECT 2400      2400
                 CONNECT 4800      4800
                 CONNECT 9600      9600
             The agent will use the information in this string to adjust
             the bps rate of this serial interface once a modem connection
             is established.
             
             A value that is appropriate for a wide variety of modems is:
             '/CONNECT/300/CONNECT 1200/1200/CONNECT 2400/2400/
              CONNECT 4800/4800/CONNECT 9600/9600/CONNECT 14400/14400/
             CONNECT 19200/19200/CONNECT 38400/38400/'.
        */
        attribute SerialModemConnectRespType serialModemConnectResp;

        /*
             An ASCII string containing response codes that may be
             generated by a modem to report the reason why a connection
             attempt has failed.  The response codes are delimited by
             the first character in the string, for example:
                /NO CARRIER/BUSY/NO DIALTONE/NO ANSWER/ERROR/
             If one of these response codes is received via this serial
             interface while attempting to make a modem connection,
             the agent will issue the hang up command as specified by
             serialModemHangUpString.
             
             A value that is appropriate for a wide variety of modems is:
             '/NO CARRIER/BUSY/NO DIALTONE/NO ANSWER/ERROR/'.
        */
        attribute SerialModemNoConnectRespType serialModemNoConnectResp;

        /*
             This timeout value is used when the probe initiates the
             serial connection with the intention of contacting a
             management station. This variable represents the number
             of seconds of inactivity allowed before terminating the
             connection on this serial interface.
        */
        attribute SerialDialoutTimeoutType serialDialoutTimeout;

        /*
             The status of this serialConfigEntry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
        */
        attribute RowStatusType serialStatus;
    };


    /*
             A set of configuration parameters for a particular
             network interface on this device. If the device has no network
             interface, this table is empty.
             
             The index is composed of the ifIndex assigned to the
             corresponding interface.
    */
    interface netConfigEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "ifIndex";

        /*
             The IP address of this Net interface.  The default value
             for this object is 0.0.0.0.  If either the netConfigIPAddress
             or netConfigSubnetMask are 0.0.0.0, then when the device
             boots, it may use BOOTP to try to figure out what these
             values should be. If BOOTP fails, before the device
             can talk on the network, this value must be configured
             (e.g., through a terminal attached to the device). If BOOTP is
             used, care should be taken to not send BOOTP broadcasts too
             frequently and to eventually send very infrequently if no
             replies are received.
        */
        attribute IpAddressType netConfigIPAddress;

        /*
             The subnet mask of this Net interface.  The default value
             for this object is 0.0.0.0.  If either the netConfigIPAddress
             or netConfigSubnetMask are 0.0.0.0, then when the device
             boots, it may use BOOTP to try to figure out what these
             values should be. If BOOTP fails, before the device
             can talk on the network, this value must be configured
             (e.g., through a terminal attached to the device). If BOOTP is
             used, care should be taken to not send BOOTP broadcasts too
             frequently and to eventually send very infrequently if no
             replies are received.
        */
        attribute IpAddressType netConfigSubnetMask;

        /*
             The status of this netConfigEntry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
        */
        attribute RowStatusType netConfigStatus;
    };


    /*
             This entry includes a destination IP address to which to send
             traps for this community.
    */
    interface trapDestEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "trapDestIndex";

        /*
             A community to which this destination address belongs.
             This entry is associated with any eventEntries in the RMON
             MIB whose value of eventCommunity is equal to the value of
             this object.  Every time an associated event entry sends a
             trap due to an event, that trap will be sent to each
             address in the trapDestTable with a trapDestCommunity equal to
             eventCommunity.
             
             This object may not be modified if the associated
             trapDestStatus object is equal to active(1).
        */
        attribute TrapDestCommunityType trapDestCommunity;

        /*
             The protocol with which to send this trap.
        */
        attribute TrapDestProtocolType trapDestProtocol;

        /*
             The address to send traps on behalf of this entry.
             
             If the associated trapDestProtocol object is equal to ip(1),
             the encoding of this object is the same as the snmpUDPAddress
             textual convention in [RFC1906]:
               -- for a SnmpUDPAddress of length 6:
               --
               -- octets   contents        encoding
               --  1-4     IP-address      network-byte order
               --  5-6     UDP-port        network-byte order
             
             If the associated trapDestProtocol object is equal to ipx(2),
             the encoding of this object is the same as the snmpIPXAddress
             textual convention in [RFC1906]:
               -- for a SnmpIPXAddress of length 12:
               --
               -- octets   contents            encoding
               --  1-4     network-number      network-byte order
               --  5-10    physical-address    network-byte order
               -- 11-12    socket-number       network-byte order
             
             This object may not be modified if the associated
             trapDestStatus object is equal to active(1).
        */
        attribute ASN1_OctetString trapDestAddress;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType trapDestOwner;

        /*
             The status of this trap destination entry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
        */
        attribute RowStatusType trapDestStatus;
    };


    /*
             Configuration for a SLIP link over a serial line.
    */
    interface serialConnectionEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "serialConnectIndex";

        /*
             The IP Address that can be reached at the other end of this
             serial connection.
             This object may not be modified if the associated
             serialConnectStatus object is equal to active(1).
        */
        attribute IpAddressType serialConnectDestIpAddress;

        /*
             The type of outgoing connection to make.  If this object
             has the value direct(1), then a direct serial connection
             is assumed.  If this object has the value modem(2),
             then serialConnectDialString will be used to make a modem
             connection.  If this object has the value switch(3),
             then serialConnectSwitchConnectSeq will be used to establish
             the connection over a serial data switch, and
             serialConnectSwitchDisconnectSeq will be used to terminate
             the connection.  If this object has the value
             modem-switch(4), then a modem connection will be made first
             followed by the switch connection.
             
             This object may not be modified if the associated
             serialConnectStatus object is equal to active(1).
        */
        attribute SerialConnectTypeType serialConnectType;

        /*
             A control string which specifies how to dial the phone
             number in order to establish a modem connection.  The
             string should include dialing prefix and suffix.  For
             example: ``^s^MATD9,888-1234^M'' will instruct the Probe
             to send a carriage return followed by the dialing prefix
             ``ATD'', the phone number ``9,888-1234'', and a carriage
             return as the dialing suffix.
             This object may not be modified if the associated
             serialConnectStatus object is equal to active(1).
        */
        attribute SerialConnectDialStringType serialConnectDialString;

        /*
             A control string which specifies how to establish a
             data switch connection.
             This object may not be modified if the associated
             serialConnectStatus object is equal to active(1).
        */
        attribute SerialConnectSwitchConnectSeqType serialConnectSwitchConnectSeq;

        /*
             A control string which specifies how to terminate a
             data switch connection.
             This object may not be modified if the associated
             serialConnectStatus object is equal to active(1).
        */
        attribute SerialConnectSwitchDisconnectSeqType serialConnectSwitchDisconnectSeq;

        /*
             A control string which specifies how to reset a data
             switch in the event of a timeout.
             This object may not be modified if the associated
             serialConnectStatus object is equal to active(1).
        */
        attribute SerialConnectSwitchResetSeqType serialConnectSwitchResetSeq;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType serialConnectOwner;

        /*
             The status of this serialConnectionEntry.
             
             If the manager attempts to set this object to active(1) when
             the serialConnectType is set to modem(2) or modem-switch(4)
             and the serialConnectDialString is a zero-length string or
             cannot be correctly parsed as a ConnectString, the set
             request will be rejected with badValue(3).
             
             If the manager attempts to set this object to active(1) when
             the serialConnectType is set to switch(3) or modem-switch(4)
             and the serialConnectSwitchConnectSeq,
             the serialConnectSwitchDisconnectSeq, or
             the serialConnectSwitchResetSeq are zero-length strings
             or cannot be correctly parsed as ConnectStrings, the set
             request will be rejected with badValue(3).
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
        */
        attribute RowStatusType serialConnectStatus;
    };

    interface SmiEntryFactory : SNMPMgmt::GenericFactory {

        filter2Entry create_filter2Entry (
            in FilterProtocolDirDataLocalIndexType filterProtocolDirDataLocalIndex,
            in FilterProtocolDirLocalIndexType filterProtocolDirLocalIndex
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        protocolDirEntry create_protocolDirEntry (
            in ProtocolDirDescrType protocolDirDescr,
            in ProtocolDirAddressMapConfigType protocolDirAddressMapConfig,
            in ProtocolDirHostConfigType protocolDirHostConfig,
            in ProtocolDirMatrixConfigType protocolDirMatrixConfig,
            in OwnerStringType protocolDirOwner,
            in RowStatusType protocolDirStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        protocolDistControlEntry create_protocolDistControlEntry (
            in DataSourceType protocolDistControlDataSource,
            in OwnerStringType protocolDistControlOwner,
            in RowStatusType protocolDistControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        addressMap create_addressMap (
            in AddressMapMaxDesiredEntriesType addressMapMaxDesiredEntries
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        addressMapControlEntry create_addressMapControlEntry (
            in DataSourceType addressMapControlDataSource,
            in OwnerStringType addressMapControlOwner,
            in RowStatusType addressMapControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        hlHostControlEntry create_hlHostControlEntry (
            in DataSourceType hlHostControlDataSource,
            in HlHostControlNlMaxDesiredEntriesType hlHostControlNlMaxDesiredEntries,
            in HlHostControlAlMaxDesiredEntriesType hlHostControlAlMaxDesiredEntries,
            in OwnerStringType hlHostControlOwner,
            in RowStatusType hlHostControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        hlMatrixControlEntry create_hlMatrixControlEntry (
            in DataSourceType hlMatrixControlDataSource,
            in HlMatrixControlNlMaxDesiredEntriesType hlMatrixControlNlMaxDesiredEntries,
            in HlMatrixControlAlMaxDesiredEntriesType hlMatrixControlAlMaxDesiredEntries,
            in OwnerStringType hlMatrixControlOwner,
            in RowStatusType hlMatrixControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        nlMatrixTopNControlEntry create_nlMatrixTopNControlEntry (
            in NlMatrixTopNControlMatrixIndexType nlMatrixTopNControlMatrixIndex,
            in NlMatrixTopNControlRateBaseType nlMatrixTopNControlRateBase,
            in NlMatrixTopNControlTimeRemainingType nlMatrixTopNControlTimeRemaining,
            in NlMatrixTopNControlRequestedSizeType nlMatrixTopNControlRequestedSize,
            in OwnerStringType nlMatrixTopNControlOwner,
            in RowStatusType nlMatrixTopNControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        alMatrixTopNControlEntry create_alMatrixTopNControlEntry (
            in AlMatrixTopNControlMatrixIndexType alMatrixTopNControlMatrixIndex,
            in AlMatrixTopNControlRateBaseType alMatrixTopNControlRateBase,
            in AlMatrixTopNControlTimeRemainingType alMatrixTopNControlTimeRemaining,
            in AlMatrixTopNControlRequestedSizeType alMatrixTopNControlRequestedSize,
            in OwnerStringType alMatrixTopNControlOwner,
            in RowStatusType alMatrixTopNControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        usrHistoryControlEntry create_usrHistoryControlEntry (
            in UsrHistoryControlObjectsType usrHistoryControlObjects,
            in UsrHistoryControlBucketsRequestedType usrHistoryControlBucketsRequested,
            in UsrHistoryControlIntervalType usrHistoryControlInterval,
            in OwnerStringType usrHistoryControlOwner,
            in RowStatusType usrHistoryControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        usrHistoryObjectEntry create_usrHistoryObjectEntry (
            in ASN1_ObjectIdentifier usrHistoryObjectVariable,
            in UsrHistoryObjectSampleTypeType usrHistoryObjectSampleType
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        probeConfig create_probeConfig (
            in ProbeDateTimeType probeDateTime,
            in ProbeResetControlType probeResetControl,
            in ProbeDownloadFileType probeDownloadFile,
            in IpAddressType probeDownloadTFTPServer,
            in ProbeDownloadActionType probeDownloadAction,
            in IpAddressType netDefaultGateway
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        serialConfigEntry create_serialConfigEntry (
            in SerialModeType serialMode,
            in SerialProtocolType serialProtocol,
            in SerialTimeoutType serialTimeout,
            in SerialModemInitStringType serialModemInitString,
            in SerialModemHangUpStringType serialModemHangUpString,
            in SerialModemConnectRespType serialModemConnectResp,
            in SerialModemNoConnectRespType serialModemNoConnectResp,
            in SerialDialoutTimeoutType serialDialoutTimeout,
            in RowStatusType serialStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        netConfigEntry create_netConfigEntry (
            in IpAddressType netConfigIPAddress,
            in IpAddressType netConfigSubnetMask,
            in RowStatusType netConfigStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        trapDestEntry create_trapDestEntry (
            in TrapDestCommunityType trapDestCommunity,
            in TrapDestProtocolType trapDestProtocol,
            in ASN1_OctetString trapDestAddress,
            in OwnerStringType trapDestOwner,
            in RowStatusType trapDestStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        serialConnectionEntry create_serialConnectionEntry (
            in IpAddressType serialConnectDestIpAddress,
            in SerialConnectTypeType serialConnectType,
            in SerialConnectDialStringType serialConnectDialString,
            in SerialConnectSwitchConnectSeqType serialConnectSwitchConnectSeq,
            in SerialConnectSwitchDisconnectSeqType serialConnectSwitchDisconnectSeq,
            in SerialConnectSwitchResetSeqType serialConnectSwitchResetSeq,
            in OwnerStringType serialConnectOwner,
            in RowStatusType serialConnectStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );
    };

    /* pseudo */
    interface DefaultValues {
        /* DEFVAL:  0 */
        FilterProtocolDirDataLocalIndexType filterProtocolDirDataLocalIndex();

        /* DEFVAL:  0 */
        FilterProtocolDirLocalIndexType filterProtocolDirLocalIndex();

        /* DEFVAL:  1800 */
        NlMatrixTopNControlTimeRemainingType nlMatrixTopNControlTimeRemaining();

        /* DEFVAL:  150 */
        NlMatrixTopNControlRequestedSizeType nlMatrixTopNControlRequestedSize();

        /* DEFVAL:  1800 */
        AlMatrixTopNControlTimeRemainingType alMatrixTopNControlTimeRemaining();

        /* DEFVAL:  150 */
        AlMatrixTopNControlRequestedSizeType alMatrixTopNControlRequestedSize();

        /* DEFVAL:  50 */
        UsrHistoryControlBucketsRequestedType usrHistoryControlBucketsRequested();

        /* DEFVAL:  1800 */
        UsrHistoryControlIntervalType usrHistoryControlInterval();

        /* DEFVAL:  direct */
        SerialModeType serialMode();

        /* DEFVAL:  slip */
        SerialProtocolType serialProtocol();

        /* DEFVAL:  300 */
        SerialTimeoutType serialTimeout();

        /* DEFVAL:  20 */
        SerialDialoutTimeoutType serialDialoutTimeout();

        /* DEFVAL:  direct */
        SerialConnectTypeType serialConnectType();

    };

};

#endif /* !_RMON2_MIB_IDL_ */
