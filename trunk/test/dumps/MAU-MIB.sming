//
// This module has been generated by smidump 0.1.7-pre14. Do not edit.
//
module MAU-MIB mauMod {

//
// IDENTIFIER IMPORTS
//

  import IRTF-NMRG-SMING-TYPES (Counter32);

  import IRTF-NMRG-SMING (mib-2);

  import IRTF-NMRG-SMING-TYPES (TruthValue);

//
// MODULE META INFORMATION
//

  oid               mib-2.26.6;

  organization      
        "IETF HUB MIB Working Group";

  contact           
        "WG E-mail: hubmib@hprnd.rose.hp.com
         
             Chair: Dan Romascanu
            Postal: Madge Networks (Israel) Ltd.
                    Atidim Technology Park, Bldg. 3
                    Tel Aviv 61131, Israel
               Tel: 972-3-6458414, 6458458
               Fax: 972-3-6487146
            E-mail: dromasca@madge.com
         
            Editor: Kathryn de Graaf
            Postal: 3Com Corporation
                    118 Turnpike Rd.
                    Southborough, MA  01772
                    USA
               Tel: (508)229-1627
               Fax: (508)490-5882
            E-mail: kdegraaf@isd.3com.com";

  description       
        "Management information for 802.3 MAUs.
         
         The following references are used throughout this
         MIB module:
         
         [IEEE 802.3 Std]
           refers to IEEE 802.3/ISO 8802-3 Information
           processing systems - Local area networks -
           Part 3: Carrier sense multiple access with
           collision detection (CSMA/CD) access method
           and physical layer specifications (1993),
           and to IEEE Std 802.3u-1995, Supplement to
           IEEE Std 802.3, clauses 22 through 29.
         
         [IEEE 802.3 Mgt]
           refers to IEEE 802.3u-1995, - 10 Mb/s &
           100 Mb/s Management, Section 30 -
           Supplement to IEEE Std 802.3.";

//
// TYPE DEFINITIONS
//

  typedef JackType {
    type            Enumeration (other(1), rj45(2), rj45S(3), 
                      db9(4), bnc(5), fAUI(6), mAUI(7), 
                      fiberSC(8), fiberMIC(9), fiberST(10), 
                      telco(11));
    description     
        "Common enumeration values for repeater and
         interface MAU jack types.";
  };

//
// OBJECT DEFINITIONS
//


  node snmpDot3MauMgt {
    oid             mib-2.26;
  };

  node dot3RpMauBasicGroup {
    oid             snmpDot3MauMgt.1;
  };

  table rpMauTable {
    oid             dot3RpMauBasicGroup.1;
    description     
        "Table of descriptive and status information about
         the MAU(s) attached to the ports of a repeater.";

    row rpMauEntry {
      oid           rpMauTable.1;
      index         (rpMauGroupIndex, rpMauPortIndex, rpMauIndex);
      description   
        "An entry in the table, containing information
         about a single MAU.";

      column rpMauGroupIndex {
        oid         rpMauEntry.1;
        type        Integer32 (1..2147483647);
        access      readonly;
        description 
        "This variable uniquely identifies the group
         containing the port to which the MAU described by
         this entry is connected.
         
         Note:  In practice, a group will generally be a
         field-replaceable unit (i.e., module, card, or
         board) that can fit in the physical system
         enclosure, and the group number will correspond to
         a number marked on the physical enclosure.
         
         The group denoted by a particular value of this
         object is the same as the group denoted by the
         same value of rptrGroupIndex.";
      };

      column rpMauPortIndex {
        oid         rpMauEntry.2;
        type        Integer32 (1..2147483647);
        access      readonly;
        description 
        "This variable uniquely identifies the repeater
         port within group rpMauGroupIndex to which the MAU
         described by this entry is connected.";
        reference   
        "Reference RFC 1516, rptrPortIndex.";
      };

      column rpMauIndex {
        oid         rpMauEntry.3;
        type        Integer32 (1..2147483647);
        access      readonly;
        description 
        "This variable uniquely identifies the MAU
         described by this entry from among other MAUs
         connected to the same port (rpMauPortIndex).";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.1, aMAUID.";
      };

      column rpMauType {
        oid         rpMauEntry.4;
        type        ObjectIdentifier;
        access      readonly;
        description 
        "This object identifies the 10 or 100 Mb/s
         baseband MAU type.  An initial set of MAU types
         are defined above.  The assignment of OBJECT
         IDENTIFIERs to new types of MAUs is managed by the
         IANA.  If the MAU type is unknown, the object
         identifier
         
         unknownMauType OBJECT IDENTIFIER ::= { 0 0 }
         
         is returned.  Note that unknownMauType is a
         syntactically valid object identifier, and any
         conformant implementation of ASN.1 and the BER
         must be able to generate and recognize this
         value.";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.2, aMAUType.";
      };

      column rpMauStatus {
        oid         rpMauEntry.5;
        type        Enumeration (other(1), unknown(2), 
                      operational(3), standby(4), shutdown(5), 
                      reset(6));
        access      readwrite;
        description 
        "The current state of the MAU.  This object may be
         implemented as a read-only object by those agents
         and MAUs that do not implement software control of
         the MAU state.  Some agents may not support
         setting the value of this object to some of the
         enumerated values.
         
         The value other(1) is returned if the MAU is in a
         state other than one of the states 2 through 6.
         
         The value unknown(2) is returned when the MAU's
         true state is unknown; for example, when it is
         being initialized.
         
         A MAU in the operational(3) state is fully
         functional, operates, and passes signals to its
         attached DTE or repeater port in accordance to its
         specification.
         
         A MAU in standby(4) state forces DI and CI to idle
         and the media transmitter to idle or fault, if
         supported.  Standby(4) mode only applies to link
         type MAUs.  The state of rpMauMediaAvailable is
         unaffected.
         
         A MAU in shutdown(5) state assumes the same
         condition on DI, CI, and the media transmitter as
         though it were powered down or not connected.  The
         MAU may return other(1) value for the
         rpMauJabberState and rpMauMediaAvailable objects
         when it is in this state.  For an AUI, this state
         will remove power from the AUI.
         
         Setting this variable to the value reset(6) resets
         the MAU in the same manner as a power-off, power-
         on cycle of at least one-half second would.  The
         agent is not required to return the value reset
         (6).
         
         Setting this variable to the value operational(3),
         standby(4), or shutdown(5) causes the MAU to
         assume the respective state except that setting a
         mixing-type MAU or an AUI to standby(4) will cause
         the MAU to enter the shutdown state.";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.7, aMAUAdminState,
         30.5.1.2.2, acMAUAdminControl, and 30.5.1.2.1,
         acRESETMAU.";
      };

      column rpMauMediaAvailable {
        oid         rpMauEntry.6;
        type        Enumeration (other(1), unknown(2), 
                      available(3), notAvailable(4), 
                      remoteFault(5), invalidSignal(6), 
                      remoteJabber(7), remoteLinkLoss(8), 
                      remoteTest(9));
        access      readonly;
        description 
        "If the MAU is a link or fiber type (FOIRL,
         10BASE-T, 10BASE-F) then this is equivalent to the
         link test fail state/low light function.  For an
         AUI or a coax (including broadband) MAU this
         indicates whether or not loopback is detected on
         the DI circuit.  The value of this attribute
         persists between packets for MAU types AUI,
         10BASE5, 10BASE2, 10BROAD36, and 10BASE-FP.
         
         The value other(1) is returned if the
         mediaAvailable state is not one of 2 through 6.
         
         The value unknown(2) is returned when the MAU's
         true state is unknown; for example, when it is
         being initialized.  At power-up or following a
         reset, the value of this attribute will be unknown
         for AUI, coax, and 10BASE-FP MAUs.  For these MAUs
         loopback will be tested on each transmission
         during which no collision is detected.  If DI is
         receiving input when DO returns to IDL after a
         transmission and there has been no collision
         during the transmission then loopback will be
         detected.  The value of this attribute will only
         change during non-collided transmissions for AUI,
         coax, and 10BASE-FP MAUs.
         
         For 100BASE-T4, 100BASE-TX and 100BASE-FX the
         enumerations match the states within the
         respective link integrity state diagrams, fig 23-
         12 and 24-15 of sections 23 and 24 of [2].  Any
         MAU which implements management of auto-
         negotiation will map remote fault indication to
         remote fault.
         
         The value available(3) indicates that the link,
         light, or loopback is normal.  The value
         notAvailable(4) indicates link loss, low light, or
         no loopback.
         
         The value remoteFault(5) indicates that a fault
         has been detected at the remote end of the link.
         This value applies to 10BASE-FB, 100BASE-T4 Far
         End Fault Indication and non-specified remote
         faults from a system running auto-negotiation.
         The values remoteJabber(7), remoteLinkLoss(8), and
         remoteTest(9) should be used instead of
         remoteFault(5) where the reason for remote fault
         is identified in the remote signaling protocol.
         
         The value invalidSignal(6) indicates that an
         invalid signal has been received from the other
         end of the link.  InvalidSignal(6) applies only to
         MAUs of type 10BASE-FB.
         
         Where an IEEE Std 802.3u-1995 clause 22 MII is
         present, a logic one in the remote fault bit
         (reference section 22.2.4.2.8 of that document)
         maps to the value remoteFault(5), and a logic zero
         in the link status bit (reference section
         22.2.4.2.10 of that document) maps to the value
         notAvailable(4).  The value notAvailable(4) takes
         precedence over the value remoteFault(5).";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.4, aMediaAvailable.";
      };

      column rpMauMediaAvailableStateExits {
        oid         rpMauEntry.7;
        type        Counter32;
        access      readonly;
        description 
        "A count of the number of times that
         rpMauMediaAvailable for this MAU instance leaves
         the state available(3).";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.5, aLoseMediaCounter.";
      };

      column rpMauJabberState {
        oid         rpMauEntry.8;
        type        Enumeration (other(1), unknown(2), 
                      noJabber(3), jabbering(4));
        access      readonly;
        description 
        "The value other(1) is returned if the jabber
         state is not 2, 3, or 4.  The agent must always
         return other(1) for MAU type dot3MauTypeAUI.
         
         The value unknown(2) is returned when the MAU's
         true state is unknown; for example, when it is
         being initialized.
         
         If the MAU is not jabbering the agent returns
         noJabber(3).  This is the 'normal' state.
         
         If the MAU is in jabber state the agent returns
         the jabbering(4) value.";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.6,
         aJabber.jabberFlag.";
      };

      column rpMauJabberingStateEnters {
        oid         rpMauEntry.9;
        type        Counter32;
        access      readonly;
        description 
        "A count of the number of times that
         mauJabberState for this MAU instance enters the
         state jabbering(4).  For MAUs of type
         dot3MauTypeAUI, dot3MauType100BaseT4,
         dot3MauType100BaseTX, and dot3MauType100BaseFX,
         this counter will always indicate zero.";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.6,
         aJabber.jabberCounter.";
      };

      column rpMauFalseCarriers {
        oid         rpMauEntry.10;
        type        Counter32;
        access      readonly;
        description 
        "A count of the number of false carrier events
         during IDLE in 100BASE-X links.  This counter does
         not increment at the symbol rate.  It can
         increment after a valid carrier completion at a
         maximum rate of once per 100 ms until the next
         carrier event.
         
         This counter increments only for MAUs of type
         dot3MauType100BaseT4, dot3MauType100BaseTX, and
         dot3MauType100BaseFX.  For all other MAU types,
         this counter will always indicate zero.
         
         The approximate minimum time for rollover of this
         counter is 7.4 hours.";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.10, aFalseCarriers.";
      };
    };
  };

  table rpJackTable {
    oid             dot3RpMauBasicGroup.2;
    description     
        "Information about the external jacks attached to
         MAUs attached to the ports of a repeater.";

    row rpJackEntry {
      oid           rpJackTable.1;
      index         (rpMauGroupIndex, rpMauPortIndex, rpMauIndex, 
                     rpJackIndex);
      description   
        "An entry in the table, containing information
         about a particular jack.";

      column rpJackIndex {
        oid         rpJackEntry.1;
        type        Integer32 (1..2147483647);
        access      noaccess;
        description 
        "This variable uniquely identifies the jack
         described by this entry from among other jacks
         attached to the same MAU (rpMauIndex).";
      };

      column rpJackType {
        oid         rpJackEntry.2;
        type        JackType;
        access      readonly;
        description 
        "The jack connector type, as it appears on the
         outside of the system.";
      };
    };
  };

  node dot3IfMauBasicGroup {
    oid             snmpDot3MauMgt.2;
  };

  table ifMauTable {
    oid             dot3IfMauBasicGroup.1;
    description     
        "Table of descriptive and status information about
         MAU(s) attached to an interface.";

    row ifMauEntry {
      oid           ifMauTable.1;
      index         (ifMauIfIndex, ifMauIndex);
      description   
        "An entry in the table, containing information
         about a single MAU.";

      column ifMauIfIndex {
        oid         ifMauEntry.1;
        type        Integer32 (1..2147483647);
        access      readonly;
        description 
        "This variable uniquely identifies the interface
         to which the MAU described by this entry is
         connected.";
        reference   
        "RFC 1213, ifIndex";
      };

      column ifMauIndex {
        oid         ifMauEntry.2;
        type        Integer32 (1..2147483647);
        access      readonly;
        description 
        "This variable uniquely identifies the MAU
         described by this entry from among other MAUs
         connected to the same interface (ifMauIfIndex).";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.1, aMAUID.";
      };

      column ifMauType {
        oid         ifMauEntry.3;
        type        ObjectIdentifier;
        access      readonly;
        description 
        "This object identifies the 10 or 100 Mb/s
         baseband or broadband MAU type.  An initial set of
         MAU types are defined above.  The assignment of
         OBJECT IDENTIFIERs to new types of MAUs is managed
         by the IANA.  If the MAU type is unknown, the
         object identifier
         
         unknownMauType OBJECT IDENTIFIER ::= { 0 0 }
         
         is returned.  Note that unknownMauType is a
         syntactically valid object identifier, and any
         conformant implementation of ASN.1 and the BER
         must be able to generate and recognize this value.
         
         This object represents the operational type of the
         MAU, as determined by either (1) the result of the
         auto-negotiation function or (2) if auto-
         negotiation is not enabled or is not implemented
         for this MAU, by the value of the object
         ifMauDefaultType.  In case (2), a set to the
         object ifMauDefaultType will force the MAU into
         the new operating mode.";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.2, aMAUType.";
      };

      column ifMauStatus {
        oid         ifMauEntry.4;
        type        Enumeration (other(1), unknown(2), 
                      operational(3), standby(4), shutdown(5), 
                      reset(6));
        access      readwrite;
        description 
        "The current state of the MAU.  This object may be
         implemented as a read-only object by those agents
         and MAUs that do not implement software control of
         the MAU state.  Some agents may not support
         setting the value of this object to some of the
         enumerated values.
         
         The value other(1) is returned if the MAU is in a
         state other than one of the states 2 through 6.
         
         The value unknown(2) is returned when the MAU's
         true state is unknown; for example, when it is
         being initialized.
         
         A MAU in the operational(3) state is fully
         functional, operates, and passes signals to its
         attached DTE or repeater port in accordance to its
         specification.
         
         A MAU in standby(4) state forces DI and CI to idle
         and the media transmitter to idle or fault, if
         supported.  Standby(4) mode only applies to link
         type MAUs.  The state of ifMauMediaAvailable is
         unaffected.
         
         A MAU in shutdown(5) state assumes the same
         condition on DI, CI, and the media transmitter as
         though it were powered down or not connected.  The
         MAU may return other(1) value for the
         ifMauJabberState and ifMauMediaAvailable objects
         when it is in this state.  For an AUI, this state
         will remove power from the AUI.
         
         Setting this variable to the value reset(6) resets
         the MAU in the same manner as a power-off, power-
         on cycle of at least one-half second would.  The
         agent is not required to return the value reset
         (6).
         
         Setting this variable to the value operational(3),
         standby(4), or shutdown(5) causes the MAU to
         assume the respective state except that setting a
         mixing-type MAU or an AUI to standby(4) will cause
         the MAU to enter the shutdown state.";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.7, aMAUAdminState,
         30.5.1.2.2, acMAUAdminControl, and 30.5.1.2.1,
         acRESETMAU.";
      };

      column ifMauMediaAvailable {
        oid         ifMauEntry.5;
        type        Enumeration (other(1), unknown(2), 
                      available(3), notAvailable(4), 
                      remoteFault(5), invalidSignal(6), 
                      remoteJabber(7), remoteLinkLoss(8), 
                      remoteTest(9));
        access      readonly;
        description 
        "If the MAU is a link or fiber type (FOIRL,
         10BASE-T, 10BASE-F) then this is equivalent to the
         link test fail state/low light function.  For an
         AUI or a coax (including broadband) MAU this
         indicates whether or not loopback is detected on
         the DI circuit.  The value of this attribute
         persists between packets for MAU types AUI,
         10BASE5, 10BASE2, 10BROAD36, and 10BASE-FP.
         
         The value other(1) is returned if the
         mediaAvailable state is not one of 2 through 6.
         
         The value unknown(2) is returned when the MAU's
         true state is unknown; for example, when it is
         being initialized.  At power-up or following a
         reset, the value of this attribute will be unknown
         for AUI, coax, and 10BASE-FP MAUs.  For these MAUs
         loopback will be tested on each transmission
         during which no collision is detected.  If DI is
         receiving input when DO returns to IDL after a
         transmission and there has been no collision
         during the transmission then loopback will be
         detected.  The value of this attribute will only
         change during non-collided transmissions for AUI,
         coax, and 10BASE-FP MAUs.
         
         For 100BASE-T4, 100BASE-TX and 100BASE-FX the
         enumerations match the states within the
         respective link integrity state diagrams, fig 23-
         12 and 24-15 of sections 23 and 24 of [2].  Any
         MAU which implements management of auto-
         negotiation will map remote fault indication to
         remote fault.
         
         The value available(3) indicates that the link,
         light, or loopback is normal.  The value
         notAvailable(4) indicates link loss, low light, or
         no loopback.
         
         The value remoteFault(5) indicates that a fault
         has been detected at the remote end of the link.
         This value applies to 10BASE-FB, 100BASE-T4 Far
         End Fault Indication and non-specified remote
         faults from a system running auto-negotiation.
         The values remoteJabber(7), remoteLinkLoss(8), and
         remoteTest(9) should be used instead of
         remoteFault(5) where the reason for remote fault
         is identified in the remote signaling protocol.
         
         The value invalidSignal(6) indicates that an
         invalid signal has been received from the other
         end of the link.  InvalidSignal(6) applies only to
         MAUs of type 10BASE-FB.
         
         Where an IEEE Std 802.3u-1995 clause 22 MII is
         present, a logic one in the remote fault bit
         (reference section 22.2.4.2.8 of that document)
         maps to the value remoteFault(5), and a logic zero
         in the link status bit (reference section
         22.2.4.2.10 of that document) maps to the value
         notAvailable(4).  The value notAvailable(4) takes
         precedence over the value remoteFault(5).";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.4, aMediaAvailable.";
      };

      column ifMauMediaAvailableStateExits {
        oid         ifMauEntry.6;
        type        Counter32;
        access      readonly;
        description 
        "A count of the number of times that
         ifMauMediaAvailable for this MAU instance leaves
         the state available(3).";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.5, aLoseMediaCounter.";
      };

      column ifMauJabberState {
        oid         ifMauEntry.7;
        type        Enumeration (other(1), unknown(2), 
                      noJabber(3), jabbering(4));
        access      readonly;
        description 
        "The value other(1) is returned if the jabber
         state is not 2, 3, or 4.  The agent must always
         return other(1) for MAU type dot3MauTypeAUI.
         
         The value unknown(2) is returned when the MAU's
         true state is unknown; for example, when it is
         being initialized.
         
         If the MAU is not jabbering the agent returns
         noJabber(3).  This is the 'normal' state.
         
         If the MAU is in jabber state the agent returns
         the jabbering(4) value.";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.6,
         aJabber.jabberFlag.";
      };

      column ifMauJabberingStateEnters {
        oid         ifMauEntry.8;
        type        Counter32;
        access      readonly;
        description 
        "A count of the number of times that
         mauJabberState for this MAU instance enters the
         state jabbering(4).  For MAUs of type
         dot3MauTypeAUI, dot3MauType100BaseT4,
         dot3MauType100BaseTX, and dot3MauType100BaseFX,
         this counter will always indicate zero.";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.6,
         aJabber.jabberCounter.";
      };

      column ifMauFalseCarriers {
        oid         ifMauEntry.9;
        type        Counter32;
        access      readonly;
        description 
        "A count of the number of false carrier events
         during IDLE in 100BASE-X links.  This counter does
         not increment at the symbol rate.  It can
         increment after a valid carrier completion at a
         maximum rate of once per 100 ms until the next
         carrier event.
         
         This counter increments only for MAUs of type
         dot3MauType100BaseT4, dot3MauType100BaseTX, and
         dot3MauType100BaseFX.  For all other MAU types,
         this counter will always indicate zero.
         
         The approximate minimum time for rollover of this
         counter is 7.4 hours.";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.10, aFalseCarriers.";
      };

      column ifMauTypeList {
        oid         ifMauEntry.10;
        type        Integer32;
        access      readonly;
        description 
        "A value that uniquely identifies the set of
         possible IEEE 802.3 types that the MAU could be.
         The value is a sum which initially takes the value
         zero.  Then, for each type capability of this MAU,
         2 raised to the power noted below is added to the
         sum. For example, a MAU which has the capability
         to be only 10BASE-T would have a value of 512
         (2**9).  In contrast, a MAU which supports both
         10Base-T (full duplex) and 100BASE-TX (full
         duplex) would have a value of ((2**11) + (2**16))
         or 67584.
         
         The powers of 2 assigned to the capabilities are
         these:
         
         Power  Capability
          0      other or unknown
          1      AUI
          2      10BASE-5
          3      FOIRL
          4      10BASE-2
          5      10BASE-T duplex mode unknown
          6      10BASE-FP
          7      10BASE-FB
          8      10BASE-FL duplex mode unknown
          9      10BROAD36
         10      10BASE-T  half duplex mode
         11      10BASE-T  full duplex mode
         12      10BASE-FL half duplex mode
         13      10BASE-FL full duplex mode
         14      100BASE-T4
         15      100BASE-TX half duplex mode
         16      100BASE-TX full duplex mode
         17      100BASE-FX half duplex mode
         18      100BASE-FX full duplex mode
         19      100BASE-T2 half duplex mode
         20      100BASE-T2 full duplex mode
         
         If auto-negotiation is present on this MAU, this
         object will map to ifMauAutoNegCapability.";
      };

      column ifMauDefaultType {
        oid         ifMauEntry.11;
        type        ObjectIdentifier;
        access      readwrite;
        description 
        "This object identifies the default administrative
         10 or 100 Mb/s baseband MAU type, to be used in
         conjunction with the operational MAU type denoted
         by ifMauType.
         
         The set of possible values for this object is the
         same as the set defined for the ifMauType object.
         
         This object represents the administratively-
         configured type of the MAU.  If auto-negotiation
         is not enabled or is not implemented for this MAU,
         the value of this object determines the
         operational type of the MAU.  In this case, a set
         to this object will force the MAU into the
         specified operating mode.
         
         If auto-negotiation is implemented and enabled for
         this MAU, the operational type of the MAU is
         determined by auto-negotiation, and the value of
         this object denotes the type to which the MAU will
         automatically revert if/when auto-negotiation is
         later disabled.
         
         NOTE TO IMPLEMENTORS:  It may be necessary to
         provide for underlying hardware implementations
         which do not follow the exact behavior specified
         above.  In particular, when
         ifMauAutoNegAdminStatus transitions from enabled
         to disabled, the agent implementation must ensure
         that the operational type of the MAU (as reported
         by ifMauType) correctly transitions to the value
         specified by this object, rather than continuing
         to operate at the value earlier determined by the
         auto-negotiation function.";
        reference   
        "[IEEE 802.3 Mgt], 30.5.1.1.1, aMAUID, and [IEEE
         802.3 Std], 22.2.4.1.4.";
      };

      column ifMauAutoNegSupported {
        oid         ifMauEntry.12;
        type        TruthValue;
        access      readonly;
        description 
        "This object indicates whether or not auto-
         negotiation is supported on this MAU.";
      };
    };
  };

  table ifJackTable {
    oid             dot3IfMauBasicGroup.2;
    description     
        "Information about the external jacks attached to
         MAUs attached to an interface.";

    row ifJackEntry {
      oid           ifJackTable.1;
      index         (ifMauIfIndex, ifMauIndex, ifJackIndex);
      description   
        "An entry in the table, containing information
         about a particular jack.";

      column ifJackIndex {
        oid         ifJackEntry.1;
        type        Integer32 (1..2147483647);
        access      noaccess;
        description 
        "This variable uniquely identifies the jack
         described by this entry from among other jacks
         attached to the same MAU.";
      };

      column ifJackType {
        oid         ifJackEntry.2;
        type        JackType;
        access      readonly;
        description 
        "The jack connector type, as it appears on the
         outside of the system.";
      };
    };
  };

  node dot3BroadMauBasicGroup {
    oid             snmpDot3MauMgt.3;
  };

  table broadMauBasicTable {
    oid             dot3BroadMauBasicGroup.1;
    description     
        "Table of descriptive and status information about
         the broadband MAUs connected to interfaces.";

    row broadMauBasicEntry {
      oid           broadMauBasicTable.1;
      index         (broadMauIfIndex, broadMauIndex);
      description   
        "An entry in the table, containing information
         about a single broadband MAU.";

      column broadMauIfIndex {
        oid         broadMauBasicEntry.1;
        type        Integer32 (1..2147483647);
        access      readonly;
        description 
        "This variable uniquely identifies the interface
         to which the MAU described by this entry is
         connected.";
        reference   
        "Reference RFC 1213, ifIndex.";
      };

      column broadMauIndex {
        oid         broadMauBasicEntry.2;
        type        Integer32 (1..2147483647);
        access      readonly;
        description 
        "This variable uniquely identifies the MAU
         connected to interface broadMauIfIndex that is
         described by this entry.";
        reference   
        "Reference IEEE 802.3 MAU Mgt, 20.2.3.2, aMAUID.";
      };

      column broadMauXmtRcvSplitType {
        oid         broadMauBasicEntry.3;
        type        Enumeration (other(1), single(2), dual(3));
        access      readonly;
        description 
        "This object indicates the type of frequency
         multiplexing/cabling system used to separate the
         transmit and receive paths for the 10BROAD36 MAU.
         
         The value other(1) is returned if the split type
         is not either single or dual.
         
         The value single(2) indicates a single cable
         system.  The value dual(3) indicates a dual cable
         system, offset normally zero.";
        reference   
        "Reference IEEE 802.3 MAU Mgt, 20.2.3.2,
         aBbMAUXmitRcvSplitType.";
      };

      column broadMauXmtCarrierFreq {
        oid         broadMauBasicEntry.4;
        type        Integer32;
        access      readonly;
        description 
        "This variable indicates the transmit carrier
         frequency of the 10BROAD36 MAU in MHz/4; that is,
         in units of 250 kHz.";
        reference   
        "Reference IEEE 802.3 MAU Mgt, 20.2.3.2,
         aBroadbandFrequencies.xmitCarrierFrequency.";
      };

      column broadMauTranslationFreq {
        oid         broadMauBasicEntry.5;
        type        Integer32;
        access      readonly;
        description 
        "This variable indicates the translation offset
         frequency of the 10BROAD36 MAU in MHz/4; that is,
         in units of 250 kHz.";
        reference   
        "Reference IEEE 802.3 MAU Mgt, 20.2.3.2,
         aBroadbandFrequencies.translationFrequency.";
      };
    };
  };

  node dot3MauType {
    oid             snmpDot3MauMgt.4;
  };

  node dot3MauTypeAUI {
    oid             dot3MauType.1;
    description     
        "no internal MAU, view from AUI";
  };

  node dot3MauType10Base5 {
    oid             dot3MauType.2;
    description     
        "thick coax MAU (per 802.3 section 8)";
  };

  node dot3MauTypeFoirl {
    oid             dot3MauType.3;
    description     
        "FOIRL MAU (per 802.3 section 9.9)";
  };

  node dot3MauType10Base2 {
    oid             dot3MauType.4;
    description     
        "thin coax MAU (per 802.3 section 10)";
  };

  node dot3MauType10BaseT {
    oid             dot3MauType.5;
    description     
        "UTP MAU (per 802.3 section 14)";
  };

  node dot3MauType10BaseFP {
    oid             dot3MauType.6;
    description     
        "passive fiber MAU (per 802.3 section 16)";
  };

  node dot3MauType10BaseFB {
    oid             dot3MauType.7;
    description     
        "sync fiber MAU (per 802.3 section 17)";
  };

  node dot3MauType10BaseFL {
    oid             dot3MauType.8;
    description     
        "async fiber MAU (per 802.3 section 18)";
  };

  node dot3MauType10Broad36 {
    oid             dot3MauType.9;
    description     
        "broadband DTE MAU (per 802.3 section 11). Note
         that 10BROAD36 MAUs can be attached to interfaces
         but not to repeaters.";
  };

  node dot3MauType10BaseTHD {
    oid             dot3MauType.10;
    description     
        "UTP MAU (per 802.3 section 14), half duplex mode";
  };

  node dot3MauType10BaseTFD {
    oid             dot3MauType.11;
    description     
        "UTP MAU (per 802.3 section 14), full duplex mode";
  };

  node dot3MauType10BaseFLHD {
    oid             dot3MauType.12;
    description     
        "async fiber MAU (per 802.3 section 18), half
         duplex mode";
  };

  node dot3MauType10BaseFLFD {
    oid             dot3MauType.13;
    description     
        "async fiber MAU (per 802.3 section 18), full
         duplex mode";
  };

  node dot3MauType100BaseT4 {
    oid             dot3MauType.14;
    description     
        "4 pair categ. 3 UTP (per 802.3 section 23)";
  };

  node dot3MauType100BaseTXHD {
    oid             dot3MauType.15;
    description     
        "2 pair categ. 5 UTP (per 802.3 section 25), half
         duplex mode";
  };

  node dot3MauType100BaseTXFD {
    oid             dot3MauType.16;
    description     
        "2 pair categ. 5 UTP (per 802.3 section 25), full
         duplex mode";
  };

  node dot3MauType100BaseFXHD {
    oid             dot3MauType.17;
    description     
        "X fiber over PMT (per 802.3 section 26), half
         duplex mode";
  };

  node dot3MauType100BaseFXFD {
    oid             dot3MauType.18;
    description     
        "X fiber over PMT (per 802.3 section 26), full
         duplex mode";
  };

  node dot3MauType100BaseT2HD {
    oid             dot3MauType.19;
    description     
        "2 pair categ. 3 UTP (per 802.3 section 32), half
         duplex mode";
  };

  node dot3MauType100BaseT2FD {
    oid             dot3MauType.20;
    description     
        "2 pair categ. 3 UTP (per 802.3 section 32), full
         duplex mode";
  };

  node dot3IfMauAutoNegGroup {
    oid             snmpDot3MauMgt.5;
  };

  table ifMauAutoNegTable {
    oid             dot3IfMauAutoNegGroup.1;
    description     
        "Configuration and status objects for the auto-
         negotiation function of MAUs attached to
         interfaces.";

    row ifMauAutoNegEntry {
      oid           ifMauAutoNegTable.1;
      index         (ifMauIfIndex, ifMauIndex);
      description   
        "An entry in the table, containing configuration
         and status information for the auto-negotiation
         function of a particular MAU.";

      column ifMauAutoNegAdminStatus {
        oid         ifMauAutoNegEntry.1;
        type        Enumeration (enabled(1), disabled(2));
        access      readwrite;
        description 
        "Setting this object to enabled(1) will cause the
         interface which has the auto-negotiation signaling
         ability to be enabled.
         If the value of this object is disabled(2) then
         the interface will act as it would if it had no
         auto-negotiation signaling.  Under these
         conditions, an IEEE 802.3 MAU will immediately be
         forced to the state indicated by the value of the
         object ifMauDefaultType.
         
         NOTE TO IMPLEMENTORS:  When
         ifMauAutoNegAdminStatus transitions from enabled
         to disabled, the agent implementation must ensure
         that the operational type of the MAU (as reported
         by ifMauType) correctly transitions to the value
         specified by the ifMauDefaultType object, rather
         than continuing to operate at the value earlier
         determined by the auto-negotiation function.";
        reference   
        "[IEEE 802.3 Mgt], 30.6.1.1.2, aAutoNegAdminState
         and 30.6.1.2.2, acAutoNegAdminControl.";
      };

      column ifMauAutoNegRemoteSignaling {
        oid         ifMauAutoNegEntry.2;
        type        Enumeration (detected(1), notdetected(2));
        access      readonly;
        description 
        "A value indicating whether the remote end of the
         link is using auto-negotiation signaling. It takes
         the value detected(1) if and only if, during the
         previous link negotiation, FLP Bursts were
         received.";
        reference   
        "[IEEE 802.3 Mgt], 30.6.1.1.3,
         aAutoNegRemoteSignaling.";
      };

      column ifMauAutoNegConfig {
        oid         ifMauAutoNegEntry.4;
        type        Enumeration (other(1), configuring(2), 
                      complete(3), disabled(4), 
                      parallelDetectFail(5));
        access      readonly;
        description 
        "A value indicating the current status of the
         auto-negotiation process.  The enumeration
         parallelDetectFail(5) maps to a failure in
         parallel detection as defined in 28.2.3.1 of [IEEE
         802.3 Std].";
        reference   
        "[IEEE 802.3 Mgt], 30.6.1.1.4,
         aAutoNegAutoConfig.";
      };

      column ifMauAutoNegCapability {
        oid         ifMauAutoNegEntry.5;
        type        Integer32;
        access      readonly;
        description 
        "A value that uniquely identifies the set of
         capabilities of the local auto-negotiation entity.
         The value is a sum which initially takes the value
         zero.  Then, for each capability of this
         interface, 2 raised to the power noted below is
         added to the sum. For example, an interface which
         has the capability to support only 100Base-TX half
         duplex would have a value of 32768 (2**15).  In
         contrast, an interface which supports both
         100Base-TX half duplex and and 100Base-TX full
         duplex would have a value of 98304 ((2**15) +
         (2**16)).
         
         The powers of 2 assigned to the capabilities are
         these:
         
         Power   Capability
          0       other or unknown
         (1-9)    (reserved)
         10       10BASE-T  half duplex mode
         11       10BASE-T  full duplex mode
         12       (reserved)
         13       (reserved)
         14       100BASE-T4
         15       100BASE-TX half duplex mode
         16       100BASE-TX full duplex mode
         17       (reserved)
         18       (reserved)
         19      100BASE-T2 half duplex mode
         20      100BASE-T2 full duplex mode
         
         Note that interfaces that support this MIB may
         have capabilities that extend beyond the scope of
         this MIB.";
        reference   
        "[IEEE 802.3 Mgt], 30.6.1.1.5,
         aAutoNegLocalTechnologyAbility.";
      };

      column ifMauAutoNegCapAdvertised {
        oid         ifMauAutoNegEntry.6;
        type        Integer32;
        access      readwrite;
        description 
        "A value that uniquely identifies the set of
         capabilities advertised by the local auto-
         negotiation entity. Refer to
         ifMauAutoNegCapability for a description of the
         possible values of this object.
         
         Capabilities in this object that are not available
         in ifMauAutoNegCapability cannot be enabled.";
        reference   
        "[IEEE 802.3 Mgt], 30.6.1.1.6,
         aAutoNegAdvertisedTechnologyAbility.";
      };

      column ifMauAutoNegCapReceived {
        oid         ifMauAutoNegEntry.7;
        type        Integer32;
        access      readonly;
        description 
        "A value that uniquely identifies the set of
         capabilities received from the remote auto-
         negotiation entity. Refer to
         ifMauAutoNegCapability for a description of the
         possible values of this object.
         
         Note that interfaces that support this MIB may be
         attached to remote auto-negotiation entities which
         have capabilities beyond the scope of this MIB.";
        reference   
        "[IEEE 802.3 Mgt], 30.6.1.1.7,
         aAutoNegReceivedTechnologyAbility.";
      };

      column ifMauAutoNegRestart {
        oid         ifMauAutoNegEntry.8;
        type        Enumeration (restart(1), norestart(2));
        access      readwrite;
        description 
        "If the value of this object is set to restart(1)
         then this will force auto-negotiation to begin
         link renegotiation. If auto-negotiation signaling
         is disabled, a write to this object has no effect.
         
         Setting the value of this object to norestart(2)
         has no effect.";
        reference   
        "[IEEE 802.3 Mgt], 30.6.1.2.1,
         acAutoNegRestartAutoConfig.";
      };
    };
  };

  node mauModConf {
    oid             mauMod.1;
  };

  node mauModCompls {
    oid             mauModConf.1;
  };

  node mauModObjGrps {
    oid             mauModConf.2;
  };

  node mauModNotGrps {
    oid             mauModConf.3;
  };

//
// NOTIFICATION DEFINITIONS
//

  notification rpMauJabberTrap {
    oid             snmpDot3MauMgt.0.1;
    objects         (rpMauJabberState);
    description     
        "This trap is sent whenever a managed repeater MAU
         enters the jabber state.
         
         The agent must throttle the generation of
         consecutive rpMauJabberTraps so that there is at
         least a five-second gap between them.";
    reference       
        "[IEEE 802.3 Mgt], 30.5.1.3.1, nJabber
         notification.";
  };

  notification ifMauJabberTrap {
    oid             snmpDot3MauMgt.0.2;
    objects         (ifMauJabberState);
    description     
        "This trap is sent whenever a managed interface
         MAU enters the jabber state.
         
         The agent must throttle the generation of
         consecutive ifMauJabberTraps so that there is at
         least a five-second gap between them.";
    reference       
        "[IEEE 802.3 Mgt], 30.5.1.3.1, nJabber
         notification.";
  };

//
// GROUP DEFINITIONS
//

  group mauRpGrpBasic {
    oid             mauModObjGrps.1;
    members         (rpMauGroupIndex, rpMauPortIndex, rpMauIndex, 
                     rpMauType, rpMauStatus, rpMauMediaAvailable, 
                     rpMauMediaAvailableStateExits, 
                     rpMauJabberState, rpMauJabberingStateEnters);
    description     
        "Basic conformance group for MAUs attached to
         repeater ports.  This group is also the
         conformance specification for RFC 1515
         implementations.";
  };

  group mauRpGrp100Mbs {
    oid             mauModObjGrps.2;
    members         (rpMauFalseCarriers);
    description     
        "Conformance group for MAUs attached to
         repeater ports with 100 Mb/s capability.";
  };

  group mauRpGrpJack {
    oid             mauModObjGrps.3;
    members         (rpJackType);
    description     
        "Conformance group for MAUs attached to
         repeater ports with managed jacks.";
  };

  group mauIfGrpBasic {
    oid             mauModObjGrps.4;
    members         (ifMauIfIndex, ifMauIndex, ifMauType, 
                     ifMauStatus, ifMauMediaAvailable, 
                     ifMauMediaAvailableStateExits, 
                     ifMauJabberState, ifMauJabberingStateEnters);
    description     
        "Basic conformance group for MAUs attached to
         interfaces.  This group also provides a
         conformance specification for RFC 1515
         implementations.";
  };

  group mauIfGrp100Mbs {
    oid             mauModObjGrps.5;
    members         (ifMauFalseCarriers, ifMauTypeList, 
                     ifMauDefaultType, ifMauAutoNegSupported);
    description     
        "Conformance group for MAUs attached
         to interfaces with 100 Mb/s capability.";
  };

  group mauIfGrpJack {
    oid             mauModObjGrps.6;
    members         (ifJackType);
    description     
        "Conformance group for MAUs attached
         to interfaces with managed jacks.";
  };

  group mauIfGrpAutoNeg {
    oid             mauModObjGrps.7;
    members         (ifMauAutoNegAdminStatus, 
                     ifMauAutoNegRemoteSignaling, 
                     ifMauAutoNegConfig, ifMauAutoNegCapability, 
                     ifMauAutoNegCapAdvertised, 
                     ifMauAutoNegCapReceived, 
                     ifMauAutoNegRestart);
    description     
        "Conformance group for MAUs attached to
         interfaces with managed auto-negotiation.";
  };

  group mauBroadBasic {
    oid             mauModObjGrps.8;
    members         (broadMauIfIndex, broadMauIndex, 
                     broadMauXmtRcvSplitType, 
                     broadMauXmtCarrierFreq, 
                     broadMauTranslationFreq);
    description     
        "Conformance group for broadband MAUs
         attached to interfaces.  This group
         provides a conformance specification
         for RFC 1515 implementations.";
  };

  group rpMauNotifications {
    oid             mauModNotGrps.1;
    members         (rpMauJabberTrap);
    description     
        "Notifications for repeater MAUs.";
  };

  group ifMauNotifications {
    oid             mauModNotGrps.2;
    members         (ifMauJabberTrap);
    description     
        "Notifications for interface MAUs.";
  };

  group mauRpGrpBasic {
    oid             mauModObjGrps.1;
    members         (rpMauGroupIndex, rpMauPortIndex, rpMauIndex, 
                     rpMauType, rpMauStatus, rpMauMediaAvailable, 
                     rpMauMediaAvailableStateExits, 
                     rpMauJabberState, rpMauJabberingStateEnters);
    description     
        "Basic conformance group for MAUs attached to
         repeater ports.  This group is also the
         conformance specification for RFC 1515
         implementations.";
  };

  group mauRpGrp100Mbs {
    oid             mauModObjGrps.2;
    members         (rpMauFalseCarriers);
    description     
        "Conformance group for MAUs attached to
         repeater ports with 100 Mb/s capability.";
  };

  group mauRpGrpJack {
    oid             mauModObjGrps.3;
    members         (rpJackType);
    description     
        "Conformance group for MAUs attached to
         repeater ports with managed jacks.";
  };

  group mauIfGrpBasic {
    oid             mauModObjGrps.4;
    members         (ifMauIfIndex, ifMauIndex, ifMauType, 
                     ifMauStatus, ifMauMediaAvailable, 
                     ifMauMediaAvailableStateExits, 
                     ifMauJabberState, ifMauJabberingStateEnters);
    description     
        "Basic conformance group for MAUs attached to
         interfaces.  This group also provides a
         conformance specification for RFC 1515
         implementations.";
  };

  group mauIfGrp100Mbs {
    oid             mauModObjGrps.5;
    members         (ifMauFalseCarriers, ifMauTypeList, 
                     ifMauDefaultType, ifMauAutoNegSupported);
    description     
        "Conformance group for MAUs attached
         to interfaces with 100 Mb/s capability.";
  };

  group mauIfGrpJack {
    oid             mauModObjGrps.6;
    members         (ifJackType);
    description     
        "Conformance group for MAUs attached
         to interfaces with managed jacks.";
  };

  group mauIfGrpAutoNeg {
    oid             mauModObjGrps.7;
    members         (ifMauAutoNegAdminStatus, 
                     ifMauAutoNegRemoteSignaling, 
                     ifMauAutoNegConfig, ifMauAutoNegCapability, 
                     ifMauAutoNegCapAdvertised, 
                     ifMauAutoNegCapReceived, 
                     ifMauAutoNegRestart);
    description     
        "Conformance group for MAUs attached to
         interfaces with managed auto-negotiation.";
  };

  group mauBroadBasic {
    oid             mauModObjGrps.8;
    members         (broadMauIfIndex, broadMauIndex, 
                     broadMauXmtRcvSplitType, 
                     broadMauXmtCarrierFreq, 
                     broadMauTranslationFreq);
    description     
        "Conformance group for broadband MAUs
         attached to interfaces.  This group
         provides a conformance specification
         for RFC 1515 implementations.";
  };

  group rpMauNotifications {
    oid             mauModNotGrps.1;
    members         (rpMauJabberTrap);
    description     
        "Notifications for repeater MAUs.";
  };

  group ifMauNotifications {
    oid             mauModNotGrps.2;
    members         (ifMauJabberTrap);
    description     
        "Notifications for interface MAUs.";
  };

  group mauRpGrpBasic {
    oid             mauModObjGrps.1;
    members         (rpMauGroupIndex, rpMauPortIndex, rpMauIndex, 
                     rpMauType, rpMauStatus, rpMauMediaAvailable, 
                     rpMauMediaAvailableStateExits, 
                     rpMauJabberState, rpMauJabberingStateEnters);
    description     
        "Basic conformance group for MAUs attached to
         repeater ports.  This group is also the
         conformance specification for RFC 1515
         implementations.";
  };

  group mauRpGrp100Mbs {
    oid             mauModObjGrps.2;
    members         (rpMauFalseCarriers);
    description     
        "Conformance group for MAUs attached to
         repeater ports with 100 Mb/s capability.";
  };

  group mauRpGrpJack {
    oid             mauModObjGrps.3;
    members         (rpJackType);
    description     
        "Conformance group for MAUs attached to
         repeater ports with managed jacks.";
  };

  group mauIfGrpBasic {
    oid             mauModObjGrps.4;
    members         (ifMauIfIndex, ifMauIndex, ifMauType, 
                     ifMauStatus, ifMauMediaAvailable, 
                     ifMauMediaAvailableStateExits, 
                     ifMauJabberState, ifMauJabberingStateEnters);
    description     
        "Basic conformance group for MAUs attached to
         interfaces.  This group also provides a
         conformance specification for RFC 1515
         implementations.";
  };

  group mauIfGrp100Mbs {
    oid             mauModObjGrps.5;
    members         (ifMauFalseCarriers, ifMauTypeList, 
                     ifMauDefaultType, ifMauAutoNegSupported);
    description     
        "Conformance group for MAUs attached
         to interfaces with 100 Mb/s capability.";
  };

  group mauIfGrpJack {
    oid             mauModObjGrps.6;
    members         (ifJackType);
    description     
        "Conformance group for MAUs attached
         to interfaces with managed jacks.";
  };

  group mauIfGrpAutoNeg {
    oid             mauModObjGrps.7;
    members         (ifMauAutoNegAdminStatus, 
                     ifMauAutoNegRemoteSignaling, 
                     ifMauAutoNegConfig, ifMauAutoNegCapability, 
                     ifMauAutoNegCapAdvertised, 
                     ifMauAutoNegCapReceived, 
                     ifMauAutoNegRestart);
    description     
        "Conformance group for MAUs attached to
         interfaces with managed auto-negotiation.";
  };

  group mauBroadBasic {
    oid             mauModObjGrps.8;
    members         (broadMauIfIndex, broadMauIndex, 
                     broadMauXmtRcvSplitType, 
                     broadMauXmtCarrierFreq, 
                     broadMauTranslationFreq);
    description     
        "Conformance group for broadband MAUs
         attached to interfaces.  This group
         provides a conformance specification
         for RFC 1515 implementations.";
  };

  group rpMauNotifications {
    oid             mauModNotGrps.1;
    members         (rpMauJabberTrap);
    description     
        "Notifications for repeater MAUs.";
  };

  group ifMauNotifications {
    oid             mauModNotGrps.2;
    members         (ifMauJabberTrap);
    description     
        "Notifications for interface MAUs.";
  };

//
// COMPLIANCE DEFINITIONS
//

  compliance mauModRpCompl {
    oid             mauModCompls.1;
    description     
        "Compliance for MAUs attached to repeater ports.";

    mandatory       (mauRpGrpBasic);

    optional mauRpGrp100Mbs {
      description   
        "Implementation of this optional group is
         recommended for MAUs which have 100Mb/s
         capability.";
    };
    optional mauRpGrpJack {
      description   
        "Implementation of this optional group is
         recommended for MAUs which have one or more
         external jacks.";
    };
    optional rpMauNotifications {
      description   
        "Implementation of this group is
         recommended for MAUs attached to repeater
         ports.";
    };
  };

  compliance mauModIfCompl {
    oid             mauModCompls.2;
    description     
        "Compliance for MAUs attached to interfaces.";

    mandatory       (mauIfGrpBasic);

    optional mauIfGrp100Mbs {
      description   
        "Implementation of this optional group is
         recommended for MAUs which have 100Mb/s
         capability.";
    };
    optional mauIfGrpJack {
      description   
        "Implementation of this optional group is
         recommended for MAUs which have one or more
         external jacks.";
    };
    optional mauIfGrpAutoNeg {
      description   
        "Implementation of this group is
         mandatory for MAUs which support
         managed auto-negotiation.";
    };
    optional mauBroadBasic {
      description   
        "Implementation of this group is
         mandatory for broadband MAUs.";
    };
    optional ifMauNotifications {
      description   
        "Implementation of this group is
         recommended for MAUs attached to
         interfaces.";
    };
  };

}; // end of module MAU-MIB.
