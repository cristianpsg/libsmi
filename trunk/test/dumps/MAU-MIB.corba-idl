/*
 * This CORBA IDL file has been generated by smidump 0.1.7-pre13. Do not edit.
 */

#ifndef _MAU_MIB_IDL_
#define _MAU_MIB_IDL_

#include <ASN1Types.idl>
#include <SNMPMgmt.idl>
#include <SNMPv2_SMI.idl>
#include <SNMPv2_TC.idl>

module MAU_MIB {

    typedef SNMPv2_SMI::Counter32Type Counter32Type;
    typedef SNMPv2_SMI::Integer32Type Integer32Type;
    typedef SNMPv2_TC::TruthValueType TruthValueType;

    const string moduleIdentity = "mauMod";
    const ASN1_ObjectIdentifier mauMod = "::MAU_MIB::mauMod";

    /*
             Management information for 802.3 MAUs.
             
             The following references are used throughout this
             MIB module:
             
             [IEEE 802.3 Std]
               refers to IEEE 802.3/ISO 8802-3 Information
               processing systems - Local area networks -
               Part 3: Carrier sense multiple access with
               collision detection (CSMA/CD) access method
               and physical layer specifications (1993),
               and to IEEE Std 802.3u-1995, Supplement to
               IEEE Std 802.3, clauses 22 through 29.
             
             [IEEE 802.3 Mgt]
               refers to IEEE 802.3u-1995, - 10 Mb/s &
               100 Mb/s Management, Section 30 -
               Supplement to IEEE Std 802.3.

    LAST-UPDATED:   197001010000Z    ORGANIZATION:
            "IETF HUB MIB Working Group"

    CONTACT-INFO:
            "WG E-mail: hubmib@hprnd.rose.hp.com
             
                 Chair: Dan Romascanu
                Postal: Madge Networks (Israel) Ltd.
                        Atidim Technology Park, Bldg. 3
                        Tel Aviv 61131, Israel
                   Tel: 972-3-6458414, 6458458
                   Fax: 972-3-6487146
                E-mail: dromasca@madge.com
             
                Editor: Kathryn de Graaf
                Postal: 3Com Corporation
                        118 Turnpike Rd.
                        Southborough, MA  01772
                        USA
                   Tel: (508)229-1627
                   Fax: (508)490-5882
                E-mail: kdegraaf@isd.3com.com"

    */

    /*
             Common enumeration values for repeater and
             interface MAU jack types.
    */
    typedef ASN1_Integer JackTypeType; 
    const JackTypeType JackTypeType_other = 1;
    const JackTypeType JackTypeType_rj45 = 2;
    const JackTypeType JackTypeType_rj45S = 3;
    const JackTypeType JackTypeType_db9 = 4;
    const JackTypeType JackTypeType_bnc = 5;
    const JackTypeType JackTypeType_fAUI = 6;
    const JackTypeType JackTypeType_mAUI = 7;
    const JackTypeType JackTypeType_fiberSC = 8;
    const JackTypeType JackTypeType_fiberMIC = 9;
    const JackTypeType JackTypeType_fiberST = 10;
    const JackTypeType JackTypeType_telco = 11;
    const string JackTypeType_NameNumberList = "other (1) , rj45 (2) , rj45S (3) , db9 (4) , bnc (5) , fAUI (6) , mAUI (7) , fiberSC (8) , fiberMIC (9) , fiberST (10) , telco (11)";


    typedef ASN1_Integer RpMauGroupIndexType; 


    typedef ASN1_Integer RpMauPortIndexType; 


    typedef ASN1_Integer RpMauIndexType; 


    typedef ASN1_Integer RpMauStatusType; 
    const RpMauStatusType RpMauStatusType_other = 1;
    const RpMauStatusType RpMauStatusType_unknown = 2;
    const RpMauStatusType RpMauStatusType_operational = 3;
    const RpMauStatusType RpMauStatusType_standby = 4;
    const RpMauStatusType RpMauStatusType_shutdown = 5;
    const RpMauStatusType RpMauStatusType_reset = 6;
    const string RpMauStatusType_NameNumberList = "other (1) , unknown (2) , operational (3) , standby (4) , shutdown (5) , reset (6)";


    typedef ASN1_Integer RpMauMediaAvailableType; 
    const RpMauMediaAvailableType RpMauMediaAvailableType_other = 1;
    const RpMauMediaAvailableType RpMauMediaAvailableType_unknown = 2;
    const RpMauMediaAvailableType RpMauMediaAvailableType_available = 3;
    const RpMauMediaAvailableType RpMauMediaAvailableType_notAvailable = 4;
    const RpMauMediaAvailableType RpMauMediaAvailableType_remoteFault = 5;
    const RpMauMediaAvailableType RpMauMediaAvailableType_invalidSignal = 6;
    const RpMauMediaAvailableType RpMauMediaAvailableType_remoteJabber = 7;
    const RpMauMediaAvailableType RpMauMediaAvailableType_remoteLinkLoss = 8;
    const RpMauMediaAvailableType RpMauMediaAvailableType_remoteTest = 9;
    const string RpMauMediaAvailableType_NameNumberList = "other (1) , unknown (2) , available (3) , notAvailable (4) , remoteFault (5) , invalidSignal (6) , remoteJabber (7) , remoteLinkLoss (8) , remoteTest (9)";


    typedef ASN1_Integer RpMauJabberStateType; 
    const RpMauJabberStateType RpMauJabberStateType_other = 1;
    const RpMauJabberStateType RpMauJabberStateType_unknown = 2;
    const RpMauJabberStateType RpMauJabberStateType_noJabber = 3;
    const RpMauJabberStateType RpMauJabberStateType_jabbering = 4;
    const string RpMauJabberStateType_NameNumberList = "other (1) , unknown (2) , noJabber (3) , jabbering (4)";


    typedef ASN1_Integer RpJackIndexType; 


    typedef ASN1_Integer IfMauIfIndexType; 


    typedef ASN1_Integer IfMauIndexType; 


    typedef ASN1_Integer IfMauStatusType; 
    const IfMauStatusType IfMauStatusType_other = 1;
    const IfMauStatusType IfMauStatusType_unknown = 2;
    const IfMauStatusType IfMauStatusType_operational = 3;
    const IfMauStatusType IfMauStatusType_standby = 4;
    const IfMauStatusType IfMauStatusType_shutdown = 5;
    const IfMauStatusType IfMauStatusType_reset = 6;
    const string IfMauStatusType_NameNumberList = "other (1) , unknown (2) , operational (3) , standby (4) , shutdown (5) , reset (6)";


    typedef ASN1_Integer IfMauMediaAvailableType; 
    const IfMauMediaAvailableType IfMauMediaAvailableType_other = 1;
    const IfMauMediaAvailableType IfMauMediaAvailableType_unknown = 2;
    const IfMauMediaAvailableType IfMauMediaAvailableType_available = 3;
    const IfMauMediaAvailableType IfMauMediaAvailableType_notAvailable = 4;
    const IfMauMediaAvailableType IfMauMediaAvailableType_remoteFault = 5;
    const IfMauMediaAvailableType IfMauMediaAvailableType_invalidSignal = 6;
    const IfMauMediaAvailableType IfMauMediaAvailableType_remoteJabber = 7;
    const IfMauMediaAvailableType IfMauMediaAvailableType_remoteLinkLoss = 8;
    const IfMauMediaAvailableType IfMauMediaAvailableType_remoteTest = 9;
    const string IfMauMediaAvailableType_NameNumberList = "other (1) , unknown (2) , available (3) , notAvailable (4) , remoteFault (5) , invalidSignal (6) , remoteJabber (7) , remoteLinkLoss (8) , remoteTest (9)";


    typedef ASN1_Integer IfMauJabberStateType; 
    const IfMauJabberStateType IfMauJabberStateType_other = 1;
    const IfMauJabberStateType IfMauJabberStateType_unknown = 2;
    const IfMauJabberStateType IfMauJabberStateType_noJabber = 3;
    const IfMauJabberStateType IfMauJabberStateType_jabbering = 4;
    const string IfMauJabberStateType_NameNumberList = "other (1) , unknown (2) , noJabber (3) , jabbering (4)";


    typedef ASN1_Integer IfJackIndexType; 


    typedef ASN1_Integer BroadMauIfIndexType; 


    typedef ASN1_Integer BroadMauIndexType; 


    typedef ASN1_Integer BroadMauXmtRcvSplitTypeType; 
    const BroadMauXmtRcvSplitTypeType BroadMauXmtRcvSplitTypeType_other = 1;
    const BroadMauXmtRcvSplitTypeType BroadMauXmtRcvSplitTypeType_single = 2;
    const BroadMauXmtRcvSplitTypeType BroadMauXmtRcvSplitTypeType_dual = 3;
    const string BroadMauXmtRcvSplitTypeType_NameNumberList = "other (1) , single (2) , dual (3)";


    typedef ASN1_Integer IfMauAutoNegAdminStatusType; 
    const IfMauAutoNegAdminStatusType IfMauAutoNegAdminStatusType_enabled = 1;
    const IfMauAutoNegAdminStatusType IfMauAutoNegAdminStatusType_disabled = 2;
    const string IfMauAutoNegAdminStatusType_NameNumberList = "enabled (1) , disabled (2)";


    typedef ASN1_Integer IfMauAutoNegRemoteSignalingType; 
    const IfMauAutoNegRemoteSignalingType IfMauAutoNegRemoteSignalingType_detected = 1;
    const IfMauAutoNegRemoteSignalingType IfMauAutoNegRemoteSignalingType_notdetected = 2;
    const string IfMauAutoNegRemoteSignalingType_NameNumberList = "detected (1) , notdetected (2)";


    typedef ASN1_Integer IfMauAutoNegConfigType; 
    const IfMauAutoNegConfigType IfMauAutoNegConfigType_other = 1;
    const IfMauAutoNegConfigType IfMauAutoNegConfigType_configuring = 2;
    const IfMauAutoNegConfigType IfMauAutoNegConfigType_complete = 3;
    const IfMauAutoNegConfigType IfMauAutoNegConfigType_disabled = 4;
    const IfMauAutoNegConfigType IfMauAutoNegConfigType_parallelDetectFail = 5;
    const string IfMauAutoNegConfigType_NameNumberList = "other (1) , configuring (2) , complete (3) , disabled (4) , parallelDetectFail (5)";


    typedef ASN1_Integer IfMauAutoNegRestartType; 
    const IfMauAutoNegRestartType IfMauAutoNegRestartType_restart = 1;
    const IfMauAutoNegRestartType IfMauAutoNegRestartType_norestart = 2;
    const string IfMauAutoNegRestartType_NameNumberList = "restart (1) , norestart (2)";

    interface dot3RpMauBasicGroup : SNMPMgmt::SmiEntry {

        /*
             Table of descriptive and status information about
             the MAU(s) attached to the ports of a repeater.
        */
        SNMPMgmt::SmiTableIterator get_rpMauTable();

        /*
             Information about the external jacks attached to
             MAUs attached to the ports of a repeater.
        */
        SNMPMgmt::SmiTableIterator get_rpJackTable();
    };


    /*
             An entry in the table, containing information
             about a single MAU.
    */
    interface rpMauEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "rpMauGroupIndex rpMauPortIndex rpMauIndex";

        /*
             This variable uniquely identifies the group
             containing the port to which the MAU described by
             this entry is connected.
             
             Note:  In practice, a group will generally be a
             field-replaceable unit (i.e., module, card, or
             board) that can fit in the physical system
             enclosure, and the group number will correspond to
             a number marked on the physical enclosure.
             
             The group denoted by a particular value of this
             object is the same as the group denoted by the
             same value of rptrGroupIndex.
        */
        readonly attribute RpMauGroupIndexType rpMauGroupIndex;

        /*
             This variable uniquely identifies the repeater
             port within group rpMauGroupIndex to which the MAU
             described by this entry is connected.
        REFERENCE:
            "Reference RFC 1516, rptrPortIndex."

        */
        readonly attribute RpMauPortIndexType rpMauPortIndex;

        /*
             This variable uniquely identifies the MAU
             described by this entry from among other MAUs
             connected to the same port (rpMauPortIndex).
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.1, aMAUID."

        */
        readonly attribute RpMauIndexType rpMauIndex;

        /*
             This object identifies the 10 or 100 Mb/s
             baseband MAU type.  An initial set of MAU types
             are defined above.  The assignment of OBJECT
             IDENTIFIERs to new types of MAUs is managed by the
             IANA.  If the MAU type is unknown, the object
             identifier
             
             unknownMauType OBJECT IDENTIFIER ::= { 0 0 }
             
             is returned.  Note that unknownMauType is a
             syntactically valid object identifier, and any
             conformant implementation of ASN.1 and the BER
             must be able to generate and recognize this
             value.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.2, aMAUType."

        */
        readonly attribute ASN1_ObjectIdentifier rpMauType;

        /*
             The current state of the MAU.  This object may be
             implemented as a read-only object by those agents
             and MAUs that do not implement software control of
             the MAU state.  Some agents may not support
             setting the value of this object to some of the
             enumerated values.
             
             The value other(1) is returned if the MAU is in a
             state other than one of the states 2 through 6.
             
             The value unknown(2) is returned when the MAU's
             true state is unknown; for example, when it is
             being initialized.
             
             A MAU in the operational(3) state is fully
             functional, operates, and passes signals to its
             attached DTE or repeater port in accordance to its
             specification.
             
             A MAU in standby(4) state forces DI and CI to idle
             and the media transmitter to idle or fault, if
             supported.  Standby(4) mode only applies to link
             type MAUs.  The state of rpMauMediaAvailable is
             unaffected.
             
             A MAU in shutdown(5) state assumes the same
             condition on DI, CI, and the media transmitter as
             though it were powered down or not connected.  The
             MAU may return other(1) value for the
             rpMauJabberState and rpMauMediaAvailable objects
             when it is in this state.  For an AUI, this state
             will remove power from the AUI.
             
             Setting this variable to the value reset(6) resets
             the MAU in the same manner as a power-off, power-
             on cycle of at least one-half second would.  The
             agent is not required to return the value reset
             (6).
             
             Setting this variable to the value operational(3),
             standby(4), or shutdown(5) causes the MAU to
             
             
             assume the respective state except that setting a
             mixing-type MAU or an AUI to standby(4) will cause
             the MAU to enter the shutdown state.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.7, aMAUAdminState,
             30.5.1.2.2, acMAUAdminControl, and 30.5.1.2.1,
             acRESETMAU."

        */
        attribute RpMauStatusType rpMauStatus;

        /*
             If the MAU is a link or fiber type (FOIRL,
             10BASE-T, 10BASE-F) then this is equivalent to the
             link test fail state/low light function.  For an
             AUI or a coax (including broadband) MAU this
             indicates whether or not loopback is detected on
             the DI circuit.  The value of this attribute
             persists between packets for MAU types AUI,
             10BASE5, 10BASE2, 10BROAD36, and 10BASE-FP.
             
             The value other(1) is returned if the
             mediaAvailable state is not one of 2 through 6.
             
             The value unknown(2) is returned when the MAU's
             true state is unknown; for example, when it is
             being initialized.  At power-up or following a
             reset, the value of this attribute will be unknown
             for AUI, coax, and 10BASE-FP MAUs.  For these MAUs
             loopback will be tested on each transmission
             during which no collision is detected.  If DI is
             receiving input when DO returns to IDL after a
             transmission and there has been no collision
             during the transmission then loopback will be
             detected.  The value of this attribute will only
             change during non-collided transmissions for AUI,
             
             
             coax, and 10BASE-FP MAUs.
             
             For 100BASE-T4, 100BASE-TX and 100BASE-FX the
             enumerations match the states within the
             respective link integrity state diagrams, fig 23-
             12 and 24-15 of sections 23 and 24 of [2].  Any
             MAU which implements management of auto-
             negotiation will map remote fault indication to
             remote fault.
             
             The value available(3) indicates that the link,
             light, or loopback is normal.  The value
             notAvailable(4) indicates link loss, low light, or
             no loopback.
             
             The value remoteFault(5) indicates that a fault
             has been detected at the remote end of the link.
             This value applies to 10BASE-FB, 100BASE-T4 Far
             End Fault Indication and non-specified remote
             faults from a system running auto-negotiation.
             The values remoteJabber(7), remoteLinkLoss(8), and
             remoteTest(9) should be used instead of
             remoteFault(5) where the reason for remote fault
             is identified in the remote signaling protocol.
             
             The value invalidSignal(6) indicates that an
             invalid signal has been received from the other
             end of the link.  InvalidSignal(6) applies only to
             MAUs of type 10BASE-FB.
             
             Where an IEEE Std 802.3u-1995 clause 22 MII is
             present, a logic one in the remote fault bit
             (reference section 22.2.4.2.8 of that document)
             maps to the value remoteFault(5), and a logic zero
             in the link status bit (reference section
             22.2.4.2.10 of that document) maps to the value
             notAvailable(4).  The value notAvailable(4) takes
             precedence over the value remoteFault(5).
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.4, aMediaAvailable."

        */
        readonly attribute RpMauMediaAvailableType rpMauMediaAvailable;

        /*
             A count of the number of times that
             
             
             rpMauMediaAvailable for this MAU instance leaves
             the state available(3).
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.5, aLoseMediaCounter."

        */
        readonly attribute Counter32 rpMauMediaAvailableStateExits;

        /*
             The value other(1) is returned if the jabber
             state is not 2, 3, or 4.  The agent must always
             return other(1) for MAU type dot3MauTypeAUI.
             
             The value unknown(2) is returned when the MAU's
             true state is unknown; for example, when it is
             being initialized.
             
             If the MAU is not jabbering the agent returns
             noJabber(3).  This is the 'normal' state.
             
             If the MAU is in jabber state the agent returns
             the jabbering(4) value.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.6,
             aJabber.jabberFlag."

        */
        readonly attribute RpMauJabberStateType rpMauJabberState;

        /*
             A count of the number of times that
             mauJabberState for this MAU instance enters the
             state jabbering(4).  For MAUs of type
             dot3MauTypeAUI, dot3MauType100BaseT4,
             dot3MauType100BaseTX, and dot3MauType100BaseFX,
             this counter will always indicate zero.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.6,
             aJabber.jabberCounter."

        */
        readonly attribute Counter32 rpMauJabberingStateEnters;

        /*
             A count of the number of false carrier events
             during IDLE in 100BASE-X links.  This counter does
             not increment at the symbol rate.  It can
             increment after a valid carrier completion at a
             maximum rate of once per 100 ms until the next
             carrier event.
             
             This counter increments only for MAUs of type
             dot3MauType100BaseT4, dot3MauType100BaseTX, and
             dot3MauType100BaseFX.  For all other MAU types,
             this counter will always indicate zero.
             
             The approximate minimum time for rollover of this
             counter is 7.4 hours.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.10, aFalseCarriers."

        */
        readonly attribute Counter32 rpMauFalseCarriers;
    };


    /*
             An entry in the table, containing information
             about a particular jack.
    */
    interface rpJackEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "rpMauGroupIndex rpMauPortIndex rpMauIndex rpJackIndex";

        /*
             The jack connector type, as it appears on the
             outside of the system.
        */
        readonly attribute JackType rpJackType;
    };

    interface dot3IfMauBasicGroup : SNMPMgmt::SmiEntry {

        /*
             Table of descriptive and status information about
             MAU(s) attached to an interface.
        */
        SNMPMgmt::SmiTableIterator get_ifMauTable();

        /*
             Information about the external jacks attached to
             MAUs attached to an interface.
        */
        SNMPMgmt::SmiTableIterator get_ifJackTable();
    };


    /*
             An entry in the table, containing information
             about a single MAU.
    */
    interface ifMauEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "ifMauIfIndex ifMauIndex";

        /*
             This variable uniquely identifies the interface
             to which the MAU described by this entry is
             connected.
        REFERENCE:
            "RFC 1213, ifIndex"

        */
        readonly attribute IfMauIfIndexType ifMauIfIndex;

        /*
             This variable uniquely identifies the MAU
             described by this entry from among other MAUs
             connected to the same interface (ifMauIfIndex).
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.1, aMAUID."

        */
        readonly attribute IfMauIndexType ifMauIndex;

        /*
             This object identifies the 10 or 100 Mb/s
             baseband or broadband MAU type.  An initial set of
             MAU types are defined above.  The assignment of
             OBJECT IDENTIFIERs to new types of MAUs is managed
             by the IANA.  If the MAU type is unknown, the
             object identifier
             
             unknownMauType OBJECT IDENTIFIER ::= { 0 0 }
             
             is returned.  Note that unknownMauType is a
             syntactically valid object identifier, and any
             conformant implementation of ASN.1 and the BER
             must be able to generate and recognize this value.
             
             This object represents the operational type of the
             MAU, as determined by either (1) the result of the
             auto-negotiation function or (2) if auto-
             negotiation is not enabled or is not implemented
             for this MAU, by the value of the object
             ifMauDefaultType.  In case (2), a set to the
             object ifMauDefaultType will force the MAU into
             the new operating mode.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.2, aMAUType."

        */
        readonly attribute ASN1_ObjectIdentifier ifMauType;

        /*
             The current state of the MAU.  This object may be
             implemented as a read-only object by those agents
             and MAUs that do not implement software control of
             the MAU state.  Some agents may not support
             setting the value of this object to some of the
             enumerated values.
             
             The value other(1) is returned if the MAU is in a
             state other than one of the states 2 through 6.
             
             The value unknown(2) is returned when the MAU's
             true state is unknown; for example, when it is
             being initialized.
             
             A MAU in the operational(3) state is fully
             functional, operates, and passes signals to its
             attached DTE or repeater port in accordance to its
             specification.
             
             A MAU in standby(4) state forces DI and CI to idle
             and the media transmitter to idle or fault, if
             supported.  Standby(4) mode only applies to link
             type MAUs.  The state of ifMauMediaAvailable is
             unaffected.
             
             A MAU in shutdown(5) state assumes the same
             condition on DI, CI, and the media transmitter as
             though it were powered down or not connected.  The
             MAU may return other(1) value for the
             ifMauJabberState and ifMauMediaAvailable objects
             when it is in this state.  For an AUI, this state
             will remove power from the AUI.
             
             Setting this variable to the value reset(6) resets
             the MAU in the same manner as a power-off, power-
             on cycle of at least one-half second would.  The
             agent is not required to return the value reset
             (6).
             
             Setting this variable to the value operational(3),
             standby(4), or shutdown(5) causes the MAU to
             
             
             assume the respective state except that setting a
             mixing-type MAU or an AUI to standby(4) will cause
             the MAU to enter the shutdown state.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.7, aMAUAdminState,
             30.5.1.2.2, acMAUAdminControl, and 30.5.1.2.1,
             acRESETMAU."

        */
        attribute IfMauStatusType ifMauStatus;

        /*
             If the MAU is a link or fiber type (FOIRL,
             10BASE-T, 10BASE-F) then this is equivalent to the
             link test fail state/low light function.  For an
             AUI or a coax (including broadband) MAU this
             indicates whether or not loopback is detected on
             the DI circuit.  The value of this attribute
             persists between packets for MAU types AUI,
             10BASE5, 10BASE2, 10BROAD36, and 10BASE-FP.
             
             The value other(1) is returned if the
             mediaAvailable state is not one of 2 through 6.
             
             The value unknown(2) is returned when the MAU's
             true state is unknown; for example, when it is
             being initialized.  At power-up or following a
             reset, the value of this attribute will be unknown
             for AUI, coax, and 10BASE-FP MAUs.  For these MAUs
             loopback will be tested on each transmission
             during which no collision is detected.  If DI is
             receiving input when DO returns to IDL after a
             transmission and there has been no collision
             during the transmission then loopback will be
             detected.  The value of this attribute will only
             change during non-collided transmissions for AUI,
             
             
             coax, and 10BASE-FP MAUs.
             
             For 100BASE-T4, 100BASE-TX and 100BASE-FX the
             enumerations match the states within the
             respective link integrity state diagrams, fig 23-
             12 and 24-15 of sections 23 and 24 of [2].  Any
             MAU which implements management of auto-
             negotiation will map remote fault indication to
             remote fault.
             
             The value available(3) indicates that the link,
             light, or loopback is normal.  The value
             notAvailable(4) indicates link loss, low light, or
             no loopback.
             
             The value remoteFault(5) indicates that a fault
             has been detected at the remote end of the link.
             This value applies to 10BASE-FB, 100BASE-T4 Far
             End Fault Indication and non-specified remote
             faults from a system running auto-negotiation.
             The values remoteJabber(7), remoteLinkLoss(8), and
             remoteTest(9) should be used instead of
             remoteFault(5) where the reason for remote fault
             is identified in the remote signaling protocol.
             
             The value invalidSignal(6) indicates that an
             invalid signal has been received from the other
             end of the link.  InvalidSignal(6) applies only to
             MAUs of type 10BASE-FB.
             
             Where an IEEE Std 802.3u-1995 clause 22 MII is
             present, a logic one in the remote fault bit
             (reference section 22.2.4.2.8 of that document)
             maps to the value remoteFault(5), and a logic zero
             in the link status bit (reference section
             22.2.4.2.10 of that document) maps to the value
             notAvailable(4).  The value notAvailable(4) takes
             precedence over the value remoteFault(5).
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.4, aMediaAvailable."

        */
        readonly attribute IfMauMediaAvailableType ifMauMediaAvailable;

        /*
             A count of the number of times that
             
             
             ifMauMediaAvailable for this MAU instance leaves
             the state available(3).
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.5, aLoseMediaCounter."

        */
        readonly attribute Counter32 ifMauMediaAvailableStateExits;

        /*
             The value other(1) is returned if the jabber
             state is not 2, 3, or 4.  The agent must always
             return other(1) for MAU type dot3MauTypeAUI.
             
             The value unknown(2) is returned when the MAU's
             true state is unknown; for example, when it is
             being initialized.
             
             If the MAU is not jabbering the agent returns
             noJabber(3).  This is the 'normal' state.
             
             If the MAU is in jabber state the agent returns
             the jabbering(4) value.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.6,
             aJabber.jabberFlag."

        */
        readonly attribute IfMauJabberStateType ifMauJabberState;

        /*
             A count of the number of times that
             mauJabberState for this MAU instance enters the
             state jabbering(4).  For MAUs of type
             dot3MauTypeAUI, dot3MauType100BaseT4,
             dot3MauType100BaseTX, and dot3MauType100BaseFX,
             this counter will always indicate zero.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.6,
             aJabber.jabberCounter."

        */
        readonly attribute Counter32 ifMauJabberingStateEnters;

        /*
             A count of the number of false carrier events
             during IDLE in 100BASE-X links.  This counter does
             not increment at the symbol rate.  It can
             increment after a valid carrier completion at a
             maximum rate of once per 100 ms until the next
             carrier event.
             
             This counter increments only for MAUs of type
             dot3MauType100BaseT4, dot3MauType100BaseTX, and
             dot3MauType100BaseFX.  For all other MAU types,
             this counter will always indicate zero.
             
             The approximate minimum time for rollover of this
             counter is 7.4 hours.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.10, aFalseCarriers."

        */
        readonly attribute Counter32 ifMauFalseCarriers;

        /*
             A value that uniquely identifies the set of
             possible IEEE 802.3 types that the MAU could be.
             The value is a sum which initially takes the value
             zero.  Then, for each type capability of this MAU,
             2 raised to the power noted below is added to the
             sum. For example, a MAU which has the capability
             to be only 10BASE-T would have a value of 512
             (2**9).  In contrast, a MAU which supports both
             10Base-T (full duplex) and 100BASE-TX (full
             duplex) would have a value of ((2**11) + (2**16))
             or 67584.
             
             The powers of 2 assigned to the capabilities are
             these:
             
             Power  Capability
              0      other or unknown
              1      AUI
             
             
              2      10BASE-5
              3      FOIRL
              4      10BASE-2
              5      10BASE-T duplex mode unknown
              6      10BASE-FP
              7      10BASE-FB
              8      10BASE-FL duplex mode unknown
              9      10BROAD36
             10      10BASE-T  half duplex mode
             11      10BASE-T  full duplex mode
             12      10BASE-FL half duplex mode
             13      10BASE-FL full duplex mode
             14      100BASE-T4
             15      100BASE-TX half duplex mode
             16      100BASE-TX full duplex mode
             17      100BASE-FX half duplex mode
             18      100BASE-FX full duplex mode
             19      100BASE-T2 half duplex mode
             20      100BASE-T2 full duplex mode
             
             If auto-negotiation is present on this MAU, this
             object will map to ifMauAutoNegCapability.
        */
        readonly attribute Integer32 ifMauTypeList;

        /*
             This object identifies the default administrative
             10 or 100 Mb/s baseband MAU type, to be used in
             conjunction with the operational MAU type denoted
             by ifMauType.
             
             The set of possible values for this object is the
             same as the set defined for the ifMauType object.
             
             This object represents the administratively-
             configured type of the MAU.  If auto-negotiation
             is not enabled or is not implemented for this MAU,
             the value of this object determines the
             operational type of the MAU.  In this case, a set
             to this object will force the MAU into the
             specified operating mode.
             
             If auto-negotiation is implemented and enabled for
             this MAU, the operational type of the MAU is
             
             
             determined by auto-negotiation, and the value of
             this object denotes the type to which the MAU will
             automatically revert if/when auto-negotiation is
             later disabled.
             
             NOTE TO IMPLEMENTORS:  It may be necessary to
             provide for underlying hardware implementations
             which do not follow the exact behavior specified
             above.  In particular, when
             ifMauAutoNegAdminStatus transitions from enabled
             to disabled, the agent implementation must ensure
             that the operational type of the MAU (as reported
             by ifMauType) correctly transitions to the value
             specified by this object, rather than continuing
             to operate at the value earlier determined by the
             auto-negotiation function.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.5.1.1.1, aMAUID, and [IEEE
             802.3 Std], 22.2.4.1.4."

        */
        attribute ASN1_ObjectIdentifier ifMauDefaultType;

        /*
             This object indicates whether or not auto-
             negotiation is supported on this MAU.
        */
        readonly attribute TruthValue ifMauAutoNegSupported;
    };


    /*
             An entry in the table, containing information
             about a particular jack.
    */
    interface ifJackEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "ifMauIfIndex ifMauIndex ifJackIndex";

        /*
             The jack connector type, as it appears on the
             outside of the system.
        */
        readonly attribute JackType ifJackType;
    };

    interface dot3BroadMauBasicGroup : SNMPMgmt::SmiEntry {

        /*
             Table of descriptive and status information about
             the broadband MAUs connected to interfaces.
        */
        SNMPMgmt::SmiTableIterator get_broadMauBasicTable();
    };


    /*
             An entry in the table, containing information
             about a single broadband MAU.
    */
    interface broadMauBasicEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "broadMauIfIndex broadMauIndex";

        /*
             This variable uniquely identifies the interface
             to which the MAU described by this entry is
             connected.
        REFERENCE:
            "Reference RFC 1213, ifIndex."

        */
        readonly attribute BroadMauIfIndexType broadMauIfIndex;

        /*
             This variable uniquely identifies the MAU
             connected to interface broadMauIfIndex that is
             described by this entry.
        REFERENCE:
            "Reference IEEE 802.3 MAU Mgt, 20.2.3.2, aMAUID."

        */
        readonly attribute BroadMauIndexType broadMauIndex;

        /*
             This object indicates the type of frequency
             multiplexing/cabling system used to separate the
             transmit and receive paths for the 10BROAD36 MAU.
             
             The value other(1) is returned if the split type
             is not either single or dual.
             
             The value single(2) indicates a single cable
             system.  The value dual(3) indicates a dual cable
             
             
             system, offset normally zero.
        REFERENCE:
            "Reference IEEE 802.3 MAU Mgt, 20.2.3.2,
             aBbMAUXmitRcvSplitType."

        */
        readonly attribute BroadMauXmtRcvSplitTypeType broadMauXmtRcvSplitType;

        /*
             This variable indicates the transmit carrier
             frequency of the 10BROAD36 MAU in MHz/4; that is,
             in units of 250 kHz.
        REFERENCE:
            "Reference IEEE 802.3 MAU Mgt, 20.2.3.2,
             aBroadbandFrequencies.xmitCarrierFrequency."

        */
        readonly attribute Integer32 broadMauXmtCarrierFreq;

        /*
             This variable indicates the translation offset
             frequency of the 10BROAD36 MAU in MHz/4; that is,
             in units of 250 kHz.
        REFERENCE:
            "Reference IEEE 802.3 MAU Mgt, 20.2.3.2,
             aBroadbandFrequencies.translationFrequency."

        */
        readonly attribute Integer32 broadMauTranslationFreq;
    };

    interface dot3IfMauAutoNegGroup : SNMPMgmt::SmiEntry {

        /*
             Configuration and status objects for the auto-
             negotiation function of MAUs attached to
             interfaces.
        */
        SNMPMgmt::SmiTableIterator get_ifMauAutoNegTable();
    };


    /*
             An entry in the table, containing configuration
             and status information for the auto-negotiation
             function of a particular MAU.
    */
    interface ifMauAutoNegEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "ifMauIfIndex ifMauIndex";

        /*
             Setting this object to enabled(1) will cause the
             interface which has the auto-negotiation signaling
             ability to be enabled.
             
             
             If the value of this object is disabled(2) then
             the interface will act as it would if it had no
             auto-negotiation signaling.  Under these
             conditions, an IEEE 802.3 MAU will immediately be
             forced to the state indicated by the value of the
             object ifMauDefaultType.
             
             NOTE TO IMPLEMENTORS:  When
             ifMauAutoNegAdminStatus transitions from enabled
             to disabled, the agent implementation must ensure
             that the operational type of the MAU (as reported
             by ifMauType) correctly transitions to the value
             specified by the ifMauDefaultType object, rather
             than continuing to operate at the value earlier
             determined by the auto-negotiation function.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.6.1.1.2, aAutoNegAdminState
             and 30.6.1.2.2, acAutoNegAdminControl."

        */
        attribute IfMauAutoNegAdminStatusType ifMauAutoNegAdminStatus;

        /*
             A value indicating whether the remote end of the
             link is using auto-negotiation signaling. It takes
             the value detected(1) if and only if, during the
             previous link negotiation, FLP Bursts were
             received.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.6.1.1.3,
             aAutoNegRemoteSignaling."

        */
        readonly attribute IfMauAutoNegRemoteSignalingType ifMauAutoNegRemoteSignaling;

        /*
             A value indicating the current status of the
             auto-negotiation process.  The enumeration
             parallelDetectFail(5) maps to a failure in
             parallel detection as defined in 28.2.3.1 of [IEEE
             802.3 Std].
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.6.1.1.4,
             aAutoNegAutoConfig."

        */
        readonly attribute IfMauAutoNegConfigType ifMauAutoNegConfig;

        /*
             A value that uniquely identifies the set of
             capabilities of the local auto-negotiation entity.
             The value is a sum which initially takes the value
             zero.  Then, for each capability of this
             interface, 2 raised to the power noted below is
             added to the sum. For example, an interface which
             has the capability to support only 100Base-TX half
             duplex would have a value of 32768 (2**15).  In
             contrast, an interface which supports both
             100Base-TX half duplex and and 100Base-TX full
             duplex would have a value of 98304 ((2**15) +
             (2**16)).
             
             The powers of 2 assigned to the capabilities are
             these:
             
             Power   Capability
              0       other or unknown
             (1-9)    (reserved)
             10       10BASE-T  half duplex mode
             11       10BASE-T  full duplex mode
             12       (reserved)
             13       (reserved)
             14       100BASE-T4
             15       100BASE-TX half duplex mode
             16       100BASE-TX full duplex mode
             17       (reserved)
             18       (reserved)
             19      100BASE-T2 half duplex mode
             20      100BASE-T2 full duplex mode
             
             Note that interfaces that support this MIB may
             
             
             have capabilities that extend beyond the scope of
             this MIB.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.6.1.1.5,
             aAutoNegLocalTechnologyAbility."

        */
        readonly attribute Integer32 ifMauAutoNegCapability;

        /*
             A value that uniquely identifies the set of
             capabilities advertised by the local auto-
             negotiation entity. Refer to
             ifMauAutoNegCapability for a description of the
             possible values of this object.
             
             Capabilities in this object that are not available
             in ifMauAutoNegCapability cannot be enabled.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.6.1.1.6,
             aAutoNegAdvertisedTechnologyAbility."

        */
        attribute Integer32 ifMauAutoNegCapAdvertised;

        /*
             A value that uniquely identifies the set of
             capabilities received from the remote auto-
             negotiation entity. Refer to
             ifMauAutoNegCapability for a description of the
             possible values of this object.
             
             Note that interfaces that support this MIB may be
             attached to remote auto-negotiation entities which
             have capabilities beyond the scope of this MIB.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.6.1.1.7,
             aAutoNegReceivedTechnologyAbility."

        */
        readonly attribute Integer32 ifMauAutoNegCapReceived;

        /*
             If the value of this object is set to restart(1)
             then this will force auto-negotiation to begin
             link renegotiation. If auto-negotiation signaling
             is disabled, a write to this object has no effect.
             
             Setting the value of this object to norestart(2)
             has no effect.
        REFERENCE:
            "[IEEE 802.3 Mgt], 30.6.1.2.1,
             acAutoNegRestartAutoConfig."

        */
        attribute IfMauAutoNegRestartType ifMauAutoNegRestart;
    };

    /* pseudo */
    interface TextualConventions {

        /*
             Common enumeration values for repeater and
             interface MAU jack types.
        */
        string JackTypeToString (in JackTypeType Value);
        JackTypeType JackTypeFromString (in string str);
    };

};

#endif /* !_MAU_MIB_IDL_ */
