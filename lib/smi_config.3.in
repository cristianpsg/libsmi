.\"
.\" $Id: smi_config.3.in,v 1.5 1999/12/10 19:29:21 strauss Exp $
.\"
.TH smi_config 3  "December 12, 1999" "IBR" "SMI Management Information Library"
.SH NAME
smiInit, smiSetErrorLevel, smiGetFlags, smiSetFlags,
smiLoadModule, smiGetPath, smiSetPath \- SMI library
configuration routines
.SH SYNOPSIS
.nf
.B #include <smi.h>
.RS
.RE
.sp
.BI "int smiInit(const char *" tag );
.RE
.sp
.BI "void smiSetErrorLevel(int " level );
.RE
.sp
.BI "int smiGetFlags();"
.RE
.sp
.BI "void smiSetFlags(int " userflags );
.RE
.sp
.BI "char *smiLoadModule(char *" module );
.RE
.sp
.BI "char *smiGetPath();"
.RE
.sp
.BI "int smiSetPath(char *" path );
.RE
.sp
.BI "int smiReadConfig(char *" filename ", const char *" tag );
.RE
.fi
.SH DESCRIPTION
These functions provide some initialization and adjustment operations
for the SMI library.
.PP
The \fBsmiInit()\fP function should be the first SMI function called
in an application. It initializes its internal structures. The string
\fItag\fP is used as an identifier to choose a set of configuration
options from the configuration files that are read at initialization
(see also \fBsmiReadConfig()\fP below).
\fBsmiInit()\fP returns zero on success, or otherwise a negative value.
.PP
The \fBsmiSetErrorLevel()\fP function sets the pedantic level (0-9) of
the SMI parsers of the SMI library, currently SMIv1/v2 and SMIng
(which might, but should not be turned off at library compile
time). The higher the level, the louder it complains. Values up to 3
should be regarded as errors, higher level could be interpreted as
warnings.  But note that this classification is some kind of personal
taste.  The default level is 0, since usually only MIB checkers want
to tune a higher level.
.PP
The \fBsmiGetFlags()\fP and \fBsmiSetFlags()\fP functions allow to
fetch, modify, and set some \fIuserflags\fP that control the SMI
library's behaviour.  If \fBSMI_ERRORS\fP is not set, no error messages
are printed at all to keep the SMI library totally quiet, which might
be mandatory for some applications. If \fBSMI_ERRORLINES\fP is set and
an error is printed, it is followed by two lines: the current source
module line and a second line that marks the current point in the line
above. If \fBSMI_STATS\fP is set and the error level is 9, the
library prints some module statistics. If \fBSMI_RECURSIVE\fP is set,
the library also complains about errors in modules that are read due
to import statements.
.PP
The \fBsmiLoadModule()\fP function specifies an additional MIB module by
\fImodule\fP that the application claims to know. Only after a
module is made known through this function, iterating retrieval
functions and retrieval functions without fully qualified identifiers
will return results from this module. \fBsmiLoadModule()\fP returns the
name of the loaded module, of NULL if it could not be loaded.
.PP
The \fBsmiGetPath()\fP and \fBsmiSetPath()\fP functions allow to
fetch, modify, and set the path that is used to search MIB modules.
\fBsmiGetPath()\fP returns a copy of the current search path in the
form "DIR1:DIR2:...", if NULL if no path is set.
The application should free this string if it is
no longer needed. \fBsmiSetPath()\fP sets the search path to
\fIpath\fP.
.PP
The \fBsmiReadConfig()\fP function reads the configuration file \fIfilename\fP.
By default, on startup the global configuration file and a user configuration
file are read implicitly, if present. Only the configuration file contents
matching the \fBtag\fP are recognized. If \fBtag\fP is NULL, only the general
configuration items of the `*' sections are read.
.SH "RETURN VALUES"
The functions \fBsmiLoadModule()\fP returns the
name of the loaded module, of NULL if it could not be loaded.
\fBsmiSetPath()\fP and \fBsmiSetPath()\fP return 0 on success, or a
negative value on
error. \fBsmiGetFlags()\fP returns the current set of flags.
\fBsmiGetPath()\fP returns a copy of the MIB module search path or NULL
if no path is set. Other functions are void.
.SH "MODULE LOCATIONS"
The SMI library may retrieve MIB modules from different kinds of
resources. Currently, SMIv1/v2 and SMIng module files are supported.
If in an \fBsmiLoadModule()\fP function call a module is specified by
a path name (identified by containing at least one dot or slash character),
this
is assumed to be the exact file to read. Otherwise, if a module is identified
by its plain module name, the correspondant file (either SMIv1/2 or
SMIng) is searched along a path, which is initialized by the \fBSMIPATH\fP
environment variable or by
@mibdir@ if \fBSMIPATH\fP is not set. This path can also be controlled
my the \fBsmiGetPath()\fP and \fBsmiSetPath()\fP functions (see above).
.PP
Files with a \fB.sming\fP
extension are expected to be SMIng module files. Files with a \fB.my\fP or
without any extension are expected to be SMIv1/v2 module files.
.SH "CONFIGURATION FILES"
The SMI library configuration files read at initialization and on demand
by \fBsmiReadConfig()\fP have a very simple line oriented syntax. Empty lines
and those starting with `#' are ignored. Other lines start with a command
followed by options dependent on the command.
.PP
The \fBsection\fP command is followed by a section name. This starts
a section with the given name. This section ends at the end of the file
or at the start of another section. Lines before the first \fBsection\fP
command and lines of a section named `*' belong a the default
section.
.PP
When the SMI library reads a configuration file it parses only the default
section and that section that matches the tag passed to \fBsmiInit()\fP
or \fBsmiReadConfig()\fP. If the tag is NULL, only the default section
is parsed. It is suggested to use program or package names as tags for
their initialization.
.PP
The \fBload\fP command is used to preload a given MIB module. If multiple
modules shall be preloaded, multiple \fBload\fP commands must be used.
.PP
Example configuration:
.nf
  #
  # $HOME/.smirc
  #
  section *
    load SNMPv2-SMI
    load SNMPv2-TC
    load SNMPv2-CONF
  section smiquery
    load IF-MIB
    load DISMAN-SCRIPT-MIB
.fi
.SH "FILES"
.nf
@prefix@/etc/smi.conf    global configuration file
$HOME/.smirc               user configuration file
@prefix@/include/smi.h   SMI library header file
@mibdir@/     SMI module repository directory
.fi
.SH "SEE ALSO"
.BR libsmi "(3), "
.BR smi.h
.SH "AUTHOR"
(C) 1999 Frank Strauss, TU Braunschweig, Germany <strauss@ibr.cs.tu-bs.de>
.br
