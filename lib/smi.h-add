/*
 * smi.h-add --
 *
 *      Additions to smi.h which are not RPC but libsmi API specific.
 *
 * Copyright (c) 1998 Technical University of Braunschweig.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * @(#) $Id: smi.h-add,v 1.3 1999/03/16 17:24:11 strauss Exp $
 */

#ifndef _SMI_H_ADD
#define _SMI_H_ADD

#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>

#define SMI_CONFIG_FILE         "/usr/local/etc/smi.conf"

#define SMI_NAMESPACE_OPERATOR	"::"

#define SMI_VIEWALL     0x0800  /* all modules are `known', need no views. */
#define SMI_ERRORS      0x1000  /* print parser errors. */
#define SMI_ERRORLINES  0x2000  /* print error line contents of modules. */
#define SMI_STATS       0x4000  /* print statistics after parsing a module. */
#define SMI_RECURSIVE   0x8000  /* recursively parse imported modules. */
#define SMI_FLAGMASK    (SMI_VIEWALL|SMI_STATS|SMI_RECURSIVE|SMI_ERRORS|SMI_ERRORLINES)


#define smiStringAccess(access) ( \
	(access == SMI_ACCESS_NOT_ACCESSIBLE) ? "not-accessible" : \
	(access == SMI_ACCESS_NOTIFY)	      ? "accessible-for-notify" : \
	(access == SMI_ACCESS_READ_ONLY)      ? "read-only" : \
	(access == SMI_ACCESS_READ_WRITE)     ? "read-write" : \
	(access == SMI_ACCESS_READ_CREATE)    ? "read-create" : \
	(access == SMI_ACCESS_WRITE_ONLY)     ? "write-only" : \
						"<unknown>" )

#define smiStringStatus(status) ( \
	(status == SMI_STATUS_CURRENT)     ? "current" : \
	(status == SMI_STATUS_DEPRECATED)  ? "deprecated" : \
	(status == SMI_STATUS_OBSOLETE)    ? "obsolete" : \
	(status == SMI_STATUS_MANDATORY)   ? "mandatory" : \
	(status == SMI_STATUS_OPTIONAL)    ? "optional" : \
					     "<unknown>" )

#define smiStringDecl(macro) ( \
	(macro == SMI_DECL_UNKNOWN)           ? "<UNKNOWN>" : \
	(macro == SMI_DECL_TYPEASSIGNMENT)    ? "<TYPE-ASSIGNMENT>" : \
	(macro == SMI_DECL_VALUEASSIGNMENT)   ? "<VALUE-ASSIGNMENT>" : \
	(macro == SMI_DECL_OBJECTTYPE)        ? "OBJECT-TYPE" : \
	(macro == SMI_DECL_OBJECTIDENTITY)    ? "OBJECT-IDENTITY" : \
	(macro == SMI_DECL_MODULEIDENTITY)    ? "MODULE-IDENTITY" : \
	(macro == SMI_DECL_NOTIFICATIONTYPE)  ? "NOTIFICATIONTYPE" : \
	(macro == SMI_DECL_TRAPTYPE)          ? "TRAP-TYPE" : \
	(macro == SMI_DECL_OBJECTGROUP)       ? "OBJECT-GROUP" : \
	(macro == SMI_DECL_NOTIFICATIONGROUP) ? "NOTIFICATION-GROUP" : \
	(macro == SMI_DECL_MODULECOMPLIANCE)  ? "MODULE-COMPLIANCE" : \
	(macro == SMI_DECL_AGENTCAPABILITIES) ? "AGENT-CAPABILITIES" : \
	(macro == SMI_DECL_TEXTUALCONVENTION) ? "TEXTUAL-CONVENTION" : \
					        "<unknown>" )

#define smiStringSyntax(syntax) ( \
	(syntax == SMI_SYNTAX_UNKNOWN)           ? "<UNKNOWN>" : \
	(syntax == SMI_SYNTAX_INTEGER32)         ? "INTEGER" : \
	(syntax == SMI_SYNTAX_OCTETSTRING)       ? "OCTET STRING" : \
	(syntax == SMI_SYNTAX_OBJECTIDENTIFIER)  ? "OBJECT IDENTIFIER" : \
	(syntax == SMI_SYNTAX_SEQUENCE)          ? "SEQUENCE" : \
	(syntax == SMI_SYNTAX_SEQUENCEOF)        ? "SEQUENCE OF" : \
	(syntax == SMI_SYNTAX_IPADDRESS)         ? "IpAddress" : \
	(syntax == SMI_SYNTAX_COUNTER32)         ? "Counter32" : \
	(syntax == SMI_SYNTAX_GAUGE32)           ? "Gauge32" : \
	(syntax == SMI_SYNTAX_UNSIGNED32)        ? "Unsigned32" : \
	(syntax == SMI_SYNTAX_TIMETICKS)         ? "TimeTicks" : \
	(syntax == SMI_SYNTAX_OPAQUE)            ? "Opaque" : \
	(syntax == SMI_SYNTAX_COUNTER64)         ? "Counter64" : \
	(syntax == SMI_SYNTAX_CHOICE)            ? "CHOICE" : \
					           "<unknown>" )


extern time_t smiMkTime(const char *s);

extern char *smiModule(smi_fullname smiFullname);

extern char *smiDescriptor(smi_fullname smiFullname);

extern int smiIsImported(smi_descriptor modulename,
			 smi_fullname fullname);

extern void smiInit();

extern void smiSetDebugLevel(int level);

extern void smiSetErrorLevel(int level);

extern void smiSetFlags(int userflags);

extern int smiGetFlags();

extern int smiReadConfig(const char *file);

extern int smiAddLocation(const char *location);

extern int smiLoadModule(smi_descriptor modulename);

/*
 * Functions similar to those in smi.x.
 *
 * Where the RPC calls expect fullnames, here the `name' argument may
 * be the single descriptor name and the `module' may contain the
 * module name. Otherwise, when `name' contains the whole name in the
 * form `Module.Descriptor', `module' has to be NULL.
 */

extern smi_module *smiGetModule(smi_descriptor spec);

extern smi_node *smiGetNode(smi_fullname spec,
			    smi_descriptor mod);

extern smi_type *smiGetType(smi_fullname spec,
			    smi_descriptor mod);

extern smi_macro *smiGetMacro(smi_fullname spec,
			      smi_descriptor mod);

extern smi_namelist *smiGetNames(smi_fullname spec,
				 smi_descriptor mod);

extern smi_namelist *smiGetChildren(smi_fullname spec,
				    smi_descriptor mod);

extern smi_namelist *smiGetMembers(smi_fullname spec,
				   smi_descriptor mod);

extern smi_fullname smiGetParent(smi_fullname spec,
			 	 smi_descriptor mod);

/*
 * TODO: status and (cache-)config functions ?
 */

extern int smi_svc_init(int argc, char *argv[]);

#endif /* _SMI_H_ADD */
