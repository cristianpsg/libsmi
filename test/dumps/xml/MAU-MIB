<?xml version="1.0"?>
<!DOCTYPE smi SYSTEM "http://www.ibr.cs.tu-bs.de/projects/nmrg/smi.dtd">

<!-- This module has been generated by smidump 0.3.0. Do not edit. -->

<smi xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="http://www.ibr.cs.tu-bs.de/projects/nmrg/smi.xsd">
  <module name="MAU-MIB" language="SMIv2">
    <organization>  
        IETF Ethernet Interfaces and Hub MIB
        Working Group
    </organization>
    <contact>       
        WG E-mail: hubmib@hprnd.rose.hp.com
        To subscribe: hubmib-request@hprnd.rose.hp.com
        
               Chair: Dan Romascanu
              Postal: Lucent Technologies
                      Atidim Technology Park, Bldg. 3
                      Tel Aviv 61131
                      Israel
                 Tel: +972 3 645 8414, 6458458
                 Fax: +972 3 648 7146
              E-mail: dromasca@lucent.com
        
             Editors: Andrew Smith
              Postal: Extreme Networks, Inc.
                      10460 Bandley Drive
                      Cupertino, CA 95014
                      USA
                 Tel: +1 408 579-2821
              E-mail: andrew@extremenetworks.com
        
                      John Flick
              Postal: Hewlett-Packard Company
                      8000 Foothills Blvd. M/S 5557
                     Roseville, CA 95747-5557
                     USA
                Tel: +1 916 785 4018
                Fax: +1 916 785 1199
             E-mail: johnf@rose.hp.com
                     Kathryn de Graaf
             Postal: Argon Networks
                     25 Porter Road
                     Littleton, MA  01460
                     USA
                Tel: +1 978 486 0665 x163
                Fax: +1 978 486 9379
             E-mail: kdegraaf@argon.com
    </contact>
    <description>
        Management information for 802.3 MAUs.
        
        The following reference is used throughout
        this MIB module:
        
        [IEEE 802.3 Std] refers to
           IEEE Std 802.3, 1998 Edition: 'Information
           technology - Telecommunications and
           information exchange between systems -
           Local and metropolitan area networks -
           Specific requirements - Part 3: Carrier
           sense multiple access with collision
           detection (CSMA/CD) access method and
           physical layer specifications',
           September 1998.
        
        Of particular interest is Clause 30, '10Mb/s,
        100Mb/s and 1000Mb/s Management'.
    </description>
    <revision date="1999-08-24 04:00">
      <description>
          This version published as RFC 2668. Updated
          to include support for 1000 Mb/sec
          MAUs and flow control negotiation.
      </description>
    </revision>
    <revision date="1997-10-31 00:00">
      <description>
          This version published as RFC 2239.
      </description>
    </revision>
    <revision date="1993-09-30 00:00">
      <description>
          Initial version, published as RFC 1515.
      </description>
    </revision>
    <identity node="mauMod"/>
  </module>

  <imports>
    <import module="SNMPv2-SMI" name="Counter32"/>
    <import module="SNMPv2-SMI" name="Integer32"/>
    <import module="SNMPv2-SMI" name="OBJECT-TYPE"/>
    <import module="SNMPv2-SMI" name="MODULE-IDENTITY"/>
    <import module="SNMPv2-SMI" name="NOTIFICATION-TYPE"/>
    <import module="SNMPv2-SMI" name="OBJECT-IDENTITY"/>
    <import module="SNMPv2-SMI" name="mib-2"/>
    <import module="SNMPv2-TC" name="TruthValue"/>
    <import module="SNMPv2-TC" name="TEXTUAL-CONVENTION"/>
    <import module="SNMPv2-CONF" name="OBJECT-GROUP"/>
    <import module="SNMPv2-CONF" name="MODULE-COMPLIANCE"/>
    <import module="SNMPv2-CONF" name="NOTIFICATION-GROUP"/>
  </imports>

  <typedefs>
    <typedef name="JackType" basetype="Enumeration" status="current">
      <namednumber name="other" number="1"/>
      <namednumber name="rj45" number="2"/>
      <namednumber name="rj45S" number="3"/>
      <namednumber name="db9" number="4"/>
      <namednumber name="bnc" number="5"/>
      <namednumber name="fAUI" number="6"/>
      <namednumber name="mAUI" number="7"/>
      <namednumber name="fiberSC" number="8"/>
      <namednumber name="fiberMIC" number="9"/>
      <namednumber name="fiberST" number="10"/>
      <namednumber name="telco" number="11"/>
      <namednumber name="mtrj" number="12"/>
      <namednumber name="hssdc" number="13"/>
      <description>
          Common enumeration values for repeater
          and interface MAU jack types.
      </description>
    </typedef>
  </typedefs>

  <nodes>
    <node name="snmpDot3MauMgt" oid="1.3.6.1.2.1.26">
    </node>
    <node name="snmpDot3MauTraps" oid="1.3.6.1.2.1.26.0">
    </node>
    <node name="dot3RpMauBasicGroup" oid="1.3.6.1.2.1.26.1">
    </node>
    <table name="rpMauTable" oid="1.3.6.1.2.1.26.1.1" status="current">
      <description>
          Table of descriptive and status information
          about the MAU(s) attached to the ports of a
          repeater.
      </description>
      <row name="rpMauEntry" oid="1.3.6.1.2.1.26.1.1.1" status="current">
        <linkage>
          <index module="MAU-MIB" name="rpMauGroupIndex"/>
          <index module="MAU-MIB" name="rpMauPortIndex"/>
          <index module="MAU-MIB" name="rpMauIndex"/>
        </linkage>
        <description>
            An entry in the table, containing information
            about a single MAU.
        </description>
        <column name="rpMauGroupIndex" oid="1.3.6.1.2.1.26.1.1.1.1" status="current">
          <syntax>
            <typedef basetype="Integer32">
              <range min="1" max="2147483647"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              This variable uniquely identifies the group
              containing the port to which the MAU described
              by this entry is connected.
              
              Note:  In practice, a group will generally be
              a field-replaceable unit (i.e., module, card,
              or board) that can fit in the physical system
              enclosure, and the group number will correspond
              to a number marked on the physical enclosure.
              
              The group denoted by a particular value of this
              object is the same as the group denoted by the
              same value of rptrGroupIndex.
          </description>
          <reference>
              Reference RFC 2108, rptrGroupIndex.
          </reference>
        </column>
        <column name="rpMauPortIndex" oid="1.3.6.1.2.1.26.1.1.1.2" status="current">
          <syntax>
            <typedef basetype="Integer32">
              <range min="1" max="2147483647"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              This variable uniquely identifies the repeater
              port within group rpMauGroupIndex to which the
              MAU described by this entry is connected.
          </description>
          <reference>
              Reference RFC 2108, rptrPortIndex.
          </reference>
        </column>
        <column name="rpMauIndex" oid="1.3.6.1.2.1.26.1.1.1.3" status="current">
          <syntax>
            <typedef basetype="Integer32">
              <range min="1" max="2147483647"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              This variable uniquely identifies the MAU
              described by this entry from among other
              MAUs connected to the same port
              (rpMauPortIndex).
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.1, aMAUID.
          </reference>
        </column>
        <column name="rpMauType" oid="1.3.6.1.2.1.26.1.1.1.4" status="current">
          <syntax>
            <type module="" name="ObjectIdentifier"/>
          </syntax>
          <access>readonly</access>
          <description>
              This object identifies the MAU type.  An
              initial set of MAU types are defined above.  The
              assignment of OBJECT IDENTIFIERs to new types of
              MAUs is managed by the IANA.  If the MAU type is
              unknown, the object identifier
              
              unknownMauType OBJECT IDENTIFIER ::= { 0 0 }
              
              is returned.  Note that unknownMauType is a
              syntactically valid object identifier, and any
              conformant implementation of ASN.1 and the BER
              must be able to generate and recognize this
              value.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.2, aMAUType.
          </reference>
        </column>
        <column name="rpMauStatus" oid="1.3.6.1.2.1.26.1.1.1.5" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="other" number="1"/>
              <namednumber name="unknown" number="2"/>
              <namednumber name="operational" number="3"/>
              <namednumber name="standby" number="4"/>
              <namednumber name="shutdown" number="5"/>
              <namednumber name="reset" number="6"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <description>
              The current state of the MAU.  This object MAY
              be implemented as a read-only object by those
              agents and MAUs that do not implement software
              control of the MAU state.  Some agents may not
              support setting the value of this object to some
              of the enumerated values.
              
              The value other(1) is returned if the MAU is in
              a state other than one of the states 2 through
              6.
              The value unknown(2) is returned when the MAU's
              true state is unknown; for example, when it is
              being initialized.
              
              A MAU in the operational(3) state is fully
              functional, operates, and passes signals to its
              attached DTE or repeater port in accordance to
              its specification.
              
              A MAU in standby(4) state forces DI and CI to
              idle and the media transmitter to idle or fault,
              if supported.  Standby(4) mode only applies to
              link type MAUs.  The state of
              rpMauMediaAvailable is unaffected.
              
              A MAU in shutdown(5) state assumes the same
              condition on DI, CI, and the media transmitter
              as though it were powered down or not connected.
              The MAU MAY return other(1) value for the
              rpMauJabberState and rpMauMediaAvailable objects
              when it is in this state.  For an AUI, this
              state will remove power from the AUI.
              
              Setting this variable to the value reset(6)
              resets the MAU in the same manner as a
              power-off, power-on cycle of at least one-half
              second would.  The agent is not required to
              return the value reset (6).
              
              Setting this variable to the value
              operational(3), standby(4), or shutdown(5)
              causes the MAU to assume the respective state
              except that setting a mixing-type MAU or an AUI
              to standby(4) will cause the MAU to enter the
              shutdown state.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.7, aMAUAdminState,
              30.5.1.2.2, acMAUAdminControl, and 30.5.1.2.1,
              acResetMAU.
          </reference>
        </column>
        <column name="rpMauMediaAvailable" oid="1.3.6.1.2.1.26.1.1.1.6" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="other" number="1"/>
              <namednumber name="unknown" number="2"/>
              <namednumber name="available" number="3"/>
              <namednumber name="notAvailable" number="4"/>
              <namednumber name="remoteFault" number="5"/>
              <namednumber name="invalidSignal" number="6"/>
              <namednumber name="remoteJabber" number="7"/>
              <namednumber name="remoteLinkLoss" number="8"/>
              <namednumber name="remoteTest" number="9"/>
              <namednumber name="offline" number="10"/>
              <namednumber name="autoNegError" number="11"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              If the MAU is a link or fiber type (FOIRL,
              10BASE-T, 10BASE-F) then this is equivalent to
              the link test fail state/low light function.
              For an AUI or a coax (including broadband) MAU
              this indicates whether or not loopback is
              detected on the DI circuit.  The value of this
              attribute persists between packets for MAU types
              AUI, 10BASE5, 10BASE2, 10BROAD36, and 10BASE-FP.
              
              The value other(1) is returned if the
              mediaAvailable state is not one of 2 through 11.
              
              The value unknown(2) is returned when the MAU's
              true state is unknown; for example, when it is
              being initialized.  At power-up or following a
              reset, the value of this attribute will be
              unknown for AUI, coax, and 10BASE-FP MAUs.  For
              these MAUs loopback will be tested on each
              transmission during which no collision is
              detected.  If DI is receiving input when DO
              returns to IDL after a transmission and there
              has been no collision during the transmission
              then loopback will be detected.  The value of
              this attribute will only change during
              non-collided transmissions for AUI, coax, and
              10BASE-FP MAUs.
              
              For 100Mbps and 1000Mbps MAUs, the enumerations
              match the states within the respective link
              integrity state diagrams, fig 32-16, 23-12 and
              24-15 of sections 32, 23 and 24 of [16].  Any
              MAU which implements management of
              auto-negotiation will map remote fault
              indication to remote fault.
              
              The value available(3) indicates that the link,
              light, or loopback is normal.  The value
              notAvailable(4) indicates link loss, low light,
              or no loopback.
              The value remoteFault(5) indicates that a fault
              has been detected at the remote end of the link.
              This value applies to 10BASE-FB, 100BASE-T4 Far
              End Fault Indication and non-specified remote
              faults from a system running auto-negotiation.
              The values remoteJabber(7), remoteLinkLoss(8),
              and remoteTest(9) SHOULD be used instead of
              remoteFault(5) where the reason for remote fault
              is identified in the remote signaling protocol.
              
              The value invalidSignal(6) indicates that an
              invalid signal has been received from the other
              end of the link.  InvalidSignal(6) applies only
              to MAUs of type 10BASE-FB.
              
              Where an IEEE Std 802.3u-1995 clause 22 MII
              is present, a logic one in the remote fault bit
              (reference section 22.2.4.2.8 of that document)
              maps to the value remoteFault(5), and a logic
              zero in the link status bit (reference section
              22.2.4.2.10 of that document) maps to the value
              notAvailable(4).  The value notAvailable(4)
              takes precedence over the value remoteFault(5).
              
              Any MAU that implements management of clause 37
              Auto-Negotiation will map the received Remote
              Fault (RF1 and RF2) bit values for Offline to
              offline(10), Link Failure to remoteFault(5) and
              Auto-Negotiation Error to autoNegError(11).
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.4, aMediaAvailable.
          </reference>
        </column>
        <column name="rpMauMediaAvailableStateExits" oid="1.3.6.1.2.1.26.1.1.1.7" status="current">
          <syntax>
            <type module="SNMPv2-SMI" name="Counter32"/>
          </syntax>
          <access>readonly</access>
          <description>
              A count of the number of times that
              rpMauMediaAvailable for this MAU instance leaves
              the state available(3).
              
              Discontinuities in the value of this counter can
              occur at re-initialization of the management
              system, and at other times as indicated by the
              value of rptrMonitorPortLastChange.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.5,
              aLoseMediaCounter.
              RFC 2108, rptrMonitorPortLastChange
          </reference>
        </column>
        <column name="rpMauJabberState" oid="1.3.6.1.2.1.26.1.1.1.8" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="other" number="1"/>
              <namednumber name="unknown" number="2"/>
              <namednumber name="noJabber" number="3"/>
              <namednumber name="jabbering" number="4"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              The value other(1) is returned if the jabber
              state is not 2, 3, or 4.  The agent MUST always
              return other(1) for MAU type dot3MauTypeAUI.
              
              The value unknown(2) is returned when the MAU's
              true state is unknown; for example, when it is
              being initialized.
              
              If the MAU is not jabbering the agent returns
              noJabber(3).  This is the 'normal' state.
              
              If the MAU is in jabber state the agent returns
              the jabbering(4) value.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.6,
              aJabber.jabberFlag.
          </reference>
        </column>
        <column name="rpMauJabberingStateEnters" oid="1.3.6.1.2.1.26.1.1.1.9" status="current">
          <syntax>
            <type module="SNMPv2-SMI" name="Counter32"/>
          </syntax>
          <access>readonly</access>
          <description>
              A count of the number of times that
              mauJabberState for this MAU instance enters the
              state jabbering(4).  For MAUs of type
              dot3MauTypeAUI, dot3MauType100BaseT4,
              dot3MauType100BaseTX, dot3MauType100BaseFX and
                  all 1000Mbps types, this counter will always
                  indicate zero.
              
                  Discontinuities in the value of this counter
                  can occur at re-initialization of the
                  management system, and at other times as
                  indicated by the value of
                  rptrMonitorPortLastChange.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.6,
              aJabber.jabberCounter.
              RFC 2108, rptrMonitorPortLastChange
          </reference>
        </column>
        <column name="rpMauFalseCarriers" oid="1.3.6.1.2.1.26.1.1.1.10" status="current">
          <syntax>
            <type module="SNMPv2-SMI" name="Counter32"/>
          </syntax>
          <access>readonly</access>
          <description>
              A count of the number of false carrier events
              during IDLE in 100BASE-X links.  This counter
              does not increment at the symbol rate.  It can
              increment after a valid carrier completion at a
              maximum rate of once per 100 ms until the next
              carrier event.
              
              This counter increments only for MAUs of type
              dot3MauType100BaseT4, dot3MauType100BaseTX, and
              dot3MauType100BaseFX and all 1000Mbps types.
              For all other MAU types, this counter will
              always indicate zero.
              
              The approximate minimum time for rollover of
              this counter is 7.4 hours.
              
              Discontinuities in the value of this counter can
              occur at re-initialization of the management
              system, and at other times as indicated by the
              value of rptrMonitorPortLastChange.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.10, aFalseCarriers.
              RFC 2108, rptrMonitorPortLastChange
          </reference>
        </column>
      </row>
    </table>
    <table name="rpJackTable" oid="1.3.6.1.2.1.26.1.2" status="current">
      <description>
          Information about the external jacks attached
          to MAUs attached to the ports of a repeater.
      </description>
      <row name="rpJackEntry" oid="1.3.6.1.2.1.26.1.2.1" status="current">
        <linkage>
          <index module="MAU-MIB" name="rpMauGroupIndex"/>
          <index module="MAU-MIB" name="rpMauPortIndex"/>
          <index module="MAU-MIB" name="rpMauIndex"/>
          <index module="MAU-MIB" name="rpJackIndex"/>
        </linkage>
        <description>
            An entry in the table, containing information
            about a particular jack.
        </description>
        <column name="rpJackIndex" oid="1.3.6.1.2.1.26.1.2.1.1" status="current">
          <syntax>
            <typedef basetype="Integer32">
              <range min="1" max="2147483647"/>
            </typedef>
          </syntax>
          <access>noaccess</access>
          <description>
              This variable uniquely identifies the jack
              described by this entry from among other jacks
              attached to the same MAU (rpMauIndex).
          </description>
        </column>
        <column name="rpJackType" oid="1.3.6.1.2.1.26.1.2.1.2" status="current">
          <syntax>
            <type module="MAU-MIB" name="JackType"/>
          </syntax>
          <access>readonly</access>
          <description>
              The jack connector type, as it appears on the
              outside of the system.
          </description>
        </column>
      </row>
    </table>
    <node name="dot3IfMauBasicGroup" oid="1.3.6.1.2.1.26.2">
    </node>
    <table name="ifMauTable" oid="1.3.6.1.2.1.26.2.1" status="current">
      <description>
          Table of descriptive and status information
          about MAU(s) attached to an interface.
      </description>
      <row name="ifMauEntry" oid="1.3.6.1.2.1.26.2.1.1" status="current">
        <linkage>
          <index module="MAU-MIB" name="ifMauIfIndex"/>
          <index module="MAU-MIB" name="ifMauIndex"/>
        </linkage>
        <description>
            An entry in the table, containing information
            about a single MAU.
        </description>
        <column name="ifMauIfIndex" oid="1.3.6.1.2.1.26.2.1.1.1" status="current">
          <syntax>
            <typedef basetype="Integer32">
              <range min="1" max="2147483647"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              This variable uniquely identifies the interface
              to which the MAU described by this entry is
              connected.
          </description>
          <reference>
              RFC 1213, ifIndex
          </reference>
        </column>
        <column name="ifMauIndex" oid="1.3.6.1.2.1.26.2.1.1.2" status="current">
          <syntax>
            <typedef basetype="Integer32">
              <range min="1" max="2147483647"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              This variable uniquely identifies the MAU
              described by this entry from among other MAUs
              connected to the same interface (ifMauIfIndex).
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.1, aMAUID.
          </reference>
        </column>
        <column name="ifMauType" oid="1.3.6.1.2.1.26.2.1.1.3" status="current">
          <syntax>
            <type module="" name="ObjectIdentifier"/>
          </syntax>
          <access>readonly</access>
          <description>
              This object identifies the MAU type.  An
              initial set of MAU types are defined above.  The
              assignment of OBJECT IDENTIFIERs to new types of
              MAUs is managed by the IANA.  If the MAU type is
              unknown, the object identifier
              
              unknownMauType OBJECT IDENTIFIER ::= { 0 0 }
              
              is returned.  Note that unknownMauType is a
              syntactically valid object identifier, and any
              conformant implementation of ASN.1 and the BER
              must be able to generate and recognize this
              value.
              
              This object represents the operational type of
              the MAU, as determined by either (1) the result
              of the auto-negotiation function or (2) if
              auto-negotiation is not enabled or is not
              implemented for this MAU, by the value of the
              object ifMauDefaultType.  In case (2), a set to
              the object ifMauDefaultType will force the MAU
              into the new operating mode.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.2, aMAUType.
          </reference>
        </column>
        <column name="ifMauStatus" oid="1.3.6.1.2.1.26.2.1.1.4" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="other" number="1"/>
              <namednumber name="unknown" number="2"/>
              <namednumber name="operational" number="3"/>
              <namednumber name="standby" number="4"/>
              <namednumber name="shutdown" number="5"/>
              <namednumber name="reset" number="6"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <description>
              The current state of the MAU.  This object MAY
              be implemented as a read-only object by those
              agents and MAUs that do not implement software
              control of the MAU state.  Some agents may not
              support setting the value of this object to some
              of the enumerated values.
              
              The value other(1) is returned if the MAU is in
              a state other than one of the states 2 through
              6.
              
              The value unknown(2) is returned when the MAU's
              true state is unknown; for example, when it is
              being initialized.
              A MAU in the operational(3) state is fully
              functional, operates, and passes signals to its
              attached DTE or repeater port in accordance to
              its specification.
              
              A MAU in standby(4) state forces DI and CI to
              idle and the media transmitter to idle or fault,
              if supported.  Standby(4) mode only applies to
              link type MAUs.  The state of
              ifMauMediaAvailable is unaffected.
              
              A MAU in shutdown(5) state assumes the same
              condition on DI, CI, and the media transmitter
              as though it were powered down or not connected.
              The MAU MAY return other(1) value for the
              ifMauJabberState and ifMauMediaAvailable objects
              when it is in this state.  For an AUI, this
              state will remove power from the AUI.
              
              Setting this variable to the value reset(6)
              resets the MAU in the same manner as a
              power-off, power-on cycle of at least one-half
              second would.  The agent is not required to
              return the value reset (6).
              
              Setting this variable to the value
              operational(3), standby(4), or shutdown(5)
              causes the MAU to assume the respective state
              except that setting a mixing-type MAU or an AUI
              to standby(4) will cause the MAU to enter the
              shutdown state.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.7, aMAUAdminState,
              30.5.1.2.2, acMAUAdminControl, and 30.5.1.2.1,
              acResetMAU.
          </reference>
        </column>
        <column name="ifMauMediaAvailable" oid="1.3.6.1.2.1.26.2.1.1.5" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="other" number="1"/>
              <namednumber name="unknown" number="2"/>
              <namednumber name="available" number="3"/>
              <namednumber name="notAvailable" number="4"/>
              <namednumber name="remoteFault" number="5"/>
              <namednumber name="invalidSignal" number="6"/>
              <namednumber name="remoteJabber" number="7"/>
              <namednumber name="remoteLinkLoss" number="8"/>
              <namednumber name="remoteTest" number="9"/>
              <namednumber name="offline" number="10"/>
              <namednumber name="autoNegError" number="11"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              If the MAU is a link or fiber type (FOIRL,
              10BASE-T, 10BASE-F) then this is equivalent to
              the link test fail state/low light function.
              For an AUI or a coax (including broadband) MAU
              this indicates whether or not loopback is
              detected on the DI circuit.  The value of this
              attribute persists between packets for MAU types
              AUI, 10BASE5, 10BASE2, 10BROAD36, and 10BASE-FP.
              
              The value other(1) is returned if the
              mediaAvailable state is not one of 2 through 11.
              
              The value unknown(2) is returned when the MAU's
              true state is unknown; for example, when it is
              being initialized.  At power-up or following a
              reset, the value of this attribute will be
              unknown for AUI, coax, and 10BASE-FP MAUs.  For
              these MAUs loopback will be tested on each
              transmission during which no collision is
              detected.  If DI is receiving input when DO
              returns to IDL after a transmission and there
              has been no collision during the transmission
              then loopback will be detected.  The value of
              this attribute will only change during
              non-collided transmissions for AUI, coax, and
              10BASE-FP MAUs.
              
              For 100Mbps and 1000Mbps MAUs, the enumerations
              match the states within the respective link
              integrity state diagrams, fig 32-16, 23-12 and
              24-15 of sections 32, 23 and 24 of [16].  Any
              MAU which implements management of
              auto-negotiation will map remote fault
              indication to remote fault.
              
              The value available(3) indicates that the link,
              light, or loopback is normal.  The value
              notAvailable(4) indicates link loss, low light,
              or no loopback.
              
              The value remoteFault(5) indicates that a fault
              has been detected at the remote end of the link.
              This value applies to 10BASE-FB, 100BASE-T4 Far
              End Fault Indication and non-specified remote
              faults from a system running auto-negotiation.
              The values remoteJabber(7), remoteLinkLoss(8),
              and remoteTest(9) SHOULD be used instead of
              remoteFault(5) where the reason for remote fault
              is identified in the remote signaling protocol.
              
              The value invalidSignal(6) indicates that an
              invalid signal has been received from the other
              end of the link.  InvalidSignal(6) applies only
              to MAUs of type 10BASE-FB.
              
              Where an IEEE Std 802.3u-1995 clause 22 MII
              is present, a logic one in the remote fault bit
              (reference section 22.2.4.2.8 of that document)
              maps to the value remoteFault(5), and a logic
              zero in the link status bit (reference section
              22.2.4.2.10 of that document) maps to the value
              notAvailable(4).  The value notAvailable(4)
              takes precedence over the value remoteFault(5).
              
              Any MAU that implements management of clause 37
              Auto-Negotiation will map the received RF1 and
              RF2 bit values for Offline to offline(10), Link
              Failure to remoteFault(5) and Auto-Negotiation
              Error to autoNegError(11).
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.4, aMediaAvailable.
          </reference>
        </column>
        <column name="ifMauMediaAvailableStateExits" oid="1.3.6.1.2.1.26.2.1.1.6" status="current">
          <syntax>
            <type module="SNMPv2-SMI" name="Counter32"/>
          </syntax>
          <access>readonly</access>
          <description>
              A count of the number of times that
              ifMauMediaAvailable for this MAU instance leaves
              the state available(3).
              Discontinuities in the value of this counter can
              occur at re-initialization of the management
              system, and at other times as indicated by the
              value of ifCounterDiscontinuityTime.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.5,
              aLoseMediaCounter.
              RFC 2233, ifCounterDiscontinuityTime.
          </reference>
        </column>
        <column name="ifMauJabberState" oid="1.3.6.1.2.1.26.2.1.1.7" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="other" number="1"/>
              <namednumber name="unknown" number="2"/>
              <namednumber name="noJabber" number="3"/>
              <namednumber name="jabbering" number="4"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              The value other(1) is returned if the jabber
              state is not 2, 3, or 4.  The agent MUST always
              return other(1) for MAU type dot3MauTypeAUI.
              
              The value unknown(2) is returned when the MAU's
              true state is unknown; for example, when it is
              being initialized.
              
              If the MAU is not jabbering the agent returns
              noJabber(3).  This is the 'normal' state.
              
              If the MAU is in jabber state the agent returns
              the jabbering(4) value.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.6,
              aJabber.jabberFlag.
          </reference>
        </column>
        <column name="ifMauJabberingStateEnters" oid="1.3.6.1.2.1.26.2.1.1.8" status="current">
          <syntax>
            <type module="SNMPv2-SMI" name="Counter32"/>
          </syntax>
          <access>readonly</access>
          <description>
              A count of the number of times that
              mauJabberState for this MAU instance enters the
              state jabbering(4). This counter will always
              indicate zero for MAUs of type dot1MauTypeAUI
              and those of speeds above 10Mbps.
              
              Discontinuities in the value of this counter can
              occur at re-initialization of the management
              system, and at other times as indicated by the
              value of ifCounterDiscontinuityTime.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.6,
              aJabber.jabberCounter.
              RFC 2233, ifCounterDiscontinuityTime.
          </reference>
        </column>
        <column name="ifMauFalseCarriers" oid="1.3.6.1.2.1.26.2.1.1.9" status="current">
          <syntax>
            <type module="SNMPv2-SMI" name="Counter32"/>
          </syntax>
          <access>readonly</access>
          <description>
              A count of the number of false carrier events
              during IDLE in 100BASE-X and 1000BASE-X links.
              
              For all other MAU types, this counter will
              always indicate zero. This counter does not
              increment at the symbol rate.
              
              It can increment after a valid carrier
              completion at a maximum rate of once per 100 ms
              for 100BASE-X and once per 10us for 1000BASE-X
              until the next CarrierEvent.
              
              Discontinuities in the value of this counter can
              occur at re-initialization of the management
              system, and at other times as indicated by the
              value of ifCounterDiscontinuityTime.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.10, aFalseCarriers.
              RFC 2233, ifCounterDiscontinuityTime.
          </reference>
        </column>
        <column name="ifMauTypeList" oid="1.3.6.1.2.1.26.2.1.1.10" status="deprecated">
          <syntax>
            <type module="" name="Integer32"/>
          </syntax>
          <access>readonly</access>
          <description>
              ********* THIS OBJECT IS DEPRECATED **********
              
              A value that uniquely identifies the set of
              possible IEEE 802.3 types that the MAU could be.
              The value is a sum which initially takes the
              value zero.  Then, for each type capability of
              this MAU, 2 raised to the power noted below is
              added to the sum. For example, a MAU which has
              the capability to be only 10BASE-T would have a
              value of 512 (2**9).  In contrast, a MAU which
              supports both 10Base-T (full duplex) and
              100BASE-TX (full duplex) would have a value of
              ((2**11) + (2**16)) or 67584.
              
              The powers of 2 assigned to the capabilities are
              these:
              
              Power  Capability
                0      other or unknown
                1      AUI
                2      10BASE-5
                3      FOIRL
                4      10BASE-2
                5      10BASE-T duplex mode unknown
                6      10BASE-FP
                7      10BASE-FB
                8      10BASE-FL duplex mode unknown
                9      10BROAD36
               10      10BASE-T  half duplex mode
               11      10BASE-T  full duplex mode
               12      10BASE-FL half duplex mode
               13      10BASE-FL full duplex mode
               14      100BASE-T4
               15      100BASE-TX half duplex mode
               16      100BASE-TX full duplex mode
               17      100BASE-FX half duplex mode
               18      100BASE-FX full duplex mode
               19      100BASE-T2 half duplex mode
               20      100BASE-T2 full duplex mode
              
              If auto-negotiation is present on this MAU, this
              object will map to ifMauAutoNegCapability.
              
              This object has been deprecated in favour of
              ifMauTypeListBits.
          </description>
        </column>
        <column name="ifMauDefaultType" oid="1.3.6.1.2.1.26.2.1.1.11" status="current">
          <syntax>
            <type module="" name="ObjectIdentifier"/>
          </syntax>
          <access>readwrite</access>
          <description>
              This object identifies the default
              administrative baseband MAU type, to be used in
              conjunction with the operational MAU type
              denoted by ifMauType.
              
              The set of possible values for this object is
              the same as the set defined for the ifMauType
              object.
              
              This object represents the
              administratively-configured type of the MAU.  If
              auto-negotiation is not enabled or is not
              implemented for this MAU, the value of this
              object determines the operational type of the
              MAU.  In this case, a set to this object will
              force the MAU into the specified operating mode.
              
              If auto-negotiation is implemented and enabled
              for this MAU, the operational type of the MAU
              is determined by auto-negotiation, and the value
              of this object denotes the type to which the MAU
              will automatically revert if/when
              auto-negotiation is later disabled.
              
              NOTE TO IMPLEMENTORS:  It may be necessary to
              provide for underlying hardware implementations
              which do not follow the exact behavior specified
              above.  In particular, when
              ifMauAutoNegAdminStatus transitions from enabled
              to disabled, the agent implementation MUST
              ensure that the operational type of the MAU (as
              reported by ifMauType) correctly transitions to
              the value specified by this object, rather than
              continuing to operate at the value earlier
              determined by the auto-negotiation function.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.1, aMAUID, and
              22.2.4.1.4.
          </reference>
        </column>
        <column name="ifMauAutoNegSupported" oid="1.3.6.1.2.1.26.2.1.1.12" status="current">
          <syntax>
            <type module="SNMPv2-TC" name="TruthValue"/>
          </syntax>
          <access>readonly</access>
          <description>
              This object indicates whether or not
              auto-negotiation is supported on this MAU.
          </description>
        </column>
        <column name="ifMauTypeListBits" oid="1.3.6.1.2.1.26.2.1.1.13" status="current">
          <syntax>
            <typedef basetype="Bits">
              <namednumber name="bOther" number="0"/>
              <namednumber name="bAUI" number="1"/>
              <namednumber name="b10base5" number="2"/>
              <namednumber name="bFoirl" number="3"/>
              <namednumber name="b10base2" number="4"/>
              <namednumber name="b10baseT" number="5"/>
              <namednumber name="b10baseFP" number="6"/>
              <namednumber name="b10baseFB" number="7"/>
              <namednumber name="b10baseFL" number="8"/>
              <namednumber name="b10broad36" number="9"/>
              <namednumber name="b10baseTHD" number="10"/>
              <namednumber name="b10baseTFD" number="11"/>
              <namednumber name="b10baseFLHD" number="12"/>
              <namednumber name="b10baseFLFD" number="13"/>
              <namednumber name="b100baseT4" number="14"/>
              <namednumber name="b100baseTXHD" number="15"/>
              <namednumber name="b100baseTXFD" number="16"/>
              <namednumber name="b100baseFXHD" number="17"/>
              <namednumber name="b100baseFXFD" number="18"/>
              <namednumber name="b100baseT2HD" number="19"/>
              <namednumber name="b100baseT2FD" number="20"/>
              <namednumber name="b1000baseXHD" number="21"/>
              <namednumber name="b1000baseXFD" number="22"/>
              <namednumber name="b1000baseLXHD" number="23"/>
              <namednumber name="b1000baseLXFD" number="24"/>
              <namednumber name="b1000baseSXHD" number="25"/>
              <namednumber name="b1000baseSXFD" number="26"/>
              <namednumber name="b1000baseCXHD" number="27"/>
              <namednumber name="b1000baseCXFD" number="28"/>
              <namednumber name="b1000baseTHD" number="29"/>
              <namednumber name="b1000baseTFD" number="30"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              A value that uniquely identifies the set of
              possible IEEE 802.3 types that the MAU could be.
              If auto-negotiation is present on this MAU, this
              object will map to ifMauAutoNegCapability.
              
              Note that this MAU may be capable of operating
              as a MAU type that is beyond the scope of this
              MIB.  This is indicated by returning the
              bit value bOther in addition to any bit values
              for capabilities that are listed above.
          </description>
        </column>
      </row>
    </table>
    <table name="ifJackTable" oid="1.3.6.1.2.1.26.2.2" status="current">
      <description>
          Information about the external jacks attached
          to MAUs attached to an interface.
      </description>
      <row name="ifJackEntry" oid="1.3.6.1.2.1.26.2.2.1" status="current">
        <linkage>
          <index module="MAU-MIB" name="ifMauIfIndex"/>
          <index module="MAU-MIB" name="ifMauIndex"/>
          <index module="MAU-MIB" name="ifJackIndex"/>
        </linkage>
        <description>
            An entry in the table, containing information
            about a particular jack.
        </description>
        <column name="ifJackIndex" oid="1.3.6.1.2.1.26.2.2.1.1" status="current">
          <syntax>
            <typedef basetype="Integer32">
              <range min="1" max="2147483647"/>
            </typedef>
          </syntax>
          <access>noaccess</access>
          <description>
              This variable uniquely identifies the jack
              described by this entry from among other jacks
              attached to the same MAU.
          </description>
        </column>
        <column name="ifJackType" oid="1.3.6.1.2.1.26.2.2.1.2" status="current">
          <syntax>
            <type module="MAU-MIB" name="JackType"/>
          </syntax>
          <access>readonly</access>
          <description>
              The jack connector type, as it appears on the
              outside of the system.
          </description>
        </column>
      </row>
    </table>
    <node name="dot3BroadMauBasicGroup" oid="1.3.6.1.2.1.26.3">
    </node>
    <table name="broadMauBasicTable" oid="1.3.6.1.2.1.26.3.1" status="deprecated">
      <description>
          ********* THIS OBJECT IS DEPRECATED **********
          
          Table of descriptive and status information
          about the broadband MAUs connected to
          interfaces.
      </description>
      <row name="broadMauBasicEntry" oid="1.3.6.1.2.1.26.3.1.1" status="deprecated">
        <linkage>
          <index module="MAU-MIB" name="broadMauIfIndex"/>
          <index module="MAU-MIB" name="broadMauIndex"/>
        </linkage>
        <description>
            ********* THIS OBJECT IS DEPRECATED **********
            
            An entry in the table, containing information
            about a single broadband MAU.
        </description>
        <column name="broadMauIfIndex" oid="1.3.6.1.2.1.26.3.1.1.1" status="deprecated">
          <syntax>
            <typedef basetype="Integer32">
              <range min="1" max="2147483647"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              ********* THIS OBJECT IS DEPRECATED **********
              
              This variable uniquely identifies the interface
              to which the MAU described by this entry is
              connected.
          </description>
          <reference>
              Reference RFC 1213, ifIndex.
          </reference>
        </column>
        <column name="broadMauIndex" oid="1.3.6.1.2.1.26.3.1.1.2" status="deprecated">
          <syntax>
            <typedef basetype="Integer32">
              <range min="1" max="2147483647"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              ********* THIS OBJECT IS DEPRECATED **********
              
              This variable uniquely identifies the MAU
              connected to interface broadMauIfIndex that is
              described by this entry.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.1, aMAUID.
          </reference>
        </column>
        <column name="broadMauXmtRcvSplitType" oid="1.3.6.1.2.1.26.3.1.1.3" status="deprecated">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="other" number="1"/>
              <namednumber name="single" number="2"/>
              <namednumber name="dual" number="3"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              ********* THIS OBJECT IS DEPRECATED **********
              
              This object indicates the type of frequency
              multiplexing/cabling system used to separate the
              transmit and receive paths for the 10BROAD36
              MAU.
              
              The value other(1) is returned if the split type
              is not either single or dual.
              
              The value single(2) indicates a single cable
              system.  The value dual(3) indicates a dual
              cable system, offset normally zero.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.8,
              aBbMAUXmitRcvSplitType.
          </reference>
        </column>
        <column name="broadMauXmtCarrierFreq" oid="1.3.6.1.2.1.26.3.1.1.4" status="deprecated">
          <syntax>
            <type module="" name="Integer32"/>
          </syntax>
          <access>readonly</access>
          <description>
              ********* THIS OBJECT IS DEPRECATED **********
              
              This variable indicates the transmit carrier
              frequency of the 10BROAD36 MAU in MHz/4; that
              is, in units of 250 kHz.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.9,
              aBroadbandFrequencies.xmitCarrierFrequency.
          </reference>
        </column>
        <column name="broadMauTranslationFreq" oid="1.3.6.1.2.1.26.3.1.1.5" status="deprecated">
          <syntax>
            <type module="" name="Integer32"/>
          </syntax>
          <access>readonly</access>
          <description>
              ********* THIS OBJECT IS DEPRECATED **********
              
              This variable indicates the translation offset
              frequency of the 10BROAD36 MAU in MHz/4; that
              is, in units of 250 kHz.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.5.1.1.9,
              aBroadbandFrequencies.translationFrequency.
          </reference>
        </column>
      </row>
    </table>
    <node name="dot3MauType" oid="1.3.6.1.2.1.26.4">
    </node>
    <node name="dot3MauTypeAUI" oid="1.3.6.1.2.1.26.4.1" status="current">
      <description>
          no internal MAU, view from AUI
      </description>
    </node>
    <node name="dot3MauType10Base5" oid="1.3.6.1.2.1.26.4.2" status="current">
      <description>
          thick coax MAU (per 802.3 section 8)
      </description>
    </node>
    <node name="dot3MauTypeFoirl" oid="1.3.6.1.2.1.26.4.3" status="current">
      <description>
          FOIRL MAU (per 802.3 section 9.9)
      </description>
    </node>
    <node name="dot3MauType10Base2" oid="1.3.6.1.2.1.26.4.4" status="current">
      <description>
          thin coax MAU (per 802.3 section 10)
      </description>
    </node>
    <node name="dot3MauType10BaseT" oid="1.3.6.1.2.1.26.4.5" status="current">
      <description>
          UTP MAU (per 802.3 section 14).
          Note that it is strongly recommended that
          agents return either dot3MauType10BaseTHD or
          dot3MauType10BaseTFD if the duplex mode is
          known.  However, management applications should
          be prepared to receive this MAU type value from
          older agent implementations.
      </description>
    </node>
    <node name="dot3MauType10BaseFP" oid="1.3.6.1.2.1.26.4.6" status="current">
      <description>
          passive fiber MAU (per 802.3 section 16)
      </description>
    </node>
    <node name="dot3MauType10BaseFB" oid="1.3.6.1.2.1.26.4.7" status="current">
      <description>
          sync fiber MAU (per 802.3 section 17)
      </description>
    </node>
    <node name="dot3MauType10BaseFL" oid="1.3.6.1.2.1.26.4.8" status="current">
      <description>
          async fiber MAU (per 802.3 section 18)
          Note that it is strongly recommended that
          agents return either dot3MauType10BaseFLHD or
          dot3MauType10BaseFLFD if the duplex mode is
          known.  However, management applications should
          be prepared to receive this MAU type value from
          older agent implementations.
      </description>
    </node>
    <node name="dot3MauType10Broad36" oid="1.3.6.1.2.1.26.4.9" status="current">
      <description>
          broadband DTE MAU (per 802.3 section 11).
          Note that 10BROAD36 MAUs can be attached to
          interfaces but not to repeaters.
      </description>
    </node>
    <node name="dot3MauType10BaseTHD" oid="1.3.6.1.2.1.26.4.10" status="current">
      <description>
          UTP MAU (per 802.3 section 14), half duplex
          mode
      </description>
    </node>
    <node name="dot3MauType10BaseTFD" oid="1.3.6.1.2.1.26.4.11" status="current">
      <description>
          UTP MAU (per 802.3 section 14), full duplex
          mode
      </description>
    </node>
    <node name="dot3MauType10BaseFLHD" oid="1.3.6.1.2.1.26.4.12" status="current">
      <description>
          async fiber MAU (per 802.3 section 18), half
          duplex mode
      </description>
    </node>
    <node name="dot3MauType10BaseFLFD" oid="1.3.6.1.2.1.26.4.13" status="current">
      <description>
          async fiber MAU (per 802.3 section 18), full
          duplex mode
      </description>
    </node>
    <node name="dot3MauType100BaseT4" oid="1.3.6.1.2.1.26.4.14" status="current">
      <description>
          4 pair categ. 3 UTP (per 802.3 section 23)
      </description>
    </node>
    <node name="dot3MauType100BaseTXHD" oid="1.3.6.1.2.1.26.4.15" status="current">
      <description>
          2 pair categ. 5 UTP (per 802.3 section 25),
          half duplex mode
      </description>
    </node>
    <node name="dot3MauType100BaseTXFD" oid="1.3.6.1.2.1.26.4.16" status="current">
      <description>
          2 pair categ. 5 UTP (per 802.3 section 25),
          full duplex mode
      </description>
    </node>
    <node name="dot3MauType100BaseFXHD" oid="1.3.6.1.2.1.26.4.17" status="current">
      <description>
          X fiber over PMT (per 802.3 section 26), half
          duplex mode
      </description>
    </node>
    <node name="dot3MauType100BaseFXFD" oid="1.3.6.1.2.1.26.4.18" status="current">
      <description>
          X fiber over PMT (per 802.3 section 26), full
          duplex mode
      </description>
    </node>
    <node name="dot3MauType100BaseT2HD" oid="1.3.6.1.2.1.26.4.19" status="current">
      <description>
          2 pair categ. 3 UTP (per 802.3 section 32),
          half duplex mode
      </description>
    </node>
    <node name="dot3MauType100BaseT2FD" oid="1.3.6.1.2.1.26.4.20" status="current">
      <description>
          2 pair categ. 3 UTP (per 802.3 section 32),
          full duplex mode
      </description>
    </node>
    <node name="dot3MauType1000BaseXHD" oid="1.3.6.1.2.1.26.4.21" status="current">
      <description>
          PCS/PMA (per 802.3 section 36), unknown PMD,
          half duplex mode
      </description>
    </node>
    <node name="dot3MauType1000BaseXFD" oid="1.3.6.1.2.1.26.4.22" status="current">
      <description>
          PCS/PMA (per 802.3 section 36), unknown PMD,
          full duplex mode
      </description>
    </node>
    <node name="dot3MauType1000BaseLXHD" oid="1.3.6.1.2.1.26.4.23" status="current">
      <description>
          Fiber over long-wavelength laser (per 802.3
          section 38), half duplex mode
      </description>
    </node>
    <node name="dot3MauType1000BaseLXFD" oid="1.3.6.1.2.1.26.4.24" status="current">
      <description>
          Fiber over long-wavelength laser (per 802.3
          section 38), full duplex mode
      </description>
    </node>
    <node name="dot3MauType1000BaseSXHD" oid="1.3.6.1.2.1.26.4.25" status="current">
      <description>
          Fiber over short-wavelength laser (per 802.3
          section 38), half duplex mode
      </description>
    </node>
    <node name="dot3MauType1000BaseSXFD" oid="1.3.6.1.2.1.26.4.26" status="current">
      <description>
          Fiber over short-wavelength laser (per 802.3
          section 38), full duplex mode
      </description>
    </node>
    <node name="dot3MauType1000BaseCXHD" oid="1.3.6.1.2.1.26.4.27" status="current">
      <description>
          Copper over 150-Ohm balanced cable (per 802.3
          section 39), half duplex mode
      </description>
    </node>
    <node name="dot3MauType1000BaseCXFD" oid="1.3.6.1.2.1.26.4.28" status="current">
      <description>
          Copper over 150-Ohm balanced cable (per 802.3
          section 39), full duplex mode
      </description>
    </node>
    <node name="dot3MauType1000BaseTHD" oid="1.3.6.1.2.1.26.4.29" status="current">
      <description>
          Four-pair Category 5 UTP (per 802.3 section
          40), half duplex mode
      </description>
    </node>
    <node name="dot3MauType1000BaseTFD" oid="1.3.6.1.2.1.26.4.30" status="current">
      <description>
          Four-pair Category 5 UTP (per 802.3 section
          40), full duplex mode
      </description>
    </node>
    <node name="dot3IfMauAutoNegGroup" oid="1.3.6.1.2.1.26.5">
    </node>
    <table name="ifMauAutoNegTable" oid="1.3.6.1.2.1.26.5.1" status="current">
      <description>
          Configuration and status objects for the
          auto-negotiation function of MAUs attached to
          interfaces.
      </description>
      <row name="ifMauAutoNegEntry" oid="1.3.6.1.2.1.26.5.1.1" status="current">
        <linkage>
          <index module="MAU-MIB" name="ifMauIfIndex"/>
          <index module="MAU-MIB" name="ifMauIndex"/>
        </linkage>
        <description>
            An entry in the table, containing configuration
            and status information for the auto-negotiation
            function of a particular MAU.
        </description>
        <column name="ifMauAutoNegAdminStatus" oid="1.3.6.1.2.1.26.5.1.1.1" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="enabled" number="1"/>
              <namednumber name="disabled" number="2"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <description>
              Setting this object to enabled(1) will cause
              the interface which has the auto-negotiation
              signaling ability to be enabled.
              
              If the value of this object is disabled(2) then
              the interface will act as it would if it had no
              auto-negotiation signaling.  Under these
              conditions, an IEEE 802.3 MAU will immediately
              be forced to the state indicated by the value of
              the object ifMauDefaultType.
              
              NOTE TO IMPLEMENTORS:  When
              ifMauAutoNegAdminStatus transitions from enabled
              to disabled, the agent implementation MUST
              ensure that the operational type of the MAU (as
              reported by ifMauType) correctly transitions to
              the value specified by the ifMauDefaultType
              object, rather than continuing to operate at the
              value earlier determined by the auto-negotiation
              function.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.1.2,
              aAutoNegAdminState and 30.6.1.2.2,
              acAutoNegAdminControl.
          </reference>
        </column>
        <column name="ifMauAutoNegRemoteSignaling" oid="1.3.6.1.2.1.26.5.1.1.2" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="detected" number="1"/>
              <namednumber name="notdetected" number="2"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              A value indicating whether the remote end of
              the link is using auto-negotiation signaling. It
              takes the value detected(1) if and only if,
              during the previous link negotiation, FLP Bursts
              were received.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.1.3,
              aAutoNegRemoteSignaling.
          </reference>
        </column>
        <column name="ifMauAutoNegConfig" oid="1.3.6.1.2.1.26.5.1.1.4" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="other" number="1"/>
              <namednumber name="configuring" number="2"/>
              <namednumber name="complete" number="3"/>
              <namednumber name="disabled" number="4"/>
              <namednumber name="parallelDetectFail" number="5"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              A value indicating the current status of the
              auto-negotiation process.  The enumeration
              parallelDetectFail(5) maps to a failure in
              parallel detection as defined in 28.2.3.1 of
              [IEEE 802.3 Std].
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.1.4,
              aAutoNegAutoConfig.
          </reference>
        </column>
        <column name="ifMauAutoNegCapability" oid="1.3.6.1.2.1.26.5.1.1.5" status="deprecated">
          <syntax>
            <type module="" name="Integer32"/>
          </syntax>
          <access>readonly</access>
          <description>
              ********* THIS OBJECT IS DEPRECATED **********
              
              A value that uniquely identifies the set of
              capabilities of the local auto-negotiation
              entity.  The value is a sum which initially
              takes the value zero.  Then, for each capability
              of this interface, 2 raised to the power noted
              below is added to the sum. For example, an
              interface which has the capability to support
              only 100Base-TX half duplex would have a value
              of 32768 (2**15).  In contrast, an interface
              which supports both 100Base-TX half duplex and
              and 100Base-TX full duplex would have a value of
              98304 ((2**15) + (2**16)).
              
              The powers of 2 assigned to the capabilities are
              these:
              
              Power   Capability
                0       other or unknown
               (1-9)    (reserved)
               10       10BASE-T  half duplex mode
               11       10BASE-T  full duplex mode
               12       (reserved)
               13       (reserved)
               14       100BASE-T4
               15       100BASE-TX half duplex mode
               16       100BASE-TX full duplex mode
               17       (reserved)
               18       (reserved)
               19      100BASE-T2 half duplex mode
               20      100BASE-T2 full duplex mode
              
              Note that interfaces that support this MIB may
              have capabilities that extend beyond the scope
              of this MIB.
              This object has been deprecated in favour of
              ifMauAutoNegCapabilityBits
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.1.5,
              aAutoNegLocalTechnologyAbility.
          </reference>
        </column>
        <column name="ifMauAutoNegCapAdvertised" oid="1.3.6.1.2.1.26.5.1.1.6" status="deprecated">
          <syntax>
            <type module="" name="Integer32"/>
          </syntax>
          <access>readwrite</access>
          <description>
              ********* THIS OBJECT IS DEPRECATED **********
              
              A value that uniquely identifies the set of
              capabilities advertised by the local
              auto-negotiation entity. Refer to
              ifMauAutoNegCapability for a description of the
              possible values of this object.
              
              Capabilities in this object that are not
              available in ifMauAutoNegCapability cannot be
              enabled.
              
              This object has been deprecated in favour of
              ifMauAutoNegCapAdvertisedBits
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.1.6,
              aAutoNegAdvertisedTechnologyAbility.
          </reference>
        </column>
        <column name="ifMauAutoNegCapReceived" oid="1.3.6.1.2.1.26.5.1.1.7" status="deprecated">
          <syntax>
            <type module="" name="Integer32"/>
          </syntax>
          <access>readonly</access>
          <description>
              ********* THIS OBJECT IS DEPRECATED **********
              
              A value that uniquely identifies the set of
              capabilities received from the remote
              auto-negotiation entity. Refer to
              ifMauAutoNegCapability for a description of the
              possible values of this object.
              
              Note that interfaces that support this MIB may
              be attached to remote auto-negotiation entities
              which have capabilities beyond the scope of this
              MIB.
              
              This object has been deprecated in favour of
              ifMauAutoNegCapReceivedBits
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.1.7,
              aAutoNegReceivedTechnologyAbility.
          </reference>
        </column>
        <column name="ifMauAutoNegRestart" oid="1.3.6.1.2.1.26.5.1.1.8" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="restart" number="1"/>
              <namednumber name="norestart" number="2"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <description>
              If the value of this object is set to
              restart(1) then this will force auto-negotiation
              to begin link renegotiation. If auto-negotiation
              signaling is disabled, a write to this object
              has no effect.
              
              Setting the value of this object to norestart(2)
              has no effect.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.2.1,
              acAutoNegRestartAutoConfig.
          </reference>
        </column>
        <column name="ifMauAutoNegCapabilityBits" oid="1.3.6.1.2.1.26.5.1.1.9" status="current">
          <syntax>
            <typedef basetype="Bits">
              <namednumber name="bOther" number="0"/>
              <namednumber name="b10baseT" number="1"/>
              <namednumber name="b10baseTFD" number="2"/>
              <namednumber name="b100baseT4" number="3"/>
              <namednumber name="b100baseTX" number="4"/>
              <namednumber name="b100baseTXFD" number="5"/>
              <namednumber name="b100baseT2" number="6"/>
              <namednumber name="b100baseT2FD" number="7"/>
              <namednumber name="bfdxPause" number="8"/>
              <namednumber name="bfdxAPause" number="9"/>
              <namednumber name="bfdxSPause" number="10"/>
              <namednumber name="bfdxBPause" number="11"/>
              <namednumber name="b1000baseX" number="12"/>
              <namednumber name="b1000baseXFD" number="13"/>
              <namednumber name="b1000baseT" number="14"/>
              <namednumber name="b1000baseTFD" number="15"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              A value that uniquely identifies the set of
              capabilities of the local auto-negotiation
              entity.  Note that interfaces that support this
              MIB may have capabilities that extend beyond the
              scope of this MIB.
              
              Note that the local auto-negotiation entity may
              support some capabilities beyond the scope of
              this MIB.  This is indicated by returning the
              bit value bOther in addition to any bit values
              for capabilities that are listed above.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.1.5,
              aAutoNegLocalTechnologyAbility.
          </reference>
        </column>
        <column name="ifMauAutoNegCapAdvertisedBits" oid="1.3.6.1.2.1.26.5.1.1.10" status="current">
          <syntax>
            <typedef basetype="Bits">
              <namednumber name="bOther" number="0"/>
              <namednumber name="b10baseT" number="1"/>
              <namednumber name="b10baseTFD" number="2"/>
              <namednumber name="b100baseT4" number="3"/>
              <namednumber name="b100baseTX" number="4"/>
              <namednumber name="b100baseTXFD" number="5"/>
              <namednumber name="b100baseT2" number="6"/>
              <namednumber name="b100baseT2FD" number="7"/>
              <namednumber name="bFdxPause" number="8"/>
              <namednumber name="bFdxAPause" number="9"/>
              <namednumber name="bFdxSPause" number="10"/>
              <namednumber name="bFdxBPause" number="11"/>
              <namednumber name="b1000baseX" number="12"/>
              <namednumber name="b1000baseXFD" number="13"/>
              <namednumber name="b1000baseT" number="14"/>
              <namednumber name="b1000baseTFD" number="15"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <description>
              A value that uniquely identifies the set of
              capabilities advertised by the local
              auto-negotiation entity.
              
              Capabilities in this object that are not
              available in ifMauAutoNegCapabilityBits cannot
              be enabled.
              Note that the local auto-negotiation entity may
              advertise some capabilities beyond the scope of
              this MIB.  This is indicated by returning the
              bit value bOther in addition to any bit values
              for capabilities that are listed above.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.1.6,
              aAutoNegAdvertisedTechnologyAbility.
          </reference>
        </column>
        <column name="ifMauAutoNegCapReceivedBits" oid="1.3.6.1.2.1.26.5.1.1.11" status="current">
          <syntax>
            <typedef basetype="Bits">
              <namednumber name="bOther" number="0"/>
              <namednumber name="b10baseT" number="1"/>
              <namednumber name="b10baseTFD" number="2"/>
              <namednumber name="b100baseT4" number="3"/>
              <namednumber name="b100baseTX" number="4"/>
              <namednumber name="b100baseTXFD" number="5"/>
              <namednumber name="b100baseT2" number="6"/>
              <namednumber name="b100baseT2FD" number="7"/>
              <namednumber name="bFdxPause" number="8"/>
              <namednumber name="bFdxAPause" number="9"/>
              <namednumber name="bFdxSPause" number="10"/>
              <namednumber name="bFdxBPause" number="11"/>
              <namednumber name="b1000baseX" number="12"/>
              <namednumber name="b1000baseXFD" number="13"/>
              <namednumber name="b1000baseT" number="14"/>
              <namednumber name="b1000baseTFD" number="15"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              A value that uniquely identifies the set of
              capabilities received from the remote
              auto-negotiation entity.
              
              Note that interfaces that support this MIB may
              be attached to remote auto-negotiation entities
              which have capabilities beyond the scope of this
              MIB.  This is indicated by returning the bit
              value bOther in addition to any bit values for
              capabilities that are listed above.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.1.7,
              aAutoNegReceivedTechnologyAbility.
          </reference>
        </column>
        <column name="ifMauAutoNegRemoteFaultAdvertised" oid="1.3.6.1.2.1.26.5.1.1.12" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="noError" number="1"/>
              <namednumber name="offline" number="2"/>
              <namednumber name="linkFailure" number="3"/>
              <namednumber name="autoNegError" number="4"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <description>
              A value that identifies any local fault
              indications that this MAU has detected and will
              advertise at the next auto-negotiation
              interaction for 1000Mbps MAUs.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.1.6,
              aAutoNegAdvertisedTechnologyAbility.
          </reference>
        </column>
        <column name="ifMauAutoNegRemoteFaultReceived" oid="1.3.6.1.2.1.26.5.1.1.13" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="noError" number="1"/>
              <namednumber name="offline" number="2"/>
              <namednumber name="linkFailure" number="3"/>
              <namednumber name="autoNegError" number="4"/>
            </typedef>
          </syntax>
          <access>readonly</access>
          <description>
              A value that identifies any fault indications
              received from the far end of a link by the
              local auto-negotiation entity for 1000Mbps
              MAUs.
          </description>
          <reference>
              [IEEE 802.3 Std], 30.6.1.1.7,
              aAutoNegReceivedTechnologyAbility.
          </reference>
        </column>
      </row>
    </table>
    <node name="mauMod" oid="1.3.6.1.2.1.26.6" status="current">
    </node>
    <node name="mauModConf" oid="1.3.6.1.2.1.26.6.1">
    </node>
    <node name="mauModCompls" oid="1.3.6.1.2.1.26.6.1.1">
    </node>
    <node name="mauModObjGrps" oid="1.3.6.1.2.1.26.6.1.2">
    </node>
    <node name="mauModNotGrps" oid="1.3.6.1.2.1.26.6.1.3">
    </node>
  </nodes>

  <notifications>
    <notification name="rpMauJabberTrap" oid="1.3.6.1.2.1.26.0.1" status="current">
      <objects>
        <object module="MAU-MIB" name="rpMauJabberState"/>
      </objects>
      <description>
          This trap is sent whenever a managed repeater
          MAU enters the jabber state.
          
          The agent MUST throttle the generation of
          consecutive rpMauJabberTraps so that there is at
          least a five-second gap between them.
      </description>
      <reference>
          [IEEE 802.3 Mgt], 30.5.1.3.1, nJabber
          notification.
      </reference>
    </notification>
    <notification name="ifMauJabberTrap" oid="1.3.6.1.2.1.26.0.2" status="current">
      <objects>
        <object module="MAU-MIB" name="ifMauJabberState"/>
      </objects>
      <description>
          This trap is sent whenever a managed interface
          MAU enters the jabber state.
          
          The agent MUST throttle the generation of
          consecutive ifMauJabberTraps so that there is at
          least a five-second gap between them.
      </description>
      <reference>
          [IEEE 802.3 Mgt], 30.5.1.3.1, nJabber
          notification.
      </reference>
    </notification>
  </notifications>

  <groups>
    <group name="mauRpGrpBasic" oid="1.3.6.1.2.1.26.6.1.2.1" status="current">
      <members>
        <member module="MAU-MIB" name="rpMauGroupIndex"/>
        <member module="MAU-MIB" name="rpMauPortIndex"/>
        <member module="MAU-MIB" name="rpMauIndex"/>
        <member module="MAU-MIB" name="rpMauType"/>
        <member module="MAU-MIB" name="rpMauStatus"/>
        <member module="MAU-MIB" name="rpMauMediaAvailable"/>
        <member module="MAU-MIB" name="rpMauMediaAvailableStateExits"/>
        <member module="MAU-MIB" name="rpMauJabberState"/>
        <member module="MAU-MIB" name="rpMauJabberingStateEnters"/>
      </members>
      <description>
          Basic conformance group for MAUs attached to
          repeater ports.  This group is also the
          conformance specification for RFC 1515
          implementations.
      </description>
    </group>
    <group name="mauRpGrp100Mbs" oid="1.3.6.1.2.1.26.6.1.2.2" status="current">
      <members>
        <member module="MAU-MIB" name="rpMauFalseCarriers"/>
      </members>
      <description>
          Conformance group for MAUs attached to
          repeater ports with 100 Mb/s or greater
          capability.
      </description>
    </group>
    <group name="mauRpGrpJack" oid="1.3.6.1.2.1.26.6.1.2.3" status="current">
      <members>
        <member module="MAU-MIB" name="rpJackType"/>
      </members>
      <description>
          Conformance group for MAUs attached to
          repeater ports with managed jacks.
      </description>
    </group>
    <group name="mauIfGrpBasic" oid="1.3.6.1.2.1.26.6.1.2.4" status="current">
      <members>
        <member module="MAU-MIB" name="ifMauIfIndex"/>
        <member module="MAU-MIB" name="ifMauIndex"/>
        <member module="MAU-MIB" name="ifMauType"/>
        <member module="MAU-MIB" name="ifMauStatus"/>
        <member module="MAU-MIB" name="ifMauMediaAvailable"/>
        <member module="MAU-MIB" name="ifMauMediaAvailableStateExits"/>
        <member module="MAU-MIB" name="ifMauJabberState"/>
        <member module="MAU-MIB" name="ifMauJabberingStateEnters"/>
      </members>
      <description>
          Basic conformance group for MAUs attached to
          interfaces.  This group also provides a
          conformance specification for RFC 1515
          implementations.
      </description>
    </group>
    <group name="mauIfGrp100Mbs" oid="1.3.6.1.2.1.26.6.1.2.5" status="deprecated">
      <members>
        <member module="MAU-MIB" name="ifMauFalseCarriers"/>
        <member module="MAU-MIB" name="ifMauTypeList"/>
        <member module="MAU-MIB" name="ifMauDefaultType"/>
        <member module="MAU-MIB" name="ifMauAutoNegSupported"/>
      </members>
      <description>
          ********* THIS GROUP IS DEPRECATED **********
          
          Conformance group for MAUs attached to
          interfaces with 100 Mb/s capability.
          
          This object group has been deprecated in favor
          of mauIfGrpHighCapacity.
      </description>
    </group>
    <group name="mauIfGrpJack" oid="1.3.6.1.2.1.26.6.1.2.6" status="current">
      <members>
        <member module="MAU-MIB" name="ifJackType"/>
      </members>
      <description>
          Conformance group for MAUs attached to
          interfaces with managed jacks.
      </description>
    </group>
    <group name="mauIfGrpAutoNeg" oid="1.3.6.1.2.1.26.6.1.2.7" status="deprecated">
      <members>
        <member module="MAU-MIB" name="ifMauAutoNegAdminStatus"/>
        <member module="MAU-MIB" name="ifMauAutoNegRemoteSignaling"/>
        <member module="MAU-MIB" name="ifMauAutoNegConfig"/>
        <member module="MAU-MIB" name="ifMauAutoNegCapability"/>
        <member module="MAU-MIB" name="ifMauAutoNegCapAdvertised"/>
        <member module="MAU-MIB" name="ifMauAutoNegCapReceived"/>
        <member module="MAU-MIB" name="ifMauAutoNegRestart"/>
      </members>
      <description>
          ********* THIS GROUP IS DEPRECATED **********
          
          Conformance group for MAUs attached to
          interfaces with managed auto-negotiation.
          
          This object group has been deprecated in favor
          of mauIfGrpAutoNeg2.
      </description>
    </group>
    <group name="mauBroadBasic" oid="1.3.6.1.2.1.26.6.1.2.8" status="deprecated">
      <members>
        <member module="MAU-MIB" name="broadMauIfIndex"/>
        <member module="MAU-MIB" name="broadMauIndex"/>
        <member module="MAU-MIB" name="broadMauXmtRcvSplitType"/>
        <member module="MAU-MIB" name="broadMauXmtCarrierFreq"/>
        <member module="MAU-MIB" name="broadMauTranslationFreq"/>
      </members>
      <description>
          ********* THIS GROUP IS DEPRECATED **********
          
          Conformance group for broadband MAUs attached
          to interfaces.
          
          This object group is deprecated.  There have
          been no reported implementations of this group,
          and it was felt to be unlikely that there will
          be any future implementations.
      </description>
    </group>
    <group name="mauIfGrpHighCapacity" oid="1.3.6.1.2.1.26.6.1.2.9" status="current">
      <members>
        <member module="MAU-MIB" name="ifMauFalseCarriers"/>
        <member module="MAU-MIB" name="ifMauTypeListBits"/>
        <member module="MAU-MIB" name="ifMauDefaultType"/>
        <member module="MAU-MIB" name="ifMauAutoNegSupported"/>
      </members>
      <description>
          Conformance group for MAUs attached to
          interfaces with 100 Mb/s or greater capability.
      </description>
    </group>
    <group name="mauIfGrpAutoNeg2" oid="1.3.6.1.2.1.26.6.1.2.10" status="current">
      <members>
        <member module="MAU-MIB" name="ifMauAutoNegAdminStatus"/>
        <member module="MAU-MIB" name="ifMauAutoNegRemoteSignaling"/>
        <member module="MAU-MIB" name="ifMauAutoNegConfig"/>
        <member module="MAU-MIB" name="ifMauAutoNegCapabilityBits"/>
        <member module="MAU-MIB" name="ifMauAutoNegCapAdvertisedBits"/>
        <member module="MAU-MIB" name="ifMauAutoNegCapReceivedBits"/>
        <member module="MAU-MIB" name="ifMauAutoNegRestart"/>
      </members>
      <description>
          Conformance group for MAUs attached to
          interfaces with managed auto-negotiation.
      </description>
    </group>
    <group name="mauIfGrpAutoNeg1000Mbps" oid="1.3.6.1.2.1.26.6.1.2.11" status="current">
      <members>
        <member module="MAU-MIB" name="ifMauAutoNegRemoteFaultAdvertised"/>
        <member module="MAU-MIB" name="ifMauAutoNegRemoteFaultReceived"/>
      </members>
      <description>
          Conformance group for 1000Mbps MAUs attached to
          interfaces with managed auto-negotiation.
      </description>
    </group>
    <group name="rpMauNotifications" oid="1.3.6.1.2.1.26.6.1.3.1" status="current">
      <members>
        <member module="MAU-MIB" name="rpMauJabberTrap"/>
      </members>
      <description>
          Notifications for repeater MAUs.
      </description>
    </group>
    <group name="ifMauNotifications" oid="1.3.6.1.2.1.26.6.1.3.2" status="current">
      <members>
        <member module="MAU-MIB" name="ifMauJabberTrap"/>
      </members>
      <description>
          Notifications for interface MAUs.
      </description>
    </group>
  </groups>

  <compliances>
    <compliance name="mauModRpCompl" oid="1.3.6.1.2.1.26.6.1.1.1" status="deprecated">
      <description>
          ******** THIS COMPLIANCE IS DEPRECATED ********
          
          Compliance for MAUs attached to repeater
          ports.
          This compliance is deprecated and replaced by
          mauModRpCompl2, which corrects an oversight by
          allowing rpMauStatus to be implemented
          read-only.
      </description>
      <requires>
        <mandatory module="MAU-MIB" name="mauRpGrpBasic"/>
        <option module="MAU-MIB" name="mauRpGrp100Mbs">
          <description>
              Implementation of this optional group is
              recommended for MAUs which have 100Mb/s or
              greater capability.
          </description>
        </option>
        <option module="MAU-MIB" name="mauRpGrpJack">
          <description>
              Implementation of this optional group is
              recommended for MAUs which have one or more
              external jacks.
          </description>
        </option>
        <option module="MAU-MIB" name="rpMauNotifications">
          <description>
              Implementation of this group is recommended
              for MAUs attached to repeater ports.
          </description>
        </option>
      </requires>
    </compliance>
    <compliance name="mauModIfCompl" oid="1.3.6.1.2.1.26.6.1.1.2" status="deprecated">
      <description>
          ******** THIS COMPLIANCE IS DEPRECATED ********
          
          Compliance for MAUs attached to interfaces.
          
          This compliance is deprecated and replaced by
          mauModIfCompl2.
      </description>
      <requires>
        <mandatory module="MAU-MIB" name="mauIfGrpBasic"/>
        <option module="MAU-MIB" name="mauIfGrp100Mbs">
          <description>
              Implementation of this optional group is
              recommended for MAUs which have 100Mb/s
              capability.
          </description>
        </option>
        <option module="MAU-MIB" name="mauIfGrpJack">
          <description>
              Implementation of this optional group is
              recommended for MAUs which have one or more
              external jacks.
          </description>
        </option>
        <option module="MAU-MIB" name="mauIfGrpAutoNeg">
          <description>
              Implementation of this group is mandatory
              for MAUs which support managed
              auto-negotiation.
          </description>
        </option>
        <option module="MAU-MIB" name="mauBroadBasic">
          <description>
              Implementation of this group is mandatory
              for broadband MAUs.
          </description>
        </option>
        <option module="MAU-MIB" name="ifMauNotifications">
          <description>
              Implementation of this group is recommended
              for MAUs attached to interfaces.
          </description>
        </option>
      </requires>
    </compliance>
    <compliance name="mauModIfCompl2" oid="1.3.6.1.2.1.26.6.1.1.3" status="current">
      <description>
          Compliance for MAUs attached to interfaces.
      </description>
      <requires>
        <mandatory module="MAU-MIB" name="mauIfGrpBasic"/>
        <option module="MAU-MIB" name="mauIfGrpHighCapacity">
          <description>
              Implementation of this optional group is
              recommended for MAUs which have 100Mb/s
              or greater capability.
          </description>
        </option>
        <option module="MAU-MIB" name="mauIfGrpJack">
          <description>
              Implementation of this optional group is
              recommended for MAUs which have one or more
              external jacks.
          </description>
        </option>
        <option module="MAU-MIB" name="mauIfGrpAutoNeg2">
          <description>
              Implementation of this group is mandatory
              for MAUs which support managed
              auto-negotiation.
          </description>
        </option>
        <option module="MAU-MIB" name="mauIfGrpAutoNeg1000Mbps">
          <description>
              Implementation of this group is mandatory
              for MAUs which have 1000Mb/s or greater
              capability and support managed
              auto-negotiation.
          </description>
        </option>
        <option module="MAU-MIB" name="ifMauNotifications">
          <description>
              Implementation of this group is recommended
              for MAUs attached to interfaces.
          </description>
        </option>
      </requires>
      <refinements>
        <refinement module="MAU-MIB" name="ifMauStatus">
          <access>readonly</access>
          <description>
              Write access is not required.
          </description>
        </refinement>
      </refinements>

    </compliance>
    <compliance name="mauModRpCompl2" oid="1.3.6.1.2.1.26.6.1.1.4" status="current">
      <description>
          Compliance for MAUs attached to repeater
          ports.
      </description>
      <requires>
        <mandatory module="MAU-MIB" name="mauRpGrpBasic"/>
        <option module="MAU-MIB" name="mauRpGrp100Mbs">
          <description>
              Implementation of this optional group is
              recommended for MAUs which have 100Mb/s or
              greater capability.
          </description>
        </option>
        <option module="MAU-MIB" name="mauRpGrpJack">
          <description>
              Implementation of this optional group is
              recommended for MAUs which have one or more
              external jacks.
          </description>
        </option>
        <option module="MAU-MIB" name="rpMauNotifications">
          <description>
              Implementation of this group is recommended
              for MAUs attached to repeater ports.
          </description>
        </option>
      </requires>
      <refinements>
        <refinement module="MAU-MIB" name="rpMauStatus">
          <access>readonly</access>
          <description>
              Write access is not required.
          </description>
        </refinement>
      </refinements>

    </compliance>
  </compliances>

</smi>
