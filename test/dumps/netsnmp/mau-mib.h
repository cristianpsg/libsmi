/*
 * This C header file has been generated by smidump 0.2.13.
 * It is intended to be used with the NET-SNMP agent.
 *
 * This header is derived from the MAU-MIB module.
 *
 * $Id$
 */

#ifndef _MAU_MIB_H_
#define _MAU_MIB_H_

#include <stdlib.h>

#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif

/*
 * Initialization function:
 */

void init_mau_mib(void);

/*
 * Structures for groups of scalars and table entries:
 */

typedef struct rpMauEntry {
    int32_t   rpMauGroupIndex;
    int32_t   rpMauPortIndex;
    int32_t   rpMauIndex;
    uint32_t  rpMauType[128];
    size_t    _rpMauTypeLength;
    int32_t   rpMauStatus;
    int32_t   rpMauMediaAvailable;
    uint32_t  rpMauMediaAvailableStateExits;
    int32_t   rpMauJabberState;
    uint32_t  rpMauJabberingStateEnters;
    uint32_t  rpMauFalseCarriers;
    void      *_clientData;		/* pointer to client data structure */
    struct rpMauEntry *_nextPtr;	/* pointer to next table entry */
} rpMauEntry_t;

extern int
read_rpMauEntry(rpMauEntry_t *rpMauEntry);

extern int
register_rpMauEntry();

typedef struct rpJackEntry {
    int32_t   rpJackIndex;
    int32_t   rpJackType;
    void      *_clientData;		/* pointer to client data structure */
    struct rpJackEntry *_nextPtr;	/* pointer to next table entry */
} rpJackEntry_t;

extern int
read_rpJackEntry(rpJackEntry_t *rpJackEntry);

extern int
register_rpJackEntry();

typedef struct ifMauEntry {
    int32_t   ifMauIfIndex;
    int32_t   ifMauIndex;
    uint32_t  ifMauType[128];
    size_t    _ifMauTypeLength;
    int32_t   ifMauStatus;
    int32_t   ifMauMediaAvailable;
    uint32_t  ifMauMediaAvailableStateExits;
    int32_t   ifMauJabberState;
    uint32_t  ifMauJabberingStateEnters;
    uint32_t  ifMauFalseCarriers;
    int32_t   ifMauTypeList;
    uint32_t  ifMauDefaultType[128];
    size_t    _ifMauDefaultTypeLength;
    int32_t   ifMauAutoNegSupported;
    u_char    ifMauTypeListBits[4];
    size_t    _ifMauTypeListBitsLength;
    void      *_clientData;		/* pointer to client data structure */
    struct ifMauEntry *_nextPtr;	/* pointer to next table entry */
} ifMauEntry_t;

extern int
read_ifMauEntry(ifMauEntry_t *ifMauEntry);

extern int
register_ifMauEntry();

typedef struct ifJackEntry {
    int32_t   ifJackIndex;
    int32_t   ifJackType;
    void      *_clientData;		/* pointer to client data structure */
    struct ifJackEntry *_nextPtr;	/* pointer to next table entry */
} ifJackEntry_t;

extern int
read_ifJackEntry(ifJackEntry_t *ifJackEntry);

extern int
register_ifJackEntry();

typedef struct broadMauBasicEntry {
    int32_t   broadMauIfIndex;
    int32_t   broadMauIndex;
    int32_t   broadMauXmtRcvSplitType;
    int32_t   broadMauXmtCarrierFreq;
    int32_t   broadMauTranslationFreq;
    void      *_clientData;		/* pointer to client data structure */
    struct broadMauBasicEntry *_nextPtr;	/* pointer to next table entry */
} broadMauBasicEntry_t;

extern int
read_broadMauBasicEntry(broadMauBasicEntry_t *broadMauBasicEntry);

extern int
register_broadMauBasicEntry();

typedef struct ifMauAutoNegEntry {
    int32_t   ifMauAutoNegAdminStatus;
    int32_t   ifMauAutoNegRemoteSignaling;
    int32_t   ifMauAutoNegConfig;
    int32_t   ifMauAutoNegCapability;
    int32_t   ifMauAutoNegCapAdvertised;
    int32_t   ifMauAutoNegCapReceived;
    int32_t   ifMauAutoNegRestart;
    u_char    ifMauAutoNegCapabilityBits[2];
    size_t    _ifMauAutoNegCapabilityBitsLength;
    u_char    ifMauAutoNegCapAdvertisedBits[2];
    size_t    _ifMauAutoNegCapAdvertisedBitsLength;
    u_char    ifMauAutoNegCapReceivedBits[2];
    size_t    _ifMauAutoNegCapReceivedBitsLength;
    int32_t   ifMauAutoNegRemoteFaultAdvertised;
    int32_t   ifMauAutoNegRemoteFaultReceived;
    void      *_clientData;		/* pointer to client data structure */
    struct ifMauAutoNegEntry *_nextPtr;	/* pointer to next table entry */
} ifMauAutoNegEntry_t;

extern int
read_ifMauAutoNegEntry(ifMauAutoNegEntry_t *ifMauAutoNegEntry);

extern int
register_ifMauAutoNegEntry();


typedef struct mau_mib {
    rpMauEntry_t	*rpMauEntry;
    rpJackEntry_t	*rpJackEntry;
    ifMauEntry_t	*ifMauEntry;
    ifJackEntry_t	*ifJackEntry;
    broadMauBasicEntry_t	*broadMauBasicEntry;
    ifMauAutoNegEntry_t	*ifMauAutoNegEntry;
} mau_mib_t;

#endif /* _MAU_MIB_H_ */
