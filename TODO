
o error detection: detect IMPORTs of SMIv1 specific and SMIv2 specific
  items in the same module, e.g. old OBJECT-TYPE macro and (new)
  NOTIFICATION-TYPE macro.

o error detection: does table node have exactly one row sub node
  with oid == 1? (2578.7.10)

o warning detection: non continuous sub oids in column node list?

o warning detection: integer(signed) in index

o error detection: parser-smi.y: remember SEQUENCE contents and check them

o remove SMI_DECL_IMPL_SEQUENCEOF from smi.h: the smiv1/smiv2 parser 
  should keep internal data structures for sequence types so that it 
  can set the correct nodekinds and that it can check the SEQUENCE 
  contents (see previous item). these internal data structures can
  be released at the end of a MIB module.

o warning detection: check, whether OIDs of indexed columns might be
  longer than 128 subids.

o warning detection: enumerations SHOULD NOT contain signedNumber's.
  SHOULD start at 1. SHOULD be numbered contiguously.
  e.g. DISMAN-SCHEDULE-MIB.SnmpPduErrorStatus

o warning detection: zeroDotZero defined locally instead of
  imported from SMI.



o parser-smi.y: handle forbidden WS at some places
  ( Module . label, ...)

o dump-sming.c: ensure an order without forward references in typedef's.

o dump-sming.c: support all(!) kinds of index clauses

o redesign of data structures: make SmiXXX structures the heads of the
  according data.h structures. This would obsolete the Free() functions
  and enable fast getNext() functions by accessing the underlying lists.

o smi.c: smiGetNames() is not yet implemented. do we really need it?

o thread safety (global vars? static vars? strtok() and other funcs?)
  different views

o if `parse error' occurs, the database is left in an inconsistent state,
  e.g. index labels of sming modules are not adjusted.

o need a handle to distinguish different views.

o clearly separate language dependent information at the API: SMI_STATUS_*
  map STATUS to a non-language-dependent type

o OID/Name Lookup Service (continue work on smid?)

o how to convert SMIng types derived from other defined types correctly
  to SMIv2?

o various dump modules don't print identifiers fully qualified where
  appropriate

o collapsing of type forward references in smiv2 parser. e.g.
  smiquery type CHARACTER-MIB.CharSessEntry
  should display the definition by a SEQUENCE statement, not `unknown'.

o Web online conversion to SMIng?

o make check: parse every mib once, and don't crash

o special handling for well-known traps (reversibility?)

o smidump -f smiv1 now prints read AUGMENTS clauses as index lists correctly
  but these index objects might not be imported.

o man pages!

o SMIng: module identity object (grammar, I-D and parser)

o think about smiModule(), smiDescriptor(), smiOidString(smiNode), ...
  memory allocation?

o MessageSize                [0.."ÿÿÿ"]
  in smidump -f types -u /usr/local/share/mibs/ietf/* output



extern char *smiModule(char *fullname);
extern char *smiDescriptor(char *fullname);
views
vage get calls should retrieve the most recent definition?!
man pages: smi_node und tools
