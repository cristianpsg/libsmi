.\"
.\" $Id: smi_config.3,v 1.1 1999/05/04 23:26:26 strauss Exp $
.\"
.TH smi_config 3  "May 5, 1999" "IBR" "SMI Management Information Library"
.SH NAME
smiInit, smiSetDebugLevel, smiSetErrorLevel, smiGetFlags, smiSetFlags,
smiReadConfig, smiAddLocation, smiLoadModule \- SMI library
configuration routines
.SH SYNOPSIS
.nf
.B #include <smi.h>
.RS
.RE
.sp
.BI "void smiInit();"
.RE
.sp
.BI "void smiSetDebugLevel(int " level );
.RE
.sp
.BI "void smiSetErrorLevel(int " level );
.RE
.sp
.BI "int smiGetFlags();"
.RE
.sp
.BI "void smiSetFlags(int " userflags );
.RE
.sp
.BI "int smiReadConfig(const char *" file );
.RE
.sp
.BI "int smiAddLocation(const char *" location );
.RE
.sp
.BI "int smiLoadModule(char *" modulename );
.RE
.fi
.SH DESCRIPTION
These functions allow some initialization and adjustment operations
for the SMI library.
.PP
The \fBsmiInit()\fP function should be the first SMI function called
in an application. It initializes its internal structures and reads a
global configuration file (\fB/usr/local/etc/smi.conf\fP) which may
set some default behaviours. See \fICONFIGURATION FILES\fP below.
.PP
The \fBsmiSetDebugLevel()\fP function sets the debugging verbosity
(0-9) of the SMI library. This is for library debugging purpose only
and might even be turned off completely at library compile time. The
higher the level, the louder it shouts. The perfect default
level is 0.
.PP
The \fBsmiSetErrorLevel()\fP function sets the pedantic level (0-9) of
the SMI parsers of the SMI library, currently SMIv1/v2 and SMIng
(which might but should not be turned off at library compile
time). The higher the level, the louder it complains. Values up to 3
should be regarded as errors, higher level could be interpreted as
warnings.  But note that this classification is some kind of personal
taste.  The default level is 0, since usually only MIB checkers want
to tune a higher level.
.PP
The \fBsmiGetFlags()\fP and \fBsmiSetFlags()\fP functions allow to
fetch, modify and set some \fIuserflags\fP that control the SMI
library's behaviour.  If \fBSMI_ERRORS\fP is not set no error messages
are printed at all to keep the SMI library totally quiet, which might
be mandatory for some applications. If \fBSMI_ERRORLINES\fP is set and
an error is printed it is followed by two lines: the current source
module line and a second line that marks the current point in the line
above. If \fBSMI_STATS\fP is set and the error level is 9 the
library prints some module statistics. If \fBSMI_RECURSIVE\fP is set,
the library also complains about errors in modules that are reads due
to import statements.
.PP
The \fBsmiReadConfig()\fP function allows to read an additional
configuration \fIfile\fP. See \fICONFIGURATION FILES\fP below.
.PP
The \fBsmiAddLocation()\fP function allows to specify an additional
\fIlocation\fP where the SMI library looks for MIB modules to
read. See \fIMODULE LOCATIONS\fP below.
.PP
The \fBsmiLoadModule()\fP function specifies an additional MIB module by
\fImodulename\fP that the applications claims to know. Only after a
module is made known through this function, iterating retrieval
functions and retrieval functions without fully qualified descriptors
will return results from this module.
.SH "RETURN VALUES"
The functions \fBsmiReadConfig()\fP, \fBsmiAddLocation()\fP, and
\fBsmiLoadModule()\fP return 0 on success, or negative values on
error. \fBsmiGetFlags()\fP returns the current set of flags. The
other functions are void.
.SH "MODULE LOCATIONS"
The SMI library may retrieve MIB modules from different kinds of
resources, named locations. A location is specified by the method
(currently "smi" or "sming"), a colon ":" and a concrete specification
which depends on the method (currently only a directory
specification). Examples are:
.nf

  smi:.
  smi:/usr/local/lib/smi/mibs-smi
  sming:/usr/local/lib/smi/mibs-sming

.fi
Locations are searched in the order they are specified.
.SH "CONFIGURATION FILES"
Configuration files contain line oriented text. Lines starting
with a '#' character and blank lines are ignored. Other lines
are expected to be valid configuration statements starting with
a keyword followed by an optional argument.
.TP
.I \fBlocation\fP \fIlocation\fP
specifies an additional \fIlocation\fP, equivalent to a
\fBsmiAddLocation()\fP call.
.TP
.I \fBpreload\fP \fImodule\fP
(pre)loads a \fImodule\fP, equivalent to a \fBsmiLoadModule()\fP call.
.TP
.I \fBloglevel\fP \fIlevel\fP
sets the level (0-9) of error logging to \fIlevel\fP, equivalent to a
\fBsmiErrorLevel()\fP call.
.TP
.I \fBdebuglevel\fP \fIlevel\fP
sets the level (0-9) of debugging to \fIlevel\fP, equivalent to a
\fBsmiDebugLevel()\fP call.
.TP
.I \fByydebug\fP \fI1|0\fP
turns the yyerror facility on or off, see bison(1).
.TP
.I \fBstatistics\fP \fI1|0\fP
turns the statistics flag on or off, see \fBsmiSetFlags()\fP above.
.TP
.I \fBimportlogging\fP \fI1|0\fP
turns the error logging of imported modules on or off, see
\fBsmiSetFlags()\fP above.
.TP
.I \fBerrorlines\fP \fI1|0\fP
turns the output of marked erroneous lines on or off, see
\fBsmiSetFlags()\fP above.
.PP
The global configuration file \fB/usr/local/etc/smi.conf\fP is read
before any other libsmi operation.
.SH "FILES"
.nf
/usr/local/include/smi.h    SMI library header file
/usr/local/etc/smi.conf     global configuration file
/usr/local/etc/smi*.conf    other configuration files
.fi
.SH "NOTES"
Libsmi is work in progress. Interface inconsistencies and deficiencies
will be removed in near future.
.SH "SEE ALSO"
.BR libsmi "(3), "
.BR smi.h
.SH "AUTHOR"
Frank Strauss <strauss@ibr.cs.tu-bs.de>
.br
