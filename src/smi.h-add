/*
 * smi.h-add --
 *
 *      Additions to smi.h which are not RPC but libsmi API specific.
 *
 * Copyright (c) 1998 Technical University of Braunschweig.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * @(#) $Id: smi.h-add,v 1.3 1998/11/20 17:10:15 strauss Exp $
 */

#ifndef _SMI_H_ADD
#define _SMI_H_ADD

#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>

#define SMI_ERRORS      0x1000
#define SMI_ERRORLINES  0x2000
#define SMI_STATS       0x4000
#define SMI_RECURSIVE   0x8000
#define SMI_FLAGMASK    (SMI_STATS|SMI_RECURSIVE|SMI_ERRORS|SMI_ERRORLINES)


#define smiStringAccess(access) ( \
	(access == SMI_ACCESS_NOT_ACCESSIBLE) ? "not-accessible" : \
	(access == SMI_ACCESS_NOTIFY)	      ? "accessible-for-notify" : \
	(access == SMI_ACCESS_READ_ONLY)      ? "read-only" : \
	(access == SMI_ACCESS_READ_WRITE)     ? "read-write" : \
	(access == SMI_ACCESS_READ_CREATE)    ? "read-create" : \
	(access == SMI_ACCESS_WRITE_ONLY)     ? "write-only" : \
						"<unknown>" )

#define smiStringStatus(status) ( \
	(status == SMI_STATUS_CURRENT)     ? "current" : \
	(status == SMI_STATUS_DEPRECATED)  ? "deprecated" : \
	(status == SMI_STATUS_OBSOLETE)    ? "obsolete" : \
	(status == SMI_STATUS_MANDATORY)   ? "mandatory" : \
	(status == SMI_STATUS_OPTIONAL)    ? "optional" : \
					     "<unknown>" )

#define smiStringDecl(macro) ( \
	(macro == SMI_DECL_UNKNOWN)           ? "<UNKNOWN>" : \
	(macro == SMI_DECL_SIMPLEASSIGNMENT)  ? "<SIMPLE-ASSIGNMENT>" : \
	(macro == SMI_DECL_OBJECTTYPE)        ? "OBJECT-TYPE" : \
	(macro == SMI_DECL_OBJECTIDENTITY)    ? "OBJECT-IDENTITY" : \
	(macro == SMI_DECL_MODULEIDENTITY)    ? "MODULE-IDENTITY" : \
	(macro == SMI_DECL_NOTIFICATIONTYPE)  ? "NOTIFICATIONTYPE" : \
	(macro == SMI_DECL_TRAPTYPE)          ? "TRAP-TYPE" : \
	(macro == SMI_DECL_OBJECTGROUP)       ? "OBJECT-GROUP" : \
	(macro == SMI_DECL_NOTIFICATIONGROUP) ? "NOTIFICATION-GROUP" : \
	(macro == SMI_DECL_MODULECOMPLIANCE)  ? "MODULE-COMPLIANCE" : \
	(macro == SMI_DECL_AGENTCAPABILITIES) ? "AGENT-CAPABILITIES" : \
	(macro == SMI_DECL_TEXTUALCONVENTION) ? "TEXTUAL-CONVENTION" : \
					        "<unknown>" )

#define smiStringSyntax(syntax) ( \
	(syntax == SMI_SYNTAX_UNKNOWN)           ? "<UNKNOWN>" : \
	(syntax == SMI_SYNTAX_INTEGER)           ? "INTEGER" : \
	(syntax == SMI_SYNTAX_OCTET_STRING)      ? "OCTET STRING" : \
	(syntax == SMI_SYNTAX_OBJECT_IDENTIFIER) ? "OBJECT IDENTIFIER" : \
	(syntax == SMI_SYNTAX_SEQUENCE)          ? "SEQUENCE" : \
	(syntax == SMI_SYNTAX_SEQUENCE_OF)       ? "SEQUENCE OF" : \
	(syntax == SMI_SYNTAX_IPADDRESS)         ? "IpAddress" : \
	(syntax == SMI_SYNTAX_COUNTER32)         ? "Counter32" : \
	(syntax == SMI_SYNTAX_GAUGE32)           ? "Gauge32" : \
	(syntax == SMI_SYNTAX_UNSIGNED32)        ? "Unsigned32" : \
	(syntax == SMI_SYNTAX_TIMETICKS)         ? "TimeTicks" : \
	(syntax == SMI_SYNTAX_OPAQUE)            ? "Opaque" : \
	(syntax == SMI_SYNTAX_COUNTER64)         ? "Counter64" : \
	(syntax == SMI_SYNTAX_CHOICE)            ? "CHOICE" : \
					           "<unknown>" )


extern void smiInit();

extern void smiSetDebugLevel(int level);

extern void smiSetErrorLevel(int level);

extern void smiSetFlags(int userflags);

extern int smiReadConfig(const char *file);

extern int smiAddLocation(const char *location);

extern int smiLoadMibModule(smi_descriptor modulename);

/*
 * Functions similar to those in smi.x.
 *
 * Where the RPC calls expect fullnames, here the `name' argument may
 * be the single descriptor name and the `module' may contain the
 * module name. Otherwise, when `name' contains the whole name in the
 * form `Module.Descriptor', `module' has to be NULL.
 */

extern smi_module *smiGetModule(smi_descriptor name,
			       int wantdescr);

extern smi_node *smiGetNode(smi_fullname name,
			    smi_descriptor module,
			    int wantdescr);

extern smi_type *smiGetType(smi_fullname name,
			    smi_descriptor module,
			    int wantdescr);

extern smi_macro *smiGetMacro(smi_fullname name,
			      smi_descriptor module);

extern smi_namelist *smiGetNames(smi_fullname name,
				 smi_descriptor module);

extern smi_namelist *smiGetChildren(smi_fullname name,
				    smi_descriptor module);

extern smi_namelist *smiGetMembers(smi_fullname name,
				   smi_descriptor module);

extern smi_fullname *smiGetParent(smi_fullname name,
				  smi_descriptor module);

/*
 * TODO: status and (cache-)config functions ?
 */

extern int smi_svc_init(int argc, char *argv[]);

#endif /* _SMI_H_ADD */
